<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Notes on Quantum Computing</title>
<link>https://idnm.github.io/blog/index.html</link>
<atom:link href="https://idnm.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.319</generator>
<lastBuildDate>Sun, 30 Jun 2024 21:00:00 GMT</lastBuildDate>
<item>
  <title>Where do quantum speedups come from?</title>
  <link>https://idnm.github.io/blog/posts/where_quantum_speedups_come_from/index.html</link>
  <description><![CDATA[ 




<section id="intro" class="level1">
<h1>Intro</h1>
<p>In this post, I try to explain why quantum computers can be more powerful than classical. And I aim for an explanation “as simple as possible but no simpler”, with only minimal background in linear algebra and probability assumed. There are two points to address.</p>
<ol type="1">
<li>Why a classical computer can not efficiently reproduce. i.e.&nbsp;<em>simulate</em>, an arbitrary quantum computation?</li>
<li>Why some of these quantum computations solve useful problems?</li>
</ol>
<p>To make quantum computing of general interest, you really need both. My main focus, however, will be on the first property. The second one, which is by no means less important, I’ll touch only briefly.</p>
<p>There are multiple ways to highlight the difference between classical and quantum. Comparing them head-to-head is not easy, simply because we usually use very different language to describe the two. Here, I will focus on comparing quantum computing with probabilistic classical computing. Classical probabilistic description of the system of <img src="https://latex.codecogs.com/png.latex?n"> bits has certain features that are often perceived as unique to quantum mechanics, such as the exponential size of the state space. Overall, it makes for a fairer apples-to-apples kind of comparison. Ultimately, quantum mechanics can be understood as a generalization of the probability theory.</p>
</section>
<section id="qubits-superposition-and-amplitudes" class="level1">
<h1>Qubits, superposition, and amplitudes</h1>
<p>Classical computers manipulate classical <em>bits</em>, i.e.&nbsp;systems that can be in one of two states, <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?1"> (think transistors [check]). Quantum computers manipulate quantum bits, or <em>qubits</em>. Similarly to a classical bit, a qubit can be in two states, denoted by <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">. However, a qubit can also be in a state described by an (almost) arbitrary linear combination</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C%5Cpsi%5Crangle%20=%20a_0%20%7C0%5Crangle+a_1%20%7C1%5Crangle%20%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>The states <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> should be thought of as two orthogonal two-dimensional vectors. For instance, in explicit computations one often sets <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D%201%20%5C%5C%200%5Cend%7Bpmatrix%7D,%20%7C1%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D%200%20%5C%5C%201%5Cend%7Bpmatrix%7D">. Also, notation <img src="https://latex.codecogs.com/png.latex?%7C%5Ccdot%5Crangle"> is nothing more than an unusual notation for a vector. We could have just denoted the states of a qubit by <img src="https://latex.codecogs.com/png.latex?%5Cvec%7B0%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cvec%7B1%7D">, but I’ll keep the fancy Dirac notation.</p>
<p>In the quantum jargon, a linear combination of <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> is called a <em>superposition</em>. The superposition principle states that (almost) any vector in the state space, i.e.&nbsp;any linear combination of <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> is a valid state. The coefficients <img src="https://latex.codecogs.com/png.latex?a_0"> and <img src="https://latex.codecogs.com/png.latex?a_1">, called <em>amplitudes</em>, can be positive or negative. (They can even be complex, but negative amplitudes are sufficient to summon the quantum magic.)</p>
</section>
<section id="probabilistic-interpretation-of-superposition" class="level1">
<h1>Probabilistic interpretation of superposition</h1>
<p>Alright, but what does it mean for a qubit to be in a superposition of <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">? In many ways, it is similar to saying that there is some probability that the qubit is in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, and some probability it is in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">. Yet, there are crucial differences between a superposition, and a classical probability distribution, that eventually lead to the quantum speedups.</p>
<p>Let’s first discuss the similarities. Given a qubit in state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle">, we can make a <em>measurement</em> on it. The measurement result is a simple definite state of the qubit, either <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> or <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">. But the outcome is probabilistic. We get state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> with probability <img src="https://latex.codecogs.com/png.latex?p_0=%7Ca_0%7C%5E2">, and state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> with probability <img src="https://latex.codecogs.com/png.latex?p_1=%7Ca_1%7C%5E2">. Naturally, a valid quantum state must have <img src="https://latex.codecogs.com/png.latex?p_0+p_1=1">. Any two amplitudes <img src="https://latex.codecogs.com/png.latex?a_0"> and <img src="https://latex.codecogs.com/png.latex?a_1"> satisfying <img src="https://latex.codecogs.com/png.latex?%7Ca_0%7C%5E2+%7Ca_1%7C%5E2=1"> define a valid state of a qubit.If the only thing we do is the measurement, then the qubit with amplitudes <img src="https://latex.codecogs.com/png.latex?(a_0,%20a_1)"> is virtually indistinguishable from a proabilistic, which is <img src="https://latex.codecogs.com/png.latex?0"> with probability <img src="https://latex.codecogs.com/png.latex?p_0"> and <img src="https://latex.codecogs.com/png.latex?1"> with probability <img src="https://latex.codecogs.com/png.latex?p_1">. Note that in this respect, qubits with amplitudes <img src="https://latex.codecogs.com/png.latex?(a_0,%20a_1)"> and <img src="https://latex.codecogs.com/png.latex?(a_0,%20-a_1)"> are also indistinguishable.</p>
</section>
<section id="quantum-mechanics-is-a-theory-of-amplitudes" class="level1">
<h1>Quantum mechanics is a theory of amplitudes</h1>
<p>Now for the differences between a superposition and a probability distribution. Quantum mechanics is fundamentally a theory of amplitudes. While amplitudes give rise to probabilities of measurement outcomes, the amplitudes are primary. Quantum computations, and more generally quantum processes, transform amplitudes. You can not reduce quantum amplitudes to the probabilities they represent. Here is an example illustrating the crucial difference.</p>
<section id="bit-flipping" class="level2">
<h2 class="anchored" data-anchor-id="bit-flipping">Bit flipping</h2>
<p>Let’s call <img src="https://latex.codecogs.com/png.latex?F"> a procedure of taking a classical bit, and randomly flipping it. Say the bit was initially in <img src="https://latex.codecogs.com/png.latex?0">. After flipping, it is <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?1"> with equal probability, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?p_0=p_1=%5Cfrac12">. Let’s apply <img src="https://latex.codecogs.com/png.latex?F"> once more, e.g.&nbsp;flip the bit the second time. This results in the following possibility tree.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/where_quantum_speedups_come_from/figs/prob_tree.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>There are two ways that the final state of the bit can turn out <img src="https://latex.codecogs.com/png.latex?1">. The first is that the bit transitioned <img src="https://latex.codecogs.com/png.latex?0%5Cto%200%20%5Cto%201"> and the second is a through a sequence <img src="https://latex.codecogs.com/png.latex?0%20%5Cto%201%20%5Cto%201">. Each “history” or <em>trajectory</em> has probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac14%20=%5Cfrac12%5Ctimes%5Cfrac12">, so that the total probability to find the bit in state <img src="https://latex.codecogs.com/png.latex?1"> after applying <img src="https://latex.codecogs.com/png.latex?F"> twice is <img src="https://latex.codecogs.com/png.latex?%5Cfrac12=%5Cfrac14+%5Cfrac14">.</p>
</section>
<section id="qubit-flipping" class="level2">
<h2 class="anchored" data-anchor-id="qubit-flipping">Qubit flipping</h2>
<p>Here is a quantum version of this scenario. There is a process called the Hadamard gate <img src="https://latex.codecogs.com/png.latex?H">, which acts as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH%7C0%5Crangle%20=%20%7C+%5Crangle%20:=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%7C0%5Crangle%20+%20%7C1%5Crangle%5Cright)%20%5C%20,%20%5C%5C%0AH%7C1%5Crangle%20=%20%7C-%5Crangle%20:=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%7C0%5Crangle%20-%20%7C1%5Crangle%5Cright)%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>In words, <img src="https://latex.codecogs.com/png.latex?H"> takes state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> to state <img src="https://latex.codecogs.com/png.latex?%7C+%5Crangle">, proportional to the sum of <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, and takes <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> to <img src="https://latex.codecogs.com/png.latex?%7C-%5Crangle">, the state proportional to their difference. The factors <img src="https://latex.codecogs.com/png.latex?%5Cfrac1%7B%5Csqrt%7B2%7D%7D"> ensure that amplitudes squared sum to one. I justify why consider this particular quantum operation in the next section. For now suffices to say, that <img src="https://latex.codecogs.com/png.latex?H"> is a valid a simple quantum process.</p>
<p>If we simply measure them, the states <img src="https://latex.codecogs.com/png.latex?%7C+%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C-%5Crangle"> are indistinguishable from each other. Both yield <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> with equal probabilities <img src="https://latex.codecogs.com/png.latex?p_0=p_1=%5Cfrac12">. That’s why I say that <img src="https://latex.codecogs.com/png.latex?H"> is similar to our classical bit-flipping operation <img src="https://latex.codecogs.com/png.latex?F">.</p>
<p>However, when applied twice, <img src="https://latex.codecogs.com/png.latex?H"> maps <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> back onto itself <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AH%5E2%20%7C0%5Crangle=H%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%7C0%5Crangle%20+%20%7C1%5Crangle%5Cright)%20=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%5Cfrac%7B%7C0%5Crangle+%7C1%5Crangle%7D%7B%5Csqrt%7B2%7D%7D+%5Cfrac%7B%7C0%5Crangle-%7C1%5Crangle%7D%7B%5Csqrt%7B2%7D%7D%5Cright)=%7C0%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"> There is <em>no chance</em> that the final state turn out to be <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">.</p>
<p>Let’s illustrate this graphically, using the same tree of possible trajectories.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/where_quantum_speedups_come_from/figs/amp_tree.png" class="img-fluid figure-img" style="width:50.0%"></p>
</figure>
</div>
<p>Now the transitions are labeled by their amplitudes, instead of probabilities. As before, there are two ways to end up in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, one going through intermediate state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, and one going through <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">. The amplitudes of these trajectories, however, have opposite signs, <img src="https://latex.codecogs.com/png.latex?%5Cfrac12%20=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Ctimes%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?-%5Cfrac12=%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Ctimes%20(-%5Cfrac1%7B%5Csqrt%7B2%7D%7D)">, respectively. This makes the total amplitude, end hence the total probability, to end up in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> vanishing.</p>
</section>
<section id="amplitudes-cancel-probabilities-do-not" class="level2">
<h2 class="anchored" data-anchor-id="amplitudes-cancel-probabilities-do-not">Amplitudes cancel, probabilities do not</h2>
<p>This is <em>the key</em> difference between classical and quantum. For a classical probabilistic process, the probabilities of different trajectories sum up. In other words, if there are several possibilities to reach an end state, they reinforce each other. In a quantum process, the amplitudes can <em>cancel</em> each other. The fact that there is some trajectory (with a non-zero amplitude) leading to some end state, does not mean that this end state is in fact reachable. The amplitude of this trajectory can be canceled by others. This is known as a <em>quantum interference</em>. (If you are familiar, this is what the famous two-slit experiment shows. Opening up a new slit for particles to pass through can <em>decrease</em> their chances of getting to a particular end point.)</p>
</section>
</section>
<section id="quantum-states-and-processes" class="level1">
<h1>Quantum states and processes</h1>
<p>Before discussing why amplitude cancelling can lead to quantum speedups, I will address two technical points.</p>
<section id="i-dont-understand-your-h-gate" class="level2">
<h2 class="anchored" data-anchor-id="i-dont-understand-your-h-gate">I don’t understand your <img src="https://latex.codecogs.com/png.latex?H"> gate</h2>
<p>You may find our discussion of the <img src="https://latex.codecogs.com/png.latex?H"> gate unmotivated or unnatural. Why is this gate defined the way it does? What does it mean?</p>
<p>The <img src="https://latex.codecogs.com/png.latex?H"> gate was only used to give a simple illustration of quantum interference. We could have used almost any other quantum process instead. A probabilistic classical processes only needs to preserve the total probability, and the same is true for a quantum process. More precisely, a quantum process needs to be linear and preserve the property that the squares of the amplitudes sum up to one. The <img src="https://latex.codecogs.com/png.latex?H"> gate has this property, it is a simple and valid quantum process. Mathematically, it is a unitary matrix <img src="https://latex.codecogs.com/png.latex?H=%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cbegin%7Bpmatrix%7D1%20&amp;%201%20%5C%5C%201%20&amp;%20-1%5Cend%7Bpmatrix%7D">. Conversely, any unitary matrix represents a quantum process. Almost all unitary matrices feature negative or complex entries, and hence exhibit the amplitude-cancelling behavior.</p>
<p>Here is yet another way to introduce <img src="https://latex.codecogs.com/png.latex?H"> gate. Any classical boolean function (i.e.&nbsp;a classical computation) can be expressed as a sequence of simple gates. For example, NAND [ref] gate is universal, meaning that an arbitrary classical computation can be expressed as a sequence of NAND gates alone. Probably a less familiar option is the Toffoli gate [ref], which takes three bits as an input, and inverts the third bit if the first two bits are “on”. The Toffoli gate is universal for classical computation, and has the nice property that it is reversible (and in particular is its own inverse). Reversible classical gates can be easily implemented on a quantum computer. However, the Toffoli gate is not universal for <em>quantum</em> computation. Indeed, it merely shuffles the bitstings, and can not create a superposition like <img src="https://latex.codecogs.com/png.latex?%7C+%5Crangle">. However, supplementing the Toffoli gate with (almost) any other quantum gate that <em>can</em> create superpositions makes for a universal gate set. In particular, Toffoli+H is a universal quantum gate set. So in a sense, <img src="https://latex.codecogs.com/png.latex?H"> gate can capture all the quantumness there is. (Note however, that this is true for almost any other choice of an additional gate.)</p>
</section>
<section id="states-of-many-qubits" class="level2">
<h2 class="anchored" data-anchor-id="states-of-many-qubits">States of many qubits</h2>
<p>A general state of three qubits can be written as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C%5Cpsi%5Crangle%20=%20a_%7B000%7D%7C000%5Crangle%20+%20a_%7B001%7D%7C001%5Crangle+a_%7B010%7D%7C010%5Crangle+a_%7B011%7D%7C011%5Crangle+a_%7B100%7D%7C100%5Crangle%20+%20a_%7B101%7D%7C101%5Crangle+a_%7B110%7D%7C110%5Crangle+a_%7B111%7D%7C111%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>Notation <img src="https://latex.codecogs.com/png.latex?%7Cx_1x_2x_3%5Crangle"> is a shorthand for saying that the first qubit is in state <img src="https://latex.codecogs.com/png.latex?%7Cx_1%5Crangle">, the second in state <img src="https://latex.codecogs.com/png.latex?%7Cx_2%5Crangle">, and the third in state <img src="https://latex.codecogs.com/png.latex?%7Cx_3%5Crangle">. The amplitudes here have the same meaning as for a single qubit. For instance, <img src="https://latex.codecogs.com/png.latex?%7Ca_%7B101%7D%7C%5E2"> is the probability to find the first and third qubits in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, and the second qubit in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, upon measuring. For three qubits there are <img src="https://latex.codecogs.com/png.latex?8"> possible states, and <img src="https://latex.codecogs.com/png.latex?8"> amplitudes. For <img src="https://latex.codecogs.com/png.latex?n"> qubits, there are <img src="https://latex.codecogs.com/png.latex?2%5En"> possible bit-strings and <img src="https://latex.codecogs.com/png.latex?2%5En"> amplitudes (subject to the total probability equals one condition). This exponential dimension of the state space is often cited as <em>the origin</em> of the quantum speedups. Yet, it is only a part of the story.</p>
<p>Indeed, while the number of qubits <img src="https://latex.codecogs.com/png.latex?n"> is small enough, so that the dimension of the state space <img src="https://latex.codecogs.com/png.latex?2%5En"> is manageable, any quantum process can be simulated. This is known as state-vector simulation, and it only requires being able to store and update a vector of dimension <img src="https://latex.codecogs.com/png.latex?2%5En"> (currently, up to roughly <img src="https://latex.codecogs.com/png.latex?n=50"> qubits can be simulated by this brute-force approach.).</p>
<p>However, the mere exponential growth of the state space is not sufficient. We have the same growth in classical probabilistic description. Indeed, to specify the probability distribution over <img src="https://latex.codecogs.com/png.latex?n"> classical bits, one needs to provide <img src="https://latex.codecogs.com/png.latex?2%5En"> probabilities corresponding to each possible bit string. For instance, to describe a probability distribution over three bits, one needs to specify eight probabilities <img src="https://latex.codecogs.com/png.latex?p_%7B000%7D"> through <img src="https://latex.codecogs.com/png.latex?p_%7B111%7D">.</p>
</section>
</section>
<section id="why-quantum-interference-defies-classical-simulation" class="level1">
<h1>Why quantum interference defies classical simulation</h1>
<p>Now we are ready to explain why some quantum computations can not be efficiently simulated by a classical computer. Imagine a quantum computer that manipulates <img src="https://latex.codecogs.com/png.latex?n"> qubits. It runs a quantum algorithm that outputs a quantum state. This particular algorithm produces a quantum state that is not a superposition, but a particular bitstring such as <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle=%7C00101%5Cdots%5Crangle">. This bitstring <em>is</em> (or encodes) the solution to our problem. (Not all quantum algorithms are like that, but some are, to a good approximation.)</p>
<p>You should also think of a quantum algorithm as consisting of a number of simple quantum operations. Say it is a sequence of <img src="https://latex.codecogs.com/png.latex?H"> and Toffoli gates, which are universal for quantum computation. Mathematically, you can get the output state by taking the initial state, representing it as a vector, and applying matrices of various quantum gates constituting the algorithm to this vector. As discussed, this works for <img src="https://latex.codecogs.com/png.latex?n"> sufficiently small, but eventually breaks down because the memory required scales exponentially.</p>
<p>Let’s imagine a similar scenario in a classical probabilistic world. Someone comes up with a classical probabilistic algorithm that produces a correct result with probability 1. In fact, directly simulating this algorithm by keeping track of the probabilities of different bitstrings at all steps may be equally intractable, because the number of possible bitstrings is exponentially large. But we do not need to do that. We know that the algorithm outputs the correct solution with probability one, i.e.&nbsp;the correct solution is reached by <em>all</em> trajectories having a non-zero probability. We simply need to simulate a single such trajectory, and see where it ends up. Classical probabilities don’t cancel, they reinforce each other.</p>
<p>This does not work for quantum amplitudes. We can certainly find a trajectory with non-zero amplitude. But there is no guarantee that this trajectory leads to the correct result, because its amplitude can get cancelled by other trajectories. Accounting for all possible trajectories, you can determine the true probability of reaching that particular end state. Of course, generally there are exponentially many trajectories, and this is not feasible. (Incidentally, this view gives a different simulation technique. Keeping track of the total state vector requires exponential memory, but is time-efficient. In contrast, the total amplitude for reaching a particular end state can be computed by summing trajectories one by one. This requires little memory, but an exponential number of steps.)</p>
<p>A concluding remark is in order here. Neither quantum nor classical probabilistic algorithms need to produce a definite bitsting. In general, different runs produce different results, corresponding to some probability distribution. In that case, the simulation should only be capable of producing individual outcomes, or <em>samples</em>, that are described by the same distribution. This is easy to achieve in the classical probabilistic case. We simply sample one trajectory at a time, period. Ultimately, this works because though we <em>describe</em> our system as if it could be in different states at the same time step, this only makes sense for different runs of the algorithm. During a single run a classical system can really only be in a single state at a single time.</p>
<p>This does not work for quantum processes. Here, it does not suffice to sample one trajectory at a time, because different trajectories can interfere. In a sense, quantum systems can really be in several states at once.</p>
</section>
<section id="why-quantum-interference-leads-to-quantum-speed-ups" class="level1">
<h1>Why quantum interference leads to quantum speed ups</h1>
<p>We saw how quantum interference is a hindrance to a classical simulation. But why is it useful? How can it lead to quantum speedups? As it is almost always the case, the best way to understand something is through examples. We will consider two quantum algorithms.</p>
<section id="deutschs-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="deutschs-algorithm">Deutsch’s algorithm</h2>
<p>Deutsch’s algorithm is one of the first and simplest, an archetypical quantum algorithm. It may look a bit fishy though, but we’ll discuss that later. So you have a boolean function of a single bit <img src="https://latex.codecogs.com/png.latex?f(x)"> (i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?f"> takes 0 or 1 and returns 0 or 1). There are two mutually exclusive possibilities, either <img src="https://latex.codecogs.com/png.latex?f(0)=f(1)">, or <img src="https://latex.codecogs.com/png.latex?f(0)%20!=%20f(1)">. In the first case, we call the function <em>balanced</em>. The goal is to find out whether <img src="https://latex.codecogs.com/png.latex?f(0)"> is balanced.</p>
<p>Here is the fishy part. The inner workings of <img src="https://latex.codecogs.com/png.latex?f">, its source code, is not available to us. We can only query this function, i.e.&nbsp;provide it with inputs and observe outputs. In complexity theory lingo we have <em>oracular access</em> to <img src="https://latex.codecogs.com/png.latex?f">, i.e.&nbsp;we can query it, but can’t look inside.</p>
<p>How many queries to <img src="https://latex.codecogs.com/png.latex?f"> should we make to figure out if <img src="https://latex.codecogs.com/png.latex?f(0)"> is the same as <img src="https://latex.codecogs.com/png.latex?f(1)">? Right, two queries, one to find <img src="https://latex.codecogs.com/png.latex?f(0)"> and another to find <img src="https://latex.codecogs.com/png.latex?f(1)">, there is no other way.</p>
<p>Turns out, we can solve the problem with a single query on a quantum computer. For this we need a quantum version of the oracle, denoted by <img src="https://latex.codecogs.com/png.latex?U_f">. It should work as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_f%7Cx%5Crangle%20=%20(-1)%5E%7Bf(x)%7D%7Cx%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>i.e.&nbsp;the oracle changes the sign of the bits that satisfy <img src="https://latex.codecogs.com/png.latex?f(x)=1">. Why do we do it this way? Because we can not simply construct a quantum gate that maps <img src="https://latex.codecogs.com/png.latex?U_f%7Cx%5Crangle%20=%20%7Cf(x)%5Crangle">. If <img src="https://latex.codecogs.com/png.latex?f(0)=f(1)"> this gate is not reversible, which is a problem for a quantum computer. <img src="https://latex.codecogs.com/png.latex?U_f">, on the other hand, is always reversible. If you find this step suspicious, it really isn’t. Outside the oracle paradigm, having any reasonable description of a classical boolean function <img src="https://latex.codecogs.com/png.latex?f(x)"> allows constructing the corresponding quantum oracle simply and efficiently.</p>
<p>One of the key properties of quantum mechanics that I may not have emphasized enough is linearity. If <img src="https://latex.codecogs.com/png.latex?U_f"> acts the way we specified on states <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, it must act on a state in superposition as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_f%5Cleft(a_0%20%7C0%5Crangle+a_1%7C1%5Crangle%5Cright)%20=%20a_0%20(-1)%5E%7Bf(0)%7D%7C0%5Crangle+a_1%20(-1)%5E%7Bf(1)%7D%7C1%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>We are done with preliminaries. Here is the Deutsh algorithm. Start with <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and apply <img src="https://latex.codecogs.com/png.latex?H"> gate to it, to obtain <img src="https://latex.codecogs.com/png.latex?%7C+%5Crangle">. Then, apply the oracle to get</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_fH%7C0%5Crangle%20=%20U_f%20%7C+%5Crangle%20=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft((-1)%5E%7Bf(0)%7D%7C0%5Crangle%20+%20(-1)%5E%7Bf(1)%7D%7C1%5Crangle%5Cright)%0A%5Cend%7Balign%7D"></p>
<p>You see, this state sort of knows both <img src="https://latex.codecogs.com/png.latex?f(0)"> and <img src="https://latex.codecogs.com/png.latex?f(1)">. But this information can not be extracted directly. Simply measuring this state will give <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> or <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> with equal probablities, and reveal nothing about <img src="https://latex.codecogs.com/png.latex?f">. The trick is to apply <img src="https://latex.codecogs.com/png.latex?H"> once again. With a little algebra, we find</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AHU_fH%7C0%5Crangle%20=%20%5Cfrac12%5Cleft((-1)%5E%7Bf(0)%7D+(-1)%5E%7Bf(1)%7D%5Cright)%7C0%5Crangle+%5Cfrac12%5Cleft((-1)%5E%7Bf(0)%7D-(-1)%5E%7Bf(1)%7D%5Cright)%7C1%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>This expression may look complicated, but is in fact trivial. For balanced functions only the first term survives, so that the final state is <img src="https://latex.codecogs.com/png.latex?%5Cpm%7C0%5Crangle">, while for unbalanced functions the first term disappears, leaving us with <img src="https://latex.codecogs.com/png.latex?%5Cpm%20%7C1%5Crangle">. Hence, measuring the final state allows us to decide whether the function is balanced or not. And the final state is produced using <em>a single query</em> to the quantum oracle <img src="https://latex.codecogs.com/png.latex?U_f">. Note that the crucial part of the computation is quantum interference, the cancellation between different trajectories. For balanced functions <img src="https://latex.codecogs.com/png.latex?U_f"> is equivalent to the identity, and the amplitude of getting <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> in the end state is vanishing, just as we’ve seen before. The twist is that for the unbalanced functions the situation is opposite.</p>
<p>The Deutsch algorithm solves an artificial problem and has no applications. Hiding some trivial function <img src="https://latex.codecogs.com/png.latex?f"> (after all, there are only four one-bit boolean functions!) behind a magic oracle looks silly. The techniques used still have their point though, but this is best illustrated for a more realistic example, that we now turn to.</p>
</section>
<section id="grovers-algorithm" class="level2">
<h2 class="anchored" data-anchor-id="grovers-algorithm">Grover’s algorithm</h2>
<section id="quantum-search" class="level3">
<h3 class="anchored" data-anchor-id="quantum-search">Quantum search</h3>
<p><em>Grover’s</em> algorithm is one of the oldest, most famous, and simplest to explain quantum algorithms. It is often described as a <em>quantum search</em>.</p>
<p>Suppose there is a problem with many possible solutions, and you know no better way to solve that problem other than try all solutions one by one. An example often given is trying to find a name of a person in a phone book, only knowing the phone number. Mathematically, let <img src="https://latex.codecogs.com/png.latex?f"> be a boolean function of <img src="https://latex.codecogs.com/png.latex?n"> bits <img src="https://latex.codecogs.com/png.latex?f(x_1,%20x_2,%20%5Cdots,%20x_n)">. The goal is to find an assignment of bits that makes <img src="https://latex.codecogs.com/png.latex?f(x_1,%5Cdots)=1">. For simplicity, assume that such an assignment is unique, and call the corresponding solution <img src="https://latex.codecogs.com/png.latex?m=(x_1,%5Cdots,%20x_n)">, for marked state.</p>
<p>In the standard setting of Grover’s algorithm we only have oracular access to <img src="https://latex.codecogs.com/png.latex?f">, i.e.&nbsp;we can provide it with inputs and observe outputs. (We will move beyond oracles, eventually.) In that case, there is nothing better we can do except for trying all of <img src="https://latex.codecogs.com/png.latex?2%5En"> possible bitstrings <img src="https://latex.codecogs.com/png.latex?(x_1,%5Cdots,%20x_n)"> one by one, and see which one works. Let’s denote the total number of bitstrings by <img src="https://latex.codecogs.com/png.latex?N=2%5En">. On average, classical brute-force search takes <img src="https://latex.codecogs.com/png.latex?N/2"> queries to <img src="https://latex.codecogs.com/png.latex?f">.</p>
</section>
<section id="grovers-oracle" class="level3">
<h3 class="anchored" data-anchor-id="grovers-oracle">Grover’s oracle</h3>
<p>Grover’s algorithm allows solving this search problem with only <img src="https://latex.codecogs.com/png.latex?%5Csim%20%5Csqrt%7BN%7D"> queries to the quantum oracle. The quantum oracle <img src="https://latex.codecogs.com/png.latex?U_m"> is defined by</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_m%7Cx%5Crangle%20=%20(-1)%5E%7Bf(x)%7D%20%7Cx%5Crangle%20%20=%20%5Cbegin%7Bcases%7D%20-%7Cm%5Crangle,%5Cquad%20x=m%20%5C%5C%20%7B%5C,%5C,%5C,%5C,%5C,%7D%7Cx%5Crangle,%5Cquad%20else%20%5Cend%7Bcases%7D%20%5C%20,%0A%5Cend%7Balign%7D"></p>
<p>i.e.&nbsp;the oracle reverses the sign of the marked stated <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">, does nothing to the rest.</p>
</section>
<section id="the-initial-state" class="level3">
<h3 class="anchored" data-anchor-id="the-initial-state">The initial state</h3>
<p>In the first step of Grover’s algorithm (and in fact in many others) we prepare a state</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7Cs%5Crangle%20=%20%5Cfrac1%7B%5Csqrt%7BN%7D%7D%5Csum_x%20%7Cx%5Crangle%20%5C%20,%0A%5Cend%7Balign%7D"> which is a superposition of <em>all possible</em> bitstrings with equal amplitudes. For instance, for <img src="https://latex.codecogs.com/png.latex?n=2"> we have <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle%20=%20%5Cfrac12%5Cleft(%7C00%5Crangle+%7C01%5Crangle+%7C10%5Crangle+%7C11%5Crangle%20%5Cright)">. This state may look fancy, but it is easy to prepare. Simply apply <img src="https://latex.codecogs.com/png.latex?H"> gate to all qubits initialized in <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">. For instance, for <img src="https://latex.codecogs.com/png.latex?n=2"> we have <img src="https://latex.codecogs.com/png.latex?H%7C0%5Crangle%20H%7C0%5Crangle%20=%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%7C0%5Crangle+%7C1%5Crangle%5Cright)%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5Cleft(%7C0%5Crangle+%7C1%5Crangle%5Cright)=%5Cfrac12%5Cleft(%7C00%5Crangle+%7C01%5Crangle+%7C10%5Crangle+%7C11%5Crangle%20%5Cright)=%7Cs%5Crangle">. There is a simple probabilistic analog of this state – a state of <img src="https://latex.codecogs.com/png.latex?n"> classical bits with any bitstring configuration being equally likely. And this probabilistic version is equally simple to prepare, just flip <em>every</em> bit randomly.</p>
<p>Grover’s oracle <img src="https://latex.codecogs.com/png.latex?U_m"> has a simple geometric interpretation. Acting on any state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle">, it inverts its component along the marked state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. This is nothing but a reflection with respect to the hyperplane orthogonal to <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. Thus, Grover’s oracle is a reflection in state space.</p>
<p>The final ingredient to Grover’s algorithm is a second reflection, around state <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle">, which we denote by <img src="https://latex.codecogs.com/png.latex?U_s">. I emhphasize that <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle"> is a known state, which is easy to prepare. I will omit the details, but applying the corresponding reflection operator <img src="https://latex.codecogs.com/png.latex?U_s"> is straightforward and efficient.</p>
</section>
<section id="two-dimensional-subspace" class="level3">
<h3 class="anchored" data-anchor-id="two-dimensional-subspace">Two-dimensional subspace</h3>
<p>A neat feature of the Grover algorithm is that although it formally operates in an exponentially large space, the state of a system never escapes a two-dimensional subspace spanned by vectors <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle">. Not that the states <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle"> are not completely orthogonal, as <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle"> contains a small component along <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> with amplitude <img src="https://latex.codecogs.com/png.latex?a_m=%5Cfrac1%7B%5Csqrt%7BN%7D%7D">. It is convenient to define state <img src="https://latex.codecogs.com/png.latex?%7Cs_%5Cperp%5Crangle">, which is equal to <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle"> minus the component along <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">, and normalized to have unit length</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7Cs_%5Cperp%5Crangle%20=%20%5Csqrt%7B%5Cfrac%7BN%7D%7BN-1%7D%7D%5Cleft(%7Cs%5Crangle%20-%20%5Cfrac%7B%7Cm%5Crangle%7D%7B%5Csqrt%7BN%7D%7D%5Cright)%20%5C%20.%0A%5Cend%7Balign%7D"></p>
</section>
<section id="grovers-algorithm-is-a-sequence-of-small-rotations" class="level3">
<h3 class="anchored" data-anchor-id="grovers-algorithm-is-a-sequence-of-small-rotations">Grover’s algorithm is a sequence of small rotations</h3>
<p>So here is how Grover’s algorithm works. Start in state <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle">, and apply two reflections, first <img src="https://latex.codecogs.com/png.latex?U_m">, then <img src="https://latex.codecogs.com/png.latex?U_s">. A combination of two reflections is a rotation, and turns out this is a rotation <em>towards</em> the marked state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. I will omit the proof details (which are straightforward), but point out that angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> of this rotation can be found from equation</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A-U_sU_m%20%7Cm%5Crangle%20%20=%20%5Ccos%20%5Ctheta%20%7Cm%5Crangle%20+%5Csin%20%5Ctheta%20%7Cs_%5Cperp%5Crangle%20%5C%20,%0A%5Cend%7Balign%7D"> i.e.&nbsp;it suffices to apply <img src="https://latex.codecogs.com/png.latex?U_sU_m"> to <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">, and take the component along <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. We get <img src="https://latex.codecogs.com/png.latex?-U_s%20U_m%20%7Cm%5Crangle%20=%20U_s%7Cm%5Crangle%20=%20%7Cm%5Crangle%20-%20%5Cfrac%7B2%7D%7B%5Csqrt%7BN%7D%7D%7Cs%5Crangle">. Projecting this back to <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> we get an amplitude</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Ccos%5Ctheta%20=%201-%5Cfrac%7B2%7D%7BN%7D,%5Cqquad%20%5Ctheta%20%5Capprox%20%5Cfrac%7B2%7D%7B%5Csqrt%7BN%7D%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>That’s it! To reach the marked state <img src="https://latex.codecogs.com/png.latex?%7C%5Crangle">, wee need to make the sequence of these small rotations that combine into a <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Cpi%7D%7B2%7D"> rotation, and the required number of iterations <img src="https://latex.codecogs.com/png.latex?k"> is (roughly)</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Ak%20=%20%5Cfrac%7B%5Cpi%7D%7B2%20%5Ctheta%7D%20=%20%5Cfrac%7B%5Cpi%20%5Csqrt%7BN%7D%7D%7B4%7D%20%5C%20.%0A%5Cend%7Balign%7D"> You see the <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> dependence right there, and this is surely better asymptotically than any classical algorithm can do. (Incidentally, no quantum algorithm can be <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> for unstructured search as well.)</p>
</section>
<section id="infinitesimal-quantum-speedup" class="level3">
<h3 class="anchored" data-anchor-id="infinitesimal-quantum-speedup">Infinitesimal quantum speedup</h3>
<p>Let’s now try to trace the speedup provided by Grover’s algorithm to quantum interference. For this, I’ll look at a single iteration alone, which already provides a kind of quantum speedup.</p>
<p>Here is what I mean. Suppose you are only allowed to call the oracle once. How much does that increases your chances of finding the marked element? Classically, the best thing you can do is to call the oracle on a random input. If it turns out to be the solution, which happends with probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac1N">, you are done. If not, you make a guess at any other of <img src="https://latex.codecogs.com/png.latex?N-1"> remaining bitstrings. The total probability of success is</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Ap%20=%20%5Cfrac1%7BN%7D+%5Cfrac%7BN-1%7D%7BN%7D%5Cfrac1%7BN%7D=%20%5Cfrac%7B2%7D%7BN%7D%0A%5Cend%7Balign%7D"></p>
<p>Making a single Grover iteration allows doing better.</p>
</section>
<section id="quantum-interference" class="level3">
<h3 class="anchored" data-anchor-id="quantum-interference">Quantum interference</h3>
</section>
<section id="moving-beyond-oracles" class="level3">
<h3 class="anchored" data-anchor-id="moving-beyond-oracles">Moving beyond oracles</h3>
<p>States <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7Cs_%5Cperp%5Crangle"> are unknown to us, while <img src="https://latex.codecogs.com/png.latex?%7Cs%5Crangle"> is a known and simple to prepare state. The final Grover’s speed up is modest but rock-solid.</p>
</section>
</section>
</section>
<section id="faq" class="level1">
<h1>FAQ</h1>
<ul>
<li>So, why are quantum computers powerful</li>
<li>Why no electrons</li>
<li>Why no entanglement</li>
<li>What are useful quantum algorithms</li>
<li>Cost of error correction</li>
<li>When quantum computers will be used to train LLM?</li>
<li>Of course, I only argued why one particular way of simulating works for classical probabilistic processes, but does not apply to quantum computations. Rigorously proving that quantum systems can not be simulated by any classical method is beyond our scope [BQP?]</li>
</ul>
</section>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="why-can-quantum-computers-be-powerful" class="level2">
<h2 class="anchored" data-anchor-id="why-can-quantum-computers-be-powerful">Why can quantum computers be powerful?</h2>
<p>So there are quantum computers. At least there will be, we believe. And the reason to build them is an expectation that they will solve some problems intractable for the classical computers. It is a new way to process information, a new way to do computation.</p>
<p>However, it is surprisingly difficult to pinpoint the exact mechanism underlying the capabilities of a quantum computer. Most of the simplistic explanations, referencing some unusual property of quantum systems such as entanglement, superposition etc, are incomplete at best. It is hard to compare classical and quantum head-to-head, because of the very different language used to describe them.</p>
<p>In this post, I will try to make a fair comparison and zoom in on the essential differences. As an experiment, I will try to cover the topic in a way accessible for people outside the field, striving to provide an explanation that is “as simple as possible, but no simpler”. The discussion still won’t be entirely non-technical, though, and use some basic probability and linear algebra.</p>
<p>So, why can’t an arbitrary quantum computation be efficiently simulated classically? And what does that even mean?</p>
</section>
<section id="qubits-and-p-bits" class="level2">
<h2 class="anchored" data-anchor-id="qubits-and-p-bits">Qubits and p-bits</h2>
<p>A classical bit can be either <img src="https://latex.codecogs.com/png.latex?0"> or <img src="https://latex.codecogs.com/png.latex?1">. Similarly, a <em>qubit</em> (quantum bit) can be <img src="https://latex.codecogs.com/png.latex?%5Cbf%7B0%7D"> or <img src="https://latex.codecogs.com/png.latex?%5Cbf%7B1%7D">. But crucially, a qubit can also be in any state of the form <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7Bs%7D=a_0%20%5Cpmb%7B0%7D+a_1%20%5Cpmb%7B1%7D%20%5C%20."></p>
<p>Mathematically, states <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B0%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B1%7D"> are <em>vectors</em>, and (almost) any linear combination of them is a valid state of a qubit. In quantum mechanics a linear combination is called a <em>superposition</em>.</p>
<p>What does it mean for a qubit to be in state <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7Bs%7D">? It means that if you look at it, or <em>make a measurement</em> in quantum-mechanical jargon, you will see <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B0%7D"> with probability <img src="https://latex.codecogs.com/png.latex?p_0=%7Ca_0%7C%5E2"> or <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B1%7D"> with probability <img src="https://latex.codecogs.com/png.latex?p_1=%7Ca_1%7C%5E2">.</p>
<p>From this point of view, a qubit in state <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7Bs%7D"> is indistinguishable from a <em>pbit</em> (probabilistic) bit that is in the state <img src="https://latex.codecogs.com/png.latex?0"> with probability <img src="https://latex.codecogs.com/png.latex?p_0"> and state <img src="https://latex.codecogs.com/png.latex?1"> with probability <img src="https://latex.codecogs.com/png.latex?p_1">.</p>
<p>Comparison between p-bits and qubits is very natural, yet often overlooked. Compare qubits to normal determinisitc bits is more apples vs oranges, because the language used to describe them is so different. P-bits, instead, share many of the properties with qubits, such as an exponentially large state space.</p>
</section>
<section id="quantum-mechanics-is-a-theory-of-amplitudes-1" class="level2">
<h2 class="anchored" data-anchor-id="quantum-mechanics-is-a-theory-of-amplitudes-1">Quantum mechanics is a theory of amplitudes</h2>
<p>What is the difference between a qubit and a p-bit? Numbers <img src="https://latex.codecogs.com/png.latex?a_0,%20a_1"> defining a state <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7Bs%7D"> are called <em>amplitudes</em>. They are similar to probabilities, yet can be <em>negative</em>. They can (and often are) be complex numbers, but the negative values to depart from classical computing.</p>
<p>The fact that some quantity can be negative and it is the reason for quantum magic may sound a bit silly, but this is one of the ways to clearly state how quantum and classical differs. Eventually, it can be interpreted that quantum systems can be in <code>several plcaes at the same time</code> in a qualitatevly different way, compared with probabilistic classical systems.</p>
</section>
<section id="the-hadamard-gate" class="level2">
<h2 class="anchored" data-anchor-id="the-hadamard-gate">The Hadamard gate</h2>
<p>Quantum processes transform quantum states. Importantly, they operate on <em>amplitudes</em>, not on probabilities. Trying to interpret a quantum as something that simply changes an underlying probability distribution does not work.</p>
<p>Here is a quantum operation, known as the Hadamard gate.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cpmb%7B+%7D=H%5Ccirc%20%5Cpmb%7B0%7D%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%5Cleft(%5Cpmb%7B0%7D+%5Cpmb%7B1%7D%5Cright)%20%5C%20,%5C%5C%0A%5Cpmb%7B-%7D=H%5Ccirc%20%5Cpmb%7B1%7D%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%5Cleft(%5Cpmb%7B0%7D-%5Cpmb%7B1%7D%5Cright)%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>In words, it is a linear operation that takes <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B0%7D"> to sum <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B0%7D+%5Cpmb%7B1%7D">, and takes <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B1%7D"> to difference <img src="https://latex.codecogs.com/png.latex?%5Cpmb%7B0%7D-%5Cpmb%7B1%7D">. The factors <img src="https://latex.codecogs.com/png.latex?%5Cfrac1%7B%5Csqrt%7B2%7D%7D"> are needed to ensure that the total probability is 1. If you measure the state <img src="https://latex.codecogs.com/png.latex?%7C+%5Crangle"> you get <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> or <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> with the same probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac12">. The same holds for <img src="https://latex.codecogs.com/png.latex?%7C-%5Crangle">, i.e.&nbsp;states <img src="https://latex.codecogs.com/png.latex?%7C%5Cpm%5Crangle"> are indistinguishable from this point of view.</p>
<p>There is a simple classical analog to the Hadamard transformation – a coin flip, which I will cal <img src="https://latex.codecogs.com/png.latex?C">! Indeed, independent of the initial state, a fair flip of a fair coin will produce a p-bit which is equally likely to be 0 and 1. Can you interpret the Hadamard transform in the same way? No, not really. If you apply the Hadamard transform twice, it will be very different from two coin flips.</p>
<p>Indeed, applying <img src="https://latex.codecogs.com/png.latex?C"> the second time does nothing, and you are still maximally uncertain about the state of your bit. However, applying the Hadamard transform twice gives you back the original state! For instance</p>
<p><img src="https://latex.codecogs.com/png.latex?H%5E2%7C0%5Crangle=H%7C+%5Crangle%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%5Cleft(H%7C0%5Crangle+H%7C1%5Crangle%5Cright)=%5Cfrac%7B1%7D%7B2%7D%5Cleft(%7C0%5Crangle+%7C1%5Crangle+%7C0%5Crangle-%7C1%5Crangle%5Cright)=%20%7C0%5Crangle%20%5C%20."></p>
<p>Similarly, <img src="https://latex.codecogs.com/png.latex?H%5E2%20%7C1%5Crangle=%7C1%5Crangle">.</p>
<p>This does not make sense if you try interpreting <img src="https://latex.codecogs.com/png.latex?H"> in purely probabilistic terms. Classically, if there is a probability to first go from A to B, and then there is a probability to go from B to C, there <em>must</em> be a probability to end up in C having started in A. This is because to get the probability <img src="https://latex.codecogs.com/png.latex?p(A%5Cto%20C)"> you sum intermediate <em>probabilities</em>, which can not be negative, so <img src="https://latex.codecogs.com/png.latex?p(A%5Cto%20C)=p(A%5Cto%20B)p(B%5Cto%20C)+%5Cdots%20%5Cge%20p(A%5Cto%20B)p(B%5Cto%20C)%20%5C%20.%20"></p>
</section>
<section id="but-why-cant-we-simulate-the-amplitudes" class="level2">
<h2 class="anchored" data-anchor-id="but-why-cant-we-simulate-the-amplitudes">But why can’t we simulate the amplitudes</h2>
<p>One often hears that the state space of many qubits is exponentially large, and hence can not be simulated classically. While necessary, this is not sufficient.</p>
<p>A state of <img src="https://latex.codecogs.com/png.latex?n"> qubits is described by <img src="https://latex.codecogs.com/png.latex?2%5En"> (complex) numbers, each being an aplitude of a particular bit configuration. E.g. for three qubits there are 8 amplitudes</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%20=%20a_%7B000%7D%7C000%5Crangle%20+%20a_%7B001%7D%7C001%5Crangle+a_%7B010%7D%7C010%5Crangle+a_%7B011%7D%7C011%5Crangle+a_%7B100%7D%7C100%5Crangle%20+%20a_%7B101%7D%7C101%5Crangle+a_%7B110%7D%7C110%5Crangle+a_%7B111%7D%7C111%5Crangle"></p>
<p>However, the state space of probabilistic classical bits is exponentially large as well. There are <img src="https://latex.codecogs.com/png.latex?2%5En"> possible configurations of <img src="https://latex.codecogs.com/png.latex?n"> classical bits, each having an associated probability. E.g. for three bits we need to specify <img src="https://latex.codecogs.com/png.latex?p_%7B000%7D"> trough <img src="https://latex.codecogs.com/png.latex?p_%7B111%7D"> to specify the probability distribution.</p>
<p>Namely, if you have <img src="https://latex.codecogs.com/png.latex?n"> p-bits, to fully describe the state of the system you need to specify the probability of each configuration, such as <img src="https://latex.codecogs.com/png.latex?p_%7B1010001%5Cdots%7D">, and there are <img src="https://latex.codecogs.com/png.latex?2%5En"> such probabilities (yes, there are only <img src="https://latex.codecogs.com/png.latex?2%5En-1"> independent ones, as the total should be one, but don’t be picky). Yet, we can efficiently simulate probabilistic processes.</p>
<p>By a probabilistic process I mean a series of transformation steps, each of which can have randomness to it. Say at first we randomly flip the first bit. Then we reverse the value of the second bit, but only if first bit is 1. While this is a deterministic operation, it will make the state of the second qubit uncertain, because it is now conditioned on the state of the first randomly flipped bit. And so on. While this does not look like a code in python, it is a valid model of probabilistic computation, which looks similar to gate-based quantum computation.</p>
<p>Compose enough of such simple steps, and the complexity of the resulting probability distribution can be high. I.e. the probabilities of any</p>
<p>This is because we do not need to keep track of the exponential number of trajectories to get from the initial to the final state. We can simply sample individual trajectories. You should think of a probabilistic process as a sequence of probabilistic changes to the state of the system. For example, if step number 100 requires flipping the last bit, it gives rise to two new possibilities (one where the last bit is 0, and another where it is 1). But we can simply choose 0 or 1 for the last bit at random, and ignore the other option. Doing this for all steps making up the probabilistic process, we obtain a final sample. Repeating this procedure many time over, produces samples of the whole process.</p>
<p>This works because the classical probability simply reflects our ignorance about the exact state. But in each realization of a random process there was a single actual state at each moment, and we can simulate its transformation step by step, as described above.</p>
<p>This does <em>not</em> work for quantum processes. Here is an extreme yet practical example. Many quantum algorithms work in such a way, that by the end of the procedure, the bit string corresponding encoding the correct answer has probability close to 1. Running such an algorithm a bunch of times on a real quantum computer will result in the correct answer with very high probability.</p>
<p>We can sample a single trajectory and compute its <em>amplitude</em>, but this does not allow us to sample the from</p>
<p>Let’s be more precise. Say a probabilistic process (or computation) is a sequence of steps <img src="https://latex.codecogs.com/png.latex?S_1,%20S_2,%20%5Cdots%20S_k">. If we can <em>sample</em> from the output of each step <img src="https://latex.codecogs.com/png.latex?S_i"> provided an input state, we can simulate the whole process. For example, say <img src="https://latex.codecogs.com/png.latex?S_i"> consists in randomly flipping the second bit. Then, an initial state <img src="https://latex.codecogs.com/png.latex?s_0s_1s_2%5Cdots"> is transformed to <img src="https://latex.codecogs.com/png.latex?s_0%200%20s_1%5Cdots"> or to <img src="https://latex.codecogs.com/png.latex?s_0%201%20s_1%5Cdots"> with probability one half each.</p>
<p>And say we can do the following, given an input state <img src="https://latex.codecogs.com/png.latex?s_i"> and a</p>
<p>Why? Because we can sample individual trajectories. Say you started with state <img src="https://latex.codecogs.com/png.latex?s_0"></p>
<p>in the end, each realization probabilistic process is a particular sequence of states.</p>
<p>in each realization of the probabilistic process Suppose a probabilistic process consists of a sequence of steps <img src="https://latex.codecogs.com/png.latex?S">, and for each process we know how to compute the probability of going from <img src="https://latex.codecogs.com/png.latex?s_i"> to <img src="https://latex.codecogs.com/png.latex?s_j">.</p>
<p>For instance, the famous Google’s quantum supremacy experiment [cite] is first without the second. There, a quantum processor was used to produce a certain type of random numbers, which is hard to generate with a classical computer (with some reservations), but no practical applications of this random sampling are known.</p>
<p>On the other hand, simply coming up with a quantum algorithm that does solve some useful problem is not sufficient. It may well be that this algorithm <em>can</em> be efficiently simulated classically (or that a different classical algorithm solving the same problem exists).</p>
<div class="callout callout-style-simple callout-note">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>Still, I could not resist supplementing the basic explanation with more technical stuff. Parts, encapsulated like this one, will contain more math and require some quantum background. They can be skipped without breaking the main argument, though.</p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-caution">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>And occasionally there will be something even more hardcore.</p>
</div>
</div>
</div>
</section>
<section id="what-does-this-mean-exactly" class="level2">
<h2 class="anchored" data-anchor-id="what-does-this-mean-exactly">What does this mean, exactly?</h2>
<p>I will only consider algorithms that both take as input and return as output classical data. In principle, quantum computers can take and/or return quantum information (more on that later), but classical computers can’t, so it does not make sense to compare them in this setting.</p>
<p>It is important to stress that quantum computers are not entirely magical. In principle, anything that can be done by a quantum computer can also be done by a classical one. However, it may take prohibitively more time and/or memory.</p>
<p>For instance, any process on a small enough quantum computer can be easily reproduced on a laptop. We call this a <em>simulation</em> (a classical simulation of a quantum computer, to be more precise).</p>
<p>Generically, the amount of classical resources required to simulate a quantum process scales exponentially. So while the classical simulation is always possible in principle, it may not be <em>efficient</em>. It should be stressed, though, that there are many non-trivial types of quantum processes that <em>can</em> be simulated efficiently at scale. More on that later.</p>
<p>To explain why a quantum computer can be more powerful than a classical, can mean addressing two questions.</p>
<ol type="1">
<li>Why does the raw power of the quantum computer grow so fast? In other words, why <em>an arbitrary</em> quantum computation can not be simulated efficiently by a classical machine?</li>
<li>Why some of the things that a quantum computer can do, but a classical can not simulate efficiently, are useful? What problems can be efficiently solved quantumly, but not classically?</li>
</ol>
<p>In this post, I will mostly focus on the first question, i.e.&nbsp;try to explain what sets a generic quantum computation apart from classical. The second question, which is by all means just as important, I will only touch briefly.</p>
</section>
<section id="the-suspects" class="level2">
<h2 class="anchored" data-anchor-id="the-suspects">The suspects</h2>
<p>Alright, what property of quantum mechanics is responsible for the potential power of quantum computation? Shouldn’t it be easy to identify? Does it even make sense to ask this question, as the quantum mechanics is just so weird and spooky and a wave and a particle at the same time? Here are the usual suspects.</p>
<ol type="1">
<li>Huge (exponentially large) dimension of the space where quantum states live.</li>
<li>Quantum parallelism.</li>
<li>Superposition.</li>
<li>Entanglement.</li>
<li>Contextuality.</li>
</ol>
<p>Don’t worry if some concepts are unfamiliar, we will elaborate.</p>
<p>You can probably add more. While all these things are necessary, neither is sufficient alone. And they are also come in a package, so it may not even be consistent to keep some and discard the others. However, If I had to choose, I’d probably say it’s large state space + superposition, but this may be a matter of taste.</p>
</section>
</section>
<section id="what-is-quantum-computing-anyway" class="level1">
<h1>What is quantum computing, anyway?</h1>
<section id="its-not-really-about-the-physics" class="level2">
<h2 class="anchored" data-anchor-id="its-not-really-about-the-physics">It’s not really about the physics</h2>
<p>Well, quantum computing is a way of manipulating information made possible by the laws of quantum mechanics. One way to introduce it is to go through the history of the subject, starting somewhere around Bohr’s atomic model and Einstein’s photoelectric effect and going all the way to Standard Model of particle physics and quantum gravity. While understanding the confusion of the founding fathers is probably an invaluable experience, it is a risky and time-consuming endeavor. In fact, stripped of the historical context and philosophical paradoxes, quantum physics becomes nothing but a generalization of a probability theory. The fact that this mathematical model really underpins the Universe is remarkable, but we need not and will not care much about it’s physical roots.</p>
</section>
<section id="quantum-states" class="level2">
<h2 class="anchored" data-anchor-id="quantum-states">Quantum states</h2>
<p>Ok, let’s start getting technical. Quantum computers manipulate quantum states. What are these? The simplest quantum system, known as a <strong><em>qubit</em></strong> (from <strong><em>qu</em></strong>antum <strong><em>bit</em></strong>), has two basic states <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">. However, it can also be in <strong><em>superposition</em></strong> of these <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle=a%7C0%5Crangle+b%7C1%5Crangle%20%5C%20."> What does is mean for a qubit to be in this state? If you ask the qubit, i.e.&nbsp;make a <strong><em>measurement</em></strong>, it will answer “I’m <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">!” with probability <img src="https://latex.codecogs.com/png.latex?%7Ca%7C%5E2"> and “I’m <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">!”) with probability <img src="https://latex.codecogs.com/png.latex?%7Cb%7C%5E2">. Of course, we need to have <img src="https://latex.codecogs.com/png.latex?%7Ca%7C%5E2+%7Cb%7C%5E2=1">.</p>
<p>In this respect, qubit in state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> is like an unfair coin, which lands heads with probability <img src="https://latex.codecogs.com/png.latex?%7Ca%7C%5E2"> and tails with probability <img src="https://latex.codecogs.com/png.latex?%7Cb%7C%5E2">. Importantly, this probability distribution is not a property of the qubit itself, but</p>
<p>Technically, <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b"> can be complex numbers, but for simplicity you can think they are just the usual real numbers. What is important, is that they can be negative.</p>
<ol type="1">
<li>A lot of confusion about the source of quantum advantage.</li>
<li>Usual suspects
<ol type="1">
<li>Large Hilbert space</li>
<li>Entanglement</li>
<li>Parallelism</li>
<li>Superposition</li>
</ol></li>
<li>Simple but accurate explanation hard to come by.</li>
<li>Many simplistic explanations fail because they apply to probabilistic computing as well
<ol type="1">
<li>Large space dimension for probabilities</li>
<li>No interference</li>
<li>Stochastic matrices can be simulated? Always increase entropy</li>
<li>Quasi-probability distr, Wigner functions</li>
</ol></li>
<li>And then there are classical waves.
<ol type="1">
<li>But no exponential modes</li>
</ol></li>
<li>Entanglement is curios, but not crucial
<ol type="1">
<li>Entanglement ensures exploring Hilbert space</li>
<li>Stabilizer circuits can be simulated</li>
<li>Quantum correlations are not directly related to computational advantage</li>
</ol></li>
<li>Algorithms vs quantum circuits.</li>
<li>Post a bit different, try to give as simple explanation as possible.</li>
<li>Couldn’t do it, but technical parts separated.</li>
<li>Takeaway.
<ul>
<li>Dimension of the Hilbert space+superposition given a polynomial amount of qubits</li>
</ul></li>
<li>The answer not completely satisfactory, the subject is subtle.</li>
<li>Mention quantum games!</li>
</ol>
</section>
</section>
<section id="absurdly-short-intro-to-classical-computing" class="level1">
<h1>Absurdly short intro to classical computing</h1>
<ul>
<li>Classical computers manipulate states of bits</li>
</ul>
</section>
<section id="super-short-intro-to-quantum-computing" class="level1">
<h1>Super short intro to quantum computing</h1>
<ul>
<li>Physics/historical way is not necessary</li>
<li>Quantum physics is a generalization of probability</li>
<li>Quantum states are like probability distributions</li>
<li>Quantum bit – <img src="https://latex.codecogs.com/png.latex?(%5Calpha_0,%20%5Calpha_1)"></li>
<li>Born rule</li>
<li>Space dimension of <img src="https://latex.codecogs.com/png.latex?n"> qubits is <img src="https://latex.codecogs.com/png.latex?2%5En"></li>
<li>Quantum programs manipulate quantum states</li>
<li>Act as unitary matrices</li>
<li>Produce probability distributions</li>
<li>End with a measurement</li>
<li>Quantum circuit is a convenient model</li>
<li>Each gate is a rule for updating amplitudes</li>
</ul>
</section>
<section id="classical-probabilistic-processes" class="level1">
<h1>Classical probabilistic processes</h1>
<ul>
<li>State space is also huge, of the same order</li>
<li></li>
</ul>
</section>
<section id="quantum-speed-up-suspects" class="level1">
<h1>Quantum speed up suspects</h1>
<section id="humongous-hilbert-space" class="level2">
<h2 class="anchored" data-anchor-id="humongous-hilbert-space">Humongous Hilbert space</h2>
<ul>
<li>Necessary, as we could state-vector simulate everything otherwise. Not sufficient. Some things can be simulated anyway. Applies to probabilistic computing as well.</li>
</ul>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>quantum concepts</category>
  <category>paper review</category>
  <guid>https://idnm.github.io/blog/posts/where_quantum_speedups_come_from/index.html</guid>
  <pubDate>Sun, 30 Jun 2024 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/where_quantum_speedups_come_from/what_to_use_qc_for.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Introduction to Quantum Singular Value Transformation</title>
  <link>https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index.html</link>
  <description><![CDATA[ 




<div class="cell" data-tags="[]" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uncomment when in Colab</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#try: </span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  import pyqsp</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#except ImportError:</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  !pip install pyqsp==0.1.6</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.linalg</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb1-15">  </span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyqsp</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyqsp.angle_sequence</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyqsp.response</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyqsp.angle_sequence <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumSignalProcessingPhases</span>
<span id="cb1-21"></span>
<span id="cb1-22"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> contextlib</span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> io</span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quiet(func):</span>
<span id="cb1-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> quiet_func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):    </span>
<span id="cb1-27">        f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> io.StringIO()</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> contextlib.redirect_stdout(f):</span>
<span id="cb1-29">            res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span>
<span id="cb1-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> quiet_func</span>
<span id="cb1-32"></span>
<span id="cb1-33">plt.rcParams[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"figure.figsize"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/quantum_singular_value_transformation_intro/index.ipynb"> <img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/https:/colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"> </a></p>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p><strong><em>Quantum singular value transformation (QSVT)</em></strong> is a modern framework for quantum algorithms encompassing a wide range of applications from quantum search, to Hamiltonian simulation, to machine learning problems, and beyond. If you are willing to be a bit dramatic, QSVT has been claimed to provide a grand unification of quantum algorithms. In this post, I intend to give a comprehensive introduction to the subject.</p>
<p>I don’t think there is too much introductory material available so far, although I stress a great paper by Martyn et al. <span class="citation" data-cites="Martyn2021">&nbsp;[1]</span>. I would actually recommend it as the first read, instead. In many ways, my presentation here is similar and inspired by it. There are some distinctions, though.</p>
<ul>
<li>I use insights from a recent paper by Tang and Kian <span class="citation" data-cites="Tang2023">&nbsp;[2]</span>, which simplify the derivation of QSVT and streamline the construction of polynomial approximations.</li>
<li>The explanations here are interleaved with fully functional code samples.</li>
<li>If nothing else, I frame some things differently, and this may click better.</li>
</ul>
<p>I also recommend a recent blog post by Arrazola <span class="citation" data-cites="ArrazolaQSVT">&nbsp;[3]</span>. It is relatively short, very well explained, and contains code snippets in <code>pennylane</code>. However, it is quite limited in scope.</p>
<p>I will mostly focus on the concepts behind QSVT, but also implement several algorithms explicitly. A comprehensive list of the QSVT applications, as of 2019, can probably be found in <span class="citation" data-cites="Gilyen2019">&nbsp;[4]</span> or <span class="citation" data-cites="GilyenThesis">&nbsp;[5]</span>. I’m not sure if there is an up-to-date account.</p>
<section id="a-high-level-overview" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="a-high-level-overview"><span class="header-section-number">1.1</span> A high-level overview</h2>
<p>So, how does QSVT work? Constructing a quantum algorithm using QSVT consists of the following main steps. Don’t worry if this does not immediately make sense, the goal of this post is to elaborate and give examples.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="QSVT in a nutshell">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
QSVT in a nutshell
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size:17px">
<ol type="1">
<li>Express your problem of interest as applying a function <img src="https://latex.codecogs.com/png.latex?f(x)"> to (the singular values of) a matrix <img src="https://latex.codecogs.com/png.latex?A%5Cto%20f(A)">.</li>
<li>Find a unitary circuit <img src="https://latex.codecogs.com/png.latex?U"> that block encodes your matrix, i.e.&nbsp;in a suitable basis <img src="https://latex.codecogs.com/png.latex?U=%5Cbegin%7Bpmatrix%7DA&amp;*%5C%5C%20*&amp;*%5Cend%7Bpmatrix%7D%20%5C%20."></li>
<li>Find a good enough polynomial approximation to the target function <img src="https://latex.codecogs.com/png.latex?p(x)%5Capprox%20f(x)">.</li>
<li>Using quantum signal processing construct a circuit <img src="https://latex.codecogs.com/png.latex?U_%5Cphi">, that block encodes <img src="https://latex.codecogs.com/png.latex?p(A)">, i.e. <img src="https://latex.codecogs.com/png.latex?U_%5Cphi=%5Cbegin%7Bpmatrix%7Dp(A)&amp;*%5C%5C%20*&amp;*%5Cend%7Bpmatrix%7D%20%5C%20."></li>
</ol>
</div>
</div>
</div>
<p>Let’s begin unpacking this by clarifying the first step, i.e.&nbsp;how to frame your quantum problem as a singular value transformation. Here are three examples.</p>
<ol type="1">
<li><strong>Grover’s search.</strong> There is some marked state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> of <img src="https://latex.codecogs.com/png.latex?n"> qubits that we need to find. In this case, we can take <img src="https://latex.codecogs.com/png.latex?A"> to be <img src="https://latex.codecogs.com/png.latex?1%5Ctimes%201"> matrix containing a single matrix element <img src="https://latex.codecogs.com/png.latex?a=%5Clangle%20m%7CH%5E%7B%5Cotimes%20n%7D%7C0%5Crangle">. If we can apply the sign-function to it <img src="https://latex.codecogs.com/png.latex?x%5Cto%20%5Coperatorname%7Bsign%7D(x)">, we will map an arbitrary amplitude <img src="https://latex.codecogs.com/png.latex?a%3E0"> to 1, and hence build the circuit that is guaranteed to take the initial state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> to the marked state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">.</li>
<li><strong>Quantum simulation.</strong> Here given a Hamiltonian <img src="https://latex.codecogs.com/png.latex?H"> we seek to construct a unitary <img src="https://latex.codecogs.com/png.latex?e%5E%7B-iHt%7D">. Quite literally, this is the problem of applying <img src="https://latex.codecogs.com/png.latex?f(x)=e%5E%7B-ixt%7D"> to the eigenvalues of <img src="https://latex.codecogs.com/png.latex?H">. Up to technicalities, eigenvalues can be transformed in the same way as singular values.</li>
<li><strong>Solving linear equations.</strong> Given a matrix <img src="https://latex.codecogs.com/png.latex?A"> and a vector <img src="https://latex.codecogs.com/png.latex?b"> solve <img src="https://latex.codecogs.com/png.latex?Ax=b"> for <img src="https://latex.codecogs.com/png.latex?x">, i.e.&nbsp;compute <img src="https://latex.codecogs.com/png.latex?A%5E+b">, where <img src="https://latex.codecogs.com/png.latex?A%5E+"> is the Moore-Penrose pseudo-inverse of <img src="https://latex.codecogs.com/png.latex?A">. But pseudo-inverse <img src="https://latex.codecogs.com/png.latex?A%5E+"> is just equal to the usual hermitian conjugate <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger"> with singular values inverted, so here <img src="https://latex.codecogs.com/png.latex?f(x)%5Cpropto%20%5Cfrac1x">.</li>
</ol>
<p>Many other applications of QSVT exist, but in this blog post I will focus on these three. Hopefully step (1) is starting to make sense now. How do we perform step (2) then, how to find the block encoding? To my understanding, this is typically the most challenging part, and has to be addressed case-by-case. I will give some intuition and examples of block encodings below in Sec.&nbsp;4. Next, QSVT allows performing only polynomial transformations, but most problems of practical interest require applying non-polynomial functions. This is why we need step (3), which is finding the right polynomial approximation. Importantly, the degree of the approximating polynomial determines the complexity of the final quantum circuit, so this is an essential step as well. Finally, after you decided on the best approximating polynomial, you can implement it using techniques from the quantum signal processing, which is step (4). This should be straightforward in theory, while in practice there still may be issues with speed and numerical stability for large instances.</p>
</section>
<section id="what-i-will-and-will-not-discuss" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="what-i-will-and-will-not-discuss"><span class="header-section-number">1.2</span> What I will and will not discuss</h2>
<p>Here are some of the topics that will be covered.</p>
<ul>
<li>Basic quantum signal processing.</li>
<li>Basic concepts behind the singular value decomposition.</li>
<li>Basic concepts and examples of block encodings, including the linear combination of unitaries.</li>
<li>Some intuition behind approximating polynomials and expected scaling.</li>
<li>How to construct QSVT circuits and why do they work.</li>
<li>Many code samples, including explicit implementations of several quantum algorithms.</li>
<li>Examples of how to use <code>pyqsp</code> <span class="citation" data-cites="pyqsp">&nbsp;[6]</span> package for signal processing.</li>
</ul>
<p>Here are some of the important omissions.</p>
<ul>
<li>How to find QSP angles from a polynomial.</li>
<li>How exactly to construct an approximating polynomial.</li>
<li>How to do block encoding in general.</li>
<li>Only consider a limited number of examples.</li>
<li>I will not implement algorithms as quantum circuits, but merely as matrix multiplications. This allows to cut some corners, but is less pedagogic.</li>
</ul>
<p>In the end, this turned out to be a behemoth-sized post. Although I tried to break it up into small digestible pieces, do not expect a light read. Also, I tried my best to be pedagogical but also precise in technical detail. I welcome feedback on the presentation and suggestions on possible errors.</p>
<p>Alright, with all disclaimers out of the way, we are ready to begin!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/A_qsvt.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
</section>
<section id="quantum-signal-processing" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Quantum signal processing</h1>
<p>The origins and applications of the <strong><em>quantum signal processing (QSP)</em></strong> are very interesting in their own right, but I won’t review them here. Instead, I will view QSP simply as a precursor to QSVT, or QSVT for two-level systems, and hence a great starting point.</p>
<section id="ingredients" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="ingredients"><span class="header-section-number">2.1</span> Ingredients</h2>
<p>So, suppose you have a two-level system and can perform a simple diagonal transformation on it <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AS(%5Cphi)=%5Cbegin%7Bpmatrix%7De%5E%7Bi%5Cphi%7D&amp;0%20%5C%5C%200&amp;%20e%5E%7B-i%5Cphi%7D%5Cend%7Bpmatrix%7D%20%5C%20.%20%5Clabel%7BS%7D%0A%5Cend%7Balign%7D"> Here <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is an angle you can vary. You can also perform a fixed non-diagonal operation <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AR(a)=%5Cbegin%7Bpmatrix%7Da&amp;%5Csqrt%7B1-a%5E2%7D%5C%5C%5Csqrt%7B1-a%5E2%7D%20&amp;%20-a%5Cend%7Bpmatrix%7D%20%5C%20.%20%5Clabel%7BR%7D%0A%5Cend%7Balign%7D"> Here, <img src="https://latex.codecogs.com/png.latex?a%5Cin%20%5Cmathbb%7BR%7D"> is fixed. Note that <img src="https://latex.codecogs.com/png.latex?R(a=1)"> is a reflection, hence the variable name.</p>
</section>
<section id="circuit" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="circuit"><span class="header-section-number">2.2</span> Circuit</h2>
<p>The most general quantum circuit you can build from these two ingredients is the following alternating sequence</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="QSP circuit">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
QSP circuit
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size:17px">
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_%5Cphi%20=S(%5Cphi_0)%5Cprod_%7Bi=1%7D%5Ed%20R(a)%20S(%5Cphi_i)%20=%20S(%5Cphi_0)R(a)%20S(%5Cphi_1)%20R(a)%5Cdots%20S(%5Cphi_%7Bd-1%7D)%20R(a)%20S(%5Cphi_d)%20%5Clabel%7BQSP%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
</div>
</div>
</div>
<p>Now, if you actually compute <img src="https://latex.codecogs.com/png.latex?U_%5Cphi">, you’ll find it is of the following form (up to a global phase) <img src="https://latex.codecogs.com/png.latex?U_%5Cphi=%20%5Cbegin%7Bpmatrix%7D%20P(a)%20&amp;%20i%20Q(a)%5Csqrt%7B1-a%5E2%7D%20%5C%5C%20i%20Q(a)%5E*%5Csqrt%7B1-a%5E2%7D%20&amp;%20P(a)%5E*%5Cend%7Bpmatrix%7D%20%5C%20.%20"> The key fact here is that both <img src="https://latex.codecogs.com/png.latex?P(a)"> and <img src="https://latex.codecogs.com/png.latex?Q(a)"> are <em>polynomials</em>.</p>
<div class="callout callout-style-default callout-note callout-titled" title="W and R signal conventions">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
W and R signal conventions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>One can choose different signal- and signal-processing operators. Our choice is the <img src="https://latex.codecogs.com/png.latex?R">-convention. It will be most convenient for generalizing to QSVT. Another standard one is <img src="https://latex.codecogs.com/png.latex?W">-convention, where the signal operator is <img src="https://latex.codecogs.com/png.latex?W(a)=%5Cbegin%7Bpmatrix%7Da%20&amp;%20i%5Csqrt%7B1-a%5E2%7D%5C%5Ci%5Csqrt%7B1-a%5E2%7D%20&amp;%20a%5Cend%7Bpmatrix%7D%20%5C%20."> The two signal operators are related by <img src="https://latex.codecogs.com/png.latex?R(a)=-i%20S(%5Cpi/4)%20W(a)%20S(%5Cpi/4)">. For <img src="https://latex.codecogs.com/png.latex?W">-signal operator relation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BQSP%7D"> is exact, while for <img src="https://latex.codecogs.com/png.latex?R(a)"> there is an additional global phase <img src="https://latex.codecogs.com/png.latex?i%5Ed">. If we have an angle sequence <img src="https://latex.codecogs.com/png.latex?%5Cphi_i%5EW"> implementing the desired polynomial transformation with <img src="https://latex.codecogs.com/png.latex?W">-signal, the angles for <img src="https://latex.codecogs.com/png.latex?R">-signal are <img src="https://latex.codecogs.com/png.latex?%5Cphi_0%5ER=%5Cphi_0%5EW+(2d-1)%5Cfrac%7B%5Cpi%7D%7B4%7D,%20%5Cquad%20%5Cphi_d%5ER=%5Cphi_d%5EW-%5Cfrac%7B%5Cpi%7D%7B4%7D,%20%5Cquad%20%5Cphi_i%5ER=%5Cphi_i%5EW-%5Cfrac%7B%5Cpi%7D%7B2%7D%20(0%20%3C%20i%3C%20d)%5C,%5C,%20%5C%20."></p>
</div>
</div>
</div>
</section>
<section id="polynomials-from-qsp" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="polynomials-from-qsp"><span class="header-section-number">2.3</span> Polynomials from QSP</h2>
<p>Why are <img src="https://latex.codecogs.com/png.latex?P(a)"> and <img src="https://latex.codecogs.com/png.latex?Q(a)"> polynomials? Well, you can check this directly/prove by induction. For instance, <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D%20P(a)%20&amp;%20i%20Q(a)%5Csqrt%7B1-a%5E2%7D%20%5C%5C%20i%20Q(a)%5E*%5Csqrt%7B1-a%5E2%7D%20&amp;%20P(a)%5E*%5Cend%7Bpmatrix%7D%20%5Cbegin%7Bpmatrix%7D%20a%20&amp;%20i%20%5Csqrt%7B1-a%5E2%7D%20%5C%5C%20i%5Csqrt%7B1-a%5E2%7D%20&amp;%20a%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7D%20P'(a)%20&amp;%20i%20Q'(a)%5Csqrt%7B1-a%5E2%7D%20%5C%5C%20i%20Q'(a)%5E*%5Csqrt%7B1-a%5E2%7D%20&amp;%20P'(a)%5E*%5Cend%7Bpmatrix%7D"> with (primes are not derivatives!) <img src="https://latex.codecogs.com/png.latex?P'(a)=aP(a)-Q(a)(1-a%5E2),%5Cqquad%20Q'(a)=P(a)+aQ(a)%20%5C%20."></p>
<p>The polynomials <img src="https://latex.codecogs.com/png.latex?P,Q"> obtained in this way are not arbitrary. They always satisfy the following three properties.</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdeg%7D(P)%5Cle%20d">, <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdeg%7D(Q)%5Cle%20d-1">. In words, the degree of <img src="https://latex.codecogs.com/png.latex?P"> is no more than the number of times <img src="https://latex.codecogs.com/png.latex?R(a)"> is applied, and degree of <img src="https://latex.codecogs.com/png.latex?Q"> is one less.</li>
<li><img src="https://latex.codecogs.com/png.latex?P(-a)=(-1)%5E%7Bd+1%7D%20P(a),%20Q(-a)=(-1)%5E%7Bd%7D%20Q(a)">. In words, both <img src="https://latex.codecogs.com/png.latex?P"> and <img src="https://latex.codecogs.com/png.latex?Q"> have definite and opposite parity. For <img src="https://latex.codecogs.com/png.latex?d"> even <img src="https://latex.codecogs.com/png.latex?P"> is odd and <img src="https://latex.codecogs.com/png.latex?Q"> is even, for <img src="https://latex.codecogs.com/png.latex?d"> odd <img src="https://latex.codecogs.com/png.latex?P"> is even and <img src="https://latex.codecogs.com/png.latex?Q"> is odd.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7CP(a)%7C+(1-a%5E2)%7CQ(a)%7C%5E2=1">. This follows from <img src="https://latex.codecogs.com/png.latex?U_%5Cphi"> being a unitary. In particular, this implies that <img src="https://latex.codecogs.com/png.latex?P(a)"> is bounded <img src="https://latex.codecogs.com/png.latex?%7CP(a)%7C%5Cle%201"> for <img src="https://latex.codecogs.com/png.latex?-1%5Cle%20a%5Cle%201">.</li>
</ol>
<p>An important fact of QSP is that the reverse statement is also true - as long as a degree <img src="https://latex.codecogs.com/png.latex?d"> polynomial <img src="https://latex.codecogs.com/png.latex?P"> satisfies these conditions, there are <img src="https://latex.codecogs.com/png.latex?d+1"> angles <img src="https://latex.codecogs.com/png.latex?%5Cphi_i"> that produce <img src="https://latex.codecogs.com/png.latex?P"> via the QSP <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BQSP%7D">. While the proof is not trivial, the statement looks reasonable. Indeed, a complex polynomial <img src="https://latex.codecogs.com/png.latex?P"> of degree <img src="https://latex.codecogs.com/png.latex?d"> and definite parity has about <img src="https://latex.codecogs.com/png.latex?d"> independent real coefficients, and this is exactly the number of angles we can tweak in the QSP. Since dimensions of the parameter spaces agree, it is plausible that they can map both ways.</p>
</section>
<section id="sec-general_poly" class="level2" data-number="2.4">
<h2 data-number="2.4" class="anchored" data-anchor-id="sec-general_poly"><span class="header-section-number">2.4</span> Generalizing QSP polynomials</h2>
<p>While many polynomials <img src="https://latex.codecogs.com/png.latex?P"> can be obtained in this way, there are important limitations. In particular, by property (3) <img src="https://latex.codecogs.com/png.latex?%7CP(1)%7C=1">, which is often undesirable (say, you need to approximate <img src="https://latex.codecogs.com/png.latex?f(x)"> such that <img src="https://latex.codecogs.com/png.latex?f(1)%5Cneq1">). The trick is to look at the real part <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BRe%7D%20P(a)">. While still bounded, it does not have to satisfy <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BRe%7D%20P(1)=1"> and is general enough for many applications. Then the problem is how to access <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BRe%7DP">. One way is to measure the QSP operator in <img src="https://latex.codecogs.com/png.latex?%7C%5Cpm%5Crangle"> basis. Indeed, you can check that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clangle%20+%7CU_%5Cphi%7C+%5Crangle=%5Coperatorname%7BRe%7DP(a)+i%5Coperatorname%7BRe%7DQ(a)%5Csqrt%7B1-a%5E2%7D%20%5C%20.%0A"></p>
<p>A QSP sequence can be found so that <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BRe%7DP(a)"> gives the desired polynomial, while <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7BRe%7DQ(a)"> is approximately zero.</p>
<p>Another way to single out the real part of <img src="https://latex.codecogs.com/png.latex?P(a)"> is by introducing an auxiliary qubit and applying the following circuit</p>
<div id="fig-uphi" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/uphiuminusphi.svg" class="img-fluid figure-img" width="400"></p>
<p></p><figcaption class="figure-caption">Fig.&nbsp;1: Block encoding real polynomial</figcaption><p></p>
</figure>
</div>
<p>This trick more readily generalizes to QSVT. In effect, this circuit performs a block encoding of <img src="https://latex.codecogs.com/png.latex?%5Cfrac12%5Cleft(U_%5Cphi+U_%7B-%5Cphi%7D%5Cright)">. Since <img src="https://latex.codecogs.com/png.latex?U_%7B-%5Cphi%7D=U_%7B%5Cphi%7D%5E*">, it block encodes <img src="https://latex.codecogs.com/png.latex?%5Cfrac12%5Cleft(P(a)+P(a)%5E*%5Cright)=%5Coperatorname%7BRe%7DP(a)">. If the circuit above is not clear, don’t worry, I will discuss block encodings in Sec.&nbsp;4. The same trick can be repeated (using one more ancilla qubit) to combine even and odd polynomials into a general one. In effect</p>
<div class="callout callout-style-simple callout-note no-icon">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-body-container">
<div style="font-size:17px">
<p>Combining several QSP circuits, we can block encode any real polynomial <img src="https://latex.codecogs.com/png.latex?P(x)"> satisfying <img src="https://latex.codecogs.com/png.latex?%7CP(x)%7C%5Cle1"> for <img src="https://latex.codecogs.com/png.latex?x%5Cin%20%5B-1,1%5D">. The number of signal operators required is proportional to <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdeg%7DP(x)">.</p>
</div>
</div>
</div>
</div>
<p>This will be sufficient for our QSVT applications.</p>
</section>
<section id="implementation" class="level2" data-number="2.5">
<h2 data-number="2.5" class="anchored" data-anchor-id="implementation"><span class="header-section-number">2.5</span> Implementation</h2>
<p>Let’s now implement the QSP and see how it works in practice. First we define the <img src="https://latex.codecogs.com/png.latex?R">-signal and signal-processing operators. To get QSP sequences we will use <code>pyqsp</code> python package <span class="citation" data-cites="pyqsp">&nbsp;[6]</span>. Since it gives anges in the <img src="https://latex.codecogs.com/png.latex?W">-convention, we will also need to convert them to our <img src="https://latex.codecogs.com/png.latex?R">-convention. Finally, we define a function that assembles the QSP circuit.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> R(a):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Singnal operator in the R-convention."""</span></span>
<span id="cb2-3">    </span>
<span id="cb2-4">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-5">    R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([</span>
<span id="cb2-6">        [a, b],</span>
<span id="cb2-7">        [b, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a]])</span>
<span id="cb2-8"></span>
<span id="cb2-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> R</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> S(phi):</span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Diagonal signal-processing operator."""</span></span>
<span id="cb2-13">    </span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.diag([np.exp(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>phi), np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>phi)])</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> angles_from_W_to_R(phis):</span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Converts QSP angles from W-convention to R-convention."""</span></span>
<span id="cb2-18">    </span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(phis)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'At least one angle must be provided.'</span></span>
<span id="cb2-20">    </span>
<span id="cb2-21">    phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-22">    [phis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(phis)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> phi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> phis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-24">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [phis[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb2-25">    </span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> phis </span>
<span id="cb2-27"></span>
<span id="cb2-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_QSP(R, phis):</span>
<span id="cb2-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Computes S(phi_0) @ R @ S(phi_1) @ R ... @ S(phi_d-1) @ R @ S(phi_d). """</span></span>
<span id="cb2-30">        </span>
<span id="cb2-31">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S(phis[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> phi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> phis[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:        </span>
<span id="cb2-33">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S(phi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> R <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> res</span>
<span id="cb2-34">    </span>
<span id="cb2-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
<p>Now let’s take some arbitrary polynomial <img src="https://latex.codecogs.com/png.latex?P">, determine the QSP angles <img src="https://latex.codecogs.com/png.latex?P%5Cto%20%5Cphi">, and check that the real part of the QSP amplitude <img src="https://latex.codecogs.com/png.latex?U_%5Cphi%5B0,0%5D"> reproduces the chosen polynomial.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note that the polynomial must have definite parity and be bounded.</span></span>
<span id="cb3-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polynomial.Polynomial([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>]) </span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># QSP angles from polynomial coefficients.</span></span>
<span id="cb3-5">phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.angle_sequence.QuantumSignalProcessingPhases(p.coef, signal_operator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wx'</span>)</span>
<span id="cb3-6">phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles_from_W_to_R(phis)</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Range to scan over.</span></span>
<span id="cb3-9">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute matrix elements of the QSP sequence</span></span>
<span id="cb3-12">unitaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [apply_QSP(R(xi), phis) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x]</span>
<span id="cb3-13">matrix_elements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [np.real(u[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> unitaries]</span>
<span id="cb3-14"></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare</span></span>
<span id="cb3-16">plt.plot(x, p(x))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-17">plt.plot(x, matrix_elements, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb3-18">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Your polynomial implemented by QSP'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>If you are running this as an interactive notebook, try changing the polynomial and see what happens. This exercise ends our introduction to QSP.</p>
<p>You may think of QSVT as a generalization of QSP, where instead of applying a polynomial transformation to a single matrix element, you apply it to the singular values of a block encoded matrix. Before explaining how exactly does that work, we should cover some technical background.</p>
</section>
</section>
<section id="singular-value-decomposition" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Singular value decomposition</h1>
<section id="what-is-it" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="what-is-it"><span class="header-section-number">3.1</span> What is it?</h2>
<p>Probably it’s worth making a brief digression to discuss what are those singular values that we are going to transform. If, like me, you are more familiar with hermitian matrices and eigenvalues, think of the singular values as a generalization.</p>
<p>So, the key theorem known as the singular value decomposition (SVD), says that <em>any</em> (and I mean <em>any</em>: real or complex, hermitian or non-hermitian, square or rectangular) matrix <img src="https://latex.codecogs.com/png.latex?A"> can be decomposed as follows <img src="https://latex.codecogs.com/png.latex?A=V%5CSigma%20W%5E%5Cdagger%20%5C%20."></p>
<p>If <img src="https://latex.codecogs.com/png.latex?A"> is <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m"> matrix, then <img src="https://latex.codecogs.com/png.latex?V"> is a unitary of dimension <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n">, <img src="https://latex.codecogs.com/png.latex?W"> is a unitary of dimension <img src="https://latex.codecogs.com/png.latex?m%5Ctimes%20m">, and <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is something like a diagonal matrix, except it has dimension <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20m"> and can be non-square. The ‘extra’ non-square part consists of zeros. If you remove it, <img src="https://latex.codecogs.com/png.latex?%5CSigma"> is just a diagonal matrix with <em>positive</em> entries <img src="https://latex.codecogs.com/png.latex?%5Csigma_i">. Another way of writing SVD is using the bra-ket notation <img src="https://latex.codecogs.com/png.latex?A=%5Csum_i%20%5Csigma_i%7Cv_i%5Crangle%20%5Clangle%20w_i%7C%20%5C%20."></p>
</section>
<section id="relation-to-eigenvalues" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="relation-to-eigenvalues"><span class="header-section-number">3.2</span> Relation to eigenvalues</h2>
<p>For Hermitian matrices the eigenvalue decomposition is almost the same as SVD with <img src="https://latex.codecogs.com/png.latex?V=W">. A subtlety is that by definition <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%5Cge0"> while the eigenvalues can be negative. Negative signs of the eigenvalues can be absorbed into <img src="https://latex.codecogs.com/png.latex?V"> or <img src="https://latex.codecogs.com/png.latex?W">, but this will make them different.</p>
<p>Also, you can show that non-zero eigenvalues of hermitian operators <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger%20A"> and <img src="https://latex.codecogs.com/png.latex?AA%5E%5Cdagger"> are equal to <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%5E2">.</p>
</section>
<section id="sec-operator_norm" class="level2" data-number="3.3">
<h2 data-number="3.3" class="anchored" data-anchor-id="sec-operator_norm"><span class="header-section-number">3.3</span> Relation to operator norm</h2>
<p>SVD has many applications, and I’ll mention two of them that will be relevant. Define the operator norm of <img src="https://latex.codecogs.com/png.latex?A"> by <img src="https://latex.codecogs.com/png.latex?%7C%7CA%7C%7C=%5Csup_v%20%5Cfrac%7B%7CAv%7C%7D%7B%7Cv%7C%7D%20%5C%20.%20"></p>
<p>In words, the linear transformation <img src="https://latex.codecogs.com/png.latex?A"> in general changes the length of the input vector <img src="https://latex.codecogs.com/png.latex?v">, and the operator norm quantifies the largest such change. It is easy to see that <img src="https://latex.codecogs.com/png.latex?%7C%7CA%7C%7C=%5Cmax_i%20%5Csigma_i">, i.e.&nbsp;that operator norm is equal to the largest singular value.</p>
<p>Operator norm is a natural measure in quantum mechanics, and in particular in QSVT. Assume we aimed to implement some operator <img src="https://latex.codecogs.com/png.latex?A_0"> but only managed to implement <img src="https://latex.codecogs.com/png.latex?A">. For an arbitrary state, we can write <img src="https://latex.codecogs.com/png.latex?A%7C%5Cpsi%5Crangle=A_0%7C%5Cpsi%5Crangle+(A-A_0)%7C%5Cpsi%5Crangle">. The error term can be bounded as <img src="https://latex.codecogs.com/png.latex?%7C(A-A_0)%7C%5Cpsi%5Crangle%7C%5Cle%20%7C%7CA-A_0%7C%7C">. Hence, if <img src="https://latex.codecogs.com/png.latex?A"> is close to <img src="https://latex.codecogs.com/png.latex?A_0"> in the operator norm, its action on any state will have a large overlap with the target state. In quantum mechanics, this means that for all practical purposes <img src="https://latex.codecogs.com/png.latex?A"> is a good approximation to <img src="https://latex.codecogs.com/png.latex?A_0">.</p>
</section>
<section id="sec-pseudo_inverse" class="level2" data-number="3.4">
<h2 data-number="3.4" class="anchored" data-anchor-id="sec-pseudo_inverse"><span class="header-section-number">3.4</span> Moore-Penrose pseudo-inverse</h2>
<p>Another application of SVD is to linear systems of equations <img src="https://latex.codecogs.com/png.latex?Ax=b">. Depending on <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?b">, the system may have a single solution, many solutions or none at all. A related problem is to minimize <img src="https://latex.codecogs.com/png.latex?%7CAx-b%7C%5E2">, a problem which always has a solution. It can be written as <img src="https://latex.codecogs.com/png.latex?x=A%5E+b"> with <img src="https://latex.codecogs.com/png.latex?A%5E+"> being the Moore-Penrose pseudo-inverse. It is most easily defined in terms of the SVD <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AA%5E+=%5Csum_%7B%5Csigma_i%5Cneq0%7D%5Csigma_i%5E%7B-1%7D%20%7Cw_i%5Crangle%20%5Clangle%20v_i%7C%20%5C%20.%20%5Clabel%7Bpseudo-inverse%7D%0A%5Cend%7Balign%7D"> For invertible matrices, <img src="https://latex.codecogs.com/png.latex?A%5E+"> coincides with the usual inverse <img src="https://latex.codecogs.com/png.latex?A%5E%7B-1%7D">. For non-invertible ones, this is in a sense the closest you can get. Note that <img src="https://latex.codecogs.com/png.latex?A%5E+"> is equal to <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger"> with singular values inverted.</p>
</section>
<section id="sec-matrix_poly" class="level2" data-number="3.5">
<h2 data-number="3.5" class="anchored" data-anchor-id="sec-matrix_poly"><span class="header-section-number">3.5</span> How to define polynomial of an arbitrary matrix</h2>
<p>It is straightforward to define a polynomial of a hermitian matrix, e.g.&nbsp;for <img src="https://latex.codecogs.com/png.latex?p(x)=x-x%5E2+x%5E4"> we set <img src="https://latex.codecogs.com/png.latex?p(H)=H-H%5E2+H%5E4">. Alternatively, we can say that the polynomial applies to eigenvalues of <img src="https://latex.codecogs.com/png.latex?H">, i.e.&nbsp;if <img src="https://latex.codecogs.com/png.latex?H=%5Csum_i%20%5Clambda_i%20%7Cv_i%5Crangle%5Clangle%20v_i%7C"> then <img src="https://latex.codecogs.com/png.latex?p(H)=%5Csum_i%20p(%5Clambda_i)%20%7Cv_i%5Crangle%5Clangle%20v_i%7C">.</p>
<p>For a general matrix <img src="https://latex.codecogs.com/png.latex?A"> expressions like <img src="https://latex.codecogs.com/png.latex?A%5E2"> may not make sense, because of incompatible dimensions. More abstractly, for a generic operator <img src="https://latex.codecogs.com/png.latex?A"> the input space need not be the same as the output space, so applying <img src="https://latex.codecogs.com/png.latex?A"> twice is simply not defined. In principle, we could still define <img src="https://latex.codecogs.com/png.latex?p(A)"> by applying <img src="https://latex.codecogs.com/png.latex?p"> to the singular values of <img src="https://latex.codecogs.com/png.latex?A">, similarly to the hermitian case. The more natural and useful definition is a bit different.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Polynomial of a general matrix">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Polynomial of a general matrix
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size:17px">
<p>For <img src="https://latex.codecogs.com/png.latex?A=%5Csum_i%20%5Csigma_i%7Cv_i%5Crangle%5Clangle%20w_i%7C"> define <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Ap(A)=%5Cbegin%7Bcases%7D%20%5Csum_i%20p(%5Csigma_i)%7Cv_i%5Crangle%20%5Clangle%20w_i%7C,%5Cqquad%20%5Ctext%7B$p$%20is%20odd%7D%5C%5C%20%5Csum_i%20p(%5Csigma_i)%7Cw_i%5Crangle%20%5Clangle%20w_i%7C,%5Cqquad%20%5Ctext%7B$p$%20is%20even%7D%20%5Cend%7Bcases%7D%0A%5Cend%7Balign%7D"></p>
</div>
</div>
</div>
<p>For example, for <img src="https://latex.codecogs.com/png.latex?p(x)=1-x%5E2+x%5E4"> we get <img src="https://latex.codecogs.com/png.latex?p(A)=%5Cmathbb%7B1%7D-A%5E%5Cdagger%20A+(A%5E%5Cdagger%20A)%5E2">, for <img src="https://latex.codecogs.com/png.latex?p(x)=x-x%5E3"> we get <img src="https://latex.codecogs.com/png.latex?p(A)=A-AA%5E%5Cdagger%20A">. The pattern should be clear. By alternating <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger"> we make sure that the input space of a new operator is the output space of a preceding one. If the <img src="https://latex.codecogs.com/png.latex?p(x)"> is odd, <img src="https://latex.codecogs.com/png.latex?p(A)"> maps between the same space as <img src="https://latex.codecogs.com/png.latex?A">. If <img src="https://latex.codecogs.com/png.latex?p(x)"> is even, <img src="https://latex.codecogs.com/png.latex?p(A)"> maps the input space of <img src="https://latex.codecogs.com/png.latex?A"> back to itself.</p>
<p>We will see that this distinction between the even and odd polynomials spills over into QSVT.</p>
</section>
</section>
<section id="sec-block" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Block encodings</h1>
<p>Another key concept to QSVT is that of block encodings. The idea is as follows. Quantum computer can only effect unitary transformations <img src="https://latex.codecogs.com/png.latex?U">. However, many interesting operators are not unitary (say a typical Hamiltonian, or a matrix of a linear system). However, they can often be represented as a subpart of a larger unitary operation, or block encoded.</p>
<section id="block-encoding-in-the-computational-basis" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="block-encoding-in-the-computational-basis"><span class="header-section-number">4.1</span> Block encoding in the computational basis</h2>
<p>The simplest case of the block encoding is when your matrix of interest <img src="https://latex.codecogs.com/png.latex?A"> occupies the top-left corner of a unitary</p>
<p><img src="https://latex.codecogs.com/png.latex?U=%5Cbegin%7Bpmatrix%7DA&amp;%20*%5C%5C%20*%20&amp;%20*%5Cend%7Bpmatrix%7D%20%5C%20."></p>
<p>Here and below, the wildcard asterisk <img src="https://latex.codecogs.com/png.latex?*"> means that we don’t care what is contained in other blocks as long as <img src="https://latex.codecogs.com/png.latex?U"> is unitary. <img src="https://latex.codecogs.com/png.latex?A"> and <img src="https://latex.codecogs.com/png.latex?*"> blocks can be of any size compatible with one another. <img src="https://latex.codecogs.com/png.latex?U"> must be square, of course. That’s it, that’s block encoding.</p>
<p>The tricky part is to actually find an efficient quantum circuit corresponding to <img src="https://latex.codecogs.com/png.latex?U">. In general, this is very problem-specific. I will mostly assume that block encodings are given from above (we have an oracular access to them). I will however discuss block encoding of a linear combination of unitaries in Sec.&nbsp;4.5.</p>
</section>
<section id="can-any-matrix-be-block-encoded" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="can-any-matrix-be-block-encoded"><span class="header-section-number">4.2</span> Can any matrix be block encoded?</h2>
<p>The block encoded matrix <img src="https://latex.codecogs.com/png.latex?A"> can be almost arbitrary. The only restriction is that its operator norm is less than one <img src="https://latex.codecogs.com/png.latex?%7C%7CA%7C%7C%5Cle1"> (otherwise <img src="https://latex.codecogs.com/png.latex?U"> can not be unitary). If this is not the case, we can often encode <img src="https://latex.codecogs.com/png.latex?A/%5Calpha"> with sufficiently large <img src="https://latex.codecogs.com/png.latex?%5Calpha"> instead. Again, this is problem-specific.</p>
</section>
<section id="single-qubit-block-encoding" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="single-qubit-block-encoding"><span class="header-section-number">4.3</span> Single-qubit block encoding</h2>
<p>Often, the operator <img src="https://latex.codecogs.com/png.latex?A"> to be block encoded naturally acts on some <img src="https://latex.codecogs.com/png.latex?n">-qubit system, perhaps <img src="https://latex.codecogs.com/png.latex?A"> is a Hamiltonian. In that case, assuming <img src="https://latex.codecogs.com/png.latex?%7C%7CA%7C%7C%5Cle%201">, we only need one additional qubit to block-encode <img src="https://latex.codecogs.com/png.latex?A">. The result may look something like</p>
<p><img src="https://latex.codecogs.com/png.latex?U=%5Cbegin%7Bpmatrix%7D%20A%20&amp;%20%5Csqrt%7B1-AA%5E%5Cdagger%7D%20%5C%5C%20%5Csqrt%7B1-A%5E%5Cdagger%20A%7D%20&amp;%20-A%5E%5Cdagger%20%5Cend%7Bpmatrix%7D%5C%20."></p>
<div class="callout callout-style-default callout-note callout-titled" title="Exercise">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Show that <img src="https://latex.codecogs.com/png.latex?U"> is unitary. You will need to show that <img src="https://latex.codecogs.com/png.latex?A%5Csqrt%7B1-A%5E%5Cdagger%20A%7D=%5Csqrt%7B1-AA%5E%5Cdagger%7DA"> which can be done via SVD.</p>
</div>
</div>
</div>
<p>We can express the fact that <img src="https://latex.codecogs.com/png.latex?U"> block encodes <img src="https://latex.codecogs.com/png.latex?A"> by writing <img src="https://latex.codecogs.com/png.latex?U=%7C0%5Crangle%5Clangle0%7C%5Cotimes%20A+%5Cdots">.</p>
</section>
<section id="controlled-unitary-is-a-block-encoding" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="controlled-unitary-is-a-block-encoding"><span class="header-section-number">4.4</span> Controlled unitary is a block encoding</h2>
<p>For intuition, I will give two examples of how to implement block encodings. One familiar case is a controlled unitary operation. Indeed, <img src="https://latex.codecogs.com/png.latex?C(U)=%7C0%5Crangle%20%5Clangle%200%7C%20%5Cotimes%20U+%7C1%5Crangle%20%5Clangle%201%7C%20%5Cotimes%20U=%5Cbegin%7Bpmatrix%7D%20U%20&amp;%200%20%5C%5C%200%20&amp;%20%5Cmathbb%7B1%7D%5Cend%7Bpmatrix%7D%20%5C%20."> Note that this is <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">-controlled unitary, the standard <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">-controlled has <img src="https://latex.codecogs.com/png.latex?U"> and the identity blocks swapped.</p>
<p>More generally, let <img src="https://latex.codecogs.com/png.latex?U"> be controlled by a computational <img src="https://latex.codecogs.com/png.latex?n">-qubit state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?C_%7B%7Cm%5Crangle%5Clangle%20m%7C%7DU=%7Cm%5Crangle%5Clangle%20m%7C%20%5Cotimes%20U+(%5Cmathbb%7B1%7D-%7Cm%5Crangle%5Clangle%20m%7C)%5Cotimes%5Cmathbb%7B1%7D">. Then, in matrix form</p>
<p><img src="https://latex.codecogs.com/png.latex?C_%7B%7Cm%5Crangle%5Clangle%20m%7C%7DU=%5Cbegin%7Bpmatrix%7D%5Cmathbb%7B1%7D%20&amp;&amp;&amp;&amp;%5C%5C%20&amp;%5Cddots&amp;&amp;&amp;%20%5C%5C%20&amp;&amp;%20U%20&amp;&amp;%20%5C%5C%20&amp;&amp;&amp;%5Cddots&amp;%20%5C%5C%20&amp;&amp;&amp;&amp;%5Cmathbb%7B1%7D%5Cend%7Bpmatrix%7D%20%5C%20,"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?U"> occupies <img src="https://latex.codecogs.com/png.latex?m">-th block.</p>
</section>
<section id="sec-LCU" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="sec-LCU"><span class="header-section-number">4.5</span> Linear combination of unitaries</h2>
<p><strong><em>Linear combination of unitaries (LCU)</em></strong> is a powerful technique for block encoding. Using controlled versions of unitary operators <img src="https://latex.codecogs.com/png.latex?U_1,%5Cdots,%20U_N"> it block encodes their linear combination <img src="https://latex.codecogs.com/png.latex?%5Calpha_1%20U_1+%5Cdots%5Calpha_N%20U_N"></p>
<p>It works as follows. Assume <img src="https://latex.codecogs.com/png.latex?N=2%5En"> and you can implement unitaries <img src="https://latex.codecogs.com/png.latex?U_m"> controlled by a state of <img src="https://latex.codecogs.com/png.latex?n"> qubits, <img src="https://latex.codecogs.com/png.latex?C_%7B%7Cm%5Crangle%5Clangle%20m%7C%7DU_m">. Taking the product of all these controlled unitaries we get what is known as the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSELECT%7D"> operator</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSELECT%7D%20=%20%5Cprod_m%20C_%7B%7Cm%5Crangle%5Clangle%20m%7C%7DU_m%20=%20%5Cbegin%7Bpmatrix%7DU_1%20&amp;&amp;&amp;&amp;%5C%5C%20&amp;%5Cddots&amp;&amp;&amp;%20%5C%5C%20&amp;&amp;%20U_m%20&amp;&amp;%20%5C%5C%20&amp;&amp;&amp;%5Cddots&amp;%20%5C%5C%20&amp;&amp;&amp;&amp;U_%7B2%5En%7D%5Cend%7Bpmatrix%7D"></p>
<p>In other words, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSELECT%7D%20=%20%5Csum_m%20%7Cm%5Crangle%5Clangle%20m%7C%20%5Cotimes%20U_m">, and it applies (selects) a different unitary based on the value of the control state. Now also assume you have a <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPREPARE%7D"> operator acting on the control qubits as follows <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPREPARE%7D%20%7C0%5Crangle=%5Csum_m%20%5Csqrt%7B%5Calpha_m%7D%20%7Cm%5Crangle"> (assuming <img src="https://latex.codecogs.com/png.latex?%5Csum_i%5Calpha_i=1">). Then</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctext%7BPREPARE%7D%5E%5Cdagger%5Ccdot%5Ctext%7BSELECT%7D%5Ccdot%5Ctext%7BPREPARE%7D%20=%20%5Cbegin%7Bpmatrix%7D%5Calpha_1%20U_1+%5Cdots%20%5Calpha_NU_N&amp;%20*%5C%5C%20*&amp;*%20%5Cend%7Bpmatrix%7D"></p>
<p>i.e.&nbsp;it block encodes the desired linear combination.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Exercise">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Prove this statement. Show also that Fig.&nbsp;1 is a particular case, and that it indeed block encodes <img src="https://latex.codecogs.com/png.latex?%5Cfrac12%5Cleft(U_%7B%5Cphi%7D+U_%7B-%5Cphi%7D%5Cright)"> as claimed.</p>
</div>
</div>
</div>
<p>Note that we need logarithmically less ancilla qubits than the number of unitaries, so the computations above are efficient. One of the use cases for this protocol is to block encode a local Hamiltonian, i.e.&nbsp;a Hamiltonian that consists of not too many Pauli strings of bounded weight. Implementing the controlled version of each Pauli string is straightforward, and the procedure goes through.</p>
</section>
<section id="applying-block-encoded-operator-to-a-state" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="applying-block-encoded-operator-to-a-state"><span class="header-section-number">4.6</span> Applying block encoded operator to a state</h2>
<p>We can apply a block-encoded operator <img src="https://latex.codecogs.com/png.latex?A"> to a quantum state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> as follows. Assume <img src="https://latex.codecogs.com/png.latex?U=%7C0%5Crangle%5Clangle0%7C%5Cotimes%20A+%5Cdots"> block-encodes <img src="https://latex.codecogs.com/png.latex?A"> and we prepared the <img src="https://latex.codecogs.com/png.latex?n+1"> qubit system in the state <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi%5Crangle=%7C0%5Crangle%20%5Cotimes%7C%5Cpsi%5Crangle">. Then</p>
<p><img src="https://latex.codecogs.com/png.latex?U%7C%5CPsi%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D%20A%20&amp;%20*%5C%5C%20*%20&amp;%20*%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7D%20%7C%5Cpsi%5Crangle%20%5C%5C%200%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7DA%7C%5Cpsi%5Crangle%20%5C%5C%20*%20%5Cend%7Bpmatrix%7D=%7C0%5Crangle%5Cotimes%20A%7C%5Cpsi%5Crangle+%7C1%5Crangle%5Cotimes%7C*%5Crangle%20%5C%20."></p>
<p>Therefore, if we measure the ancillary qubit after applying <img src="https://latex.codecogs.com/png.latex?U"> to <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi%5Crangle"> and find it in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, the state of the remaining qubits is <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7BA%7C%5Cpsi%5Crangle%7D%7B%5Clangle%5Cpsi%7CA%5E%5Cdagger%20A%7C%5Cpsi%5Crangle%7D%20%5C%20."> I.e., up to a normalization, it is the state <img src="https://latex.codecogs.com/png.latex?A%7C%5Cpsi%5Crangle"> we aimed to find. On the other hand, if we find the ancialla qubit in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> we don’t get a useful result. Indeed, a general non-hermitian operator can not be implemented on a quantum computer deterministically, we need to <em>post-select</em> on the state of the ancillary qubit. The success probability <img src="https://latex.codecogs.com/png.latex?P"> of this protocol is given by <img src="https://latex.codecogs.com/png.latex?P=%5Clangle%5Cpsi%7CA%5E%5Cdagger%20A%7C%5Cpsi%5Crangle">.</p>
</section>
<section id="block-encoding-in-general-bases-and-projection-operators" class="level2" data-number="4.7">
<h2 data-number="4.7" class="anchored" data-anchor-id="block-encoding-in-general-bases-and-projection-operators"><span class="header-section-number">4.7</span> Block encoding in general bases and projection operators</h2>
<p>In general, we do not need the block encoding to be in the computational basis, i.e.&nbsp;that <img src="https://latex.codecogs.com/png.latex?A"> be the top-left block of a unitary <img src="https://latex.codecogs.com/png.latex?U">. We can assume this holds only in some specially chosen input and output bases</p>
<p><img src="https://latex.codecogs.com/png.latex?U%20=%20B_L%20%5Cbegin%7Bpmatrix%7D%20A%20&amp;%20*%20%5C%5C%20*%20&amp;%20*%5Cend%7Bpmatrix%7D%20B_R%5E%5Cdagger%20%5C%20."></p>
<p>Here, <img src="https://latex.codecogs.com/png.latex?B_L"> and <img src="https://latex.codecogs.com/png.latex?B_R"> are unitary matrices that perform the necessary bases change.</p>
<p>This statement is a bit empty because there is too much freedom: using properly chosen <img src="https://latex.codecogs.com/png.latex?B_R"> and <img src="https://latex.codecogs.com/png.latex?B_L"> we can say that any <img src="https://latex.codecogs.com/png.latex?U"> is a block encoding of any <img src="https://latex.codecogs.com/png.latex?A">. What we really need in QSVT is the ability to perform controlled projectors based on the block encoding bases. Here is what I mean. Define <img src="https://latex.codecogs.com/png.latex?%5CPi_n%20=%20%5Cbegin%7Bpmatrix%7D%20%5Cmathbb%7B1%7D_%7Bn%5Ctimes%20n%7D%20&amp;%200%20%5C%5C%200%20&amp;%200%5Cend%7Bpmatrix%7D%20%5C%20."> This is a projector on the first <img src="https://latex.codecogs.com/png.latex?n"> computation basis vectors. Now define left and right projectors <img src="https://latex.codecogs.com/png.latex?%5CPi_L%20=%20B_L%20P_n%20B_L%5E%5Cdagger,%20%5Cqquad%20%5CPi_R%20=%20B_R%20P_m%20B_R%5E%5Cdagger%20%5C%20."> If <img src="https://latex.codecogs.com/png.latex?A"> is square <img src="https://latex.codecogs.com/png.latex?n=m">, but for general block encodings this need not hold. The key property of the projectors is</p>
<p><img src="https://latex.codecogs.com/png.latex?%5CPi_L%20U%20%5CPi_R=%20B_L%5Cbegin%7Bpmatrix%7D%20A%20&amp;%200%20%5C%5C%200%20&amp;%200%5Cend%7Bpmatrix%7D%20B_R%5E%5Cdagger%20%5C%20."></p>
<p>QSVT does not explicitly use <img src="https://latex.codecogs.com/png.latex?B_L"> or <img src="https://latex.codecogs.com/png.latex?B_R">. We only need to have access to operators <img src="https://latex.codecogs.com/png.latex?%5CPi_L(%5Cphi)=e%5E%7B(2%5CPi_L-1)%5Cphi%7D,%5Cquad%20%5CPi_R(%5Cphi)=e%5E%7B(2%5CPi_R-1)%5Cphi%7D%20%5C%20."> These are analogs of the signal-processing operator <img src="https://latex.codecogs.com/png.latex?S(%5Cphi)"> we defined in QSP <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BS%7D">. Note that <img src="https://latex.codecogs.com/png.latex?%5CPi_L(%5Cphi)=B_L%5Cbegin%7Bpmatrix%7De%5E%7Bi%5Cphi%7D%20&amp;0%20%5C%5C%200%20&amp;%20e%5E%7B-i%5Cphi%7D%5Cend%7Bpmatrix%7DB_L%5E%5Cdagger%20"> (and similarly for <img src="https://latex.codecogs.com/png.latex?%5CPi_R(%5Cphi)">). So, in the right-basis, <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)"> is indeed a block version of the QSP signal-processing operator.</p>
</section>
<section id="sec-projector_rotations" class="level2" data-number="4.8">
<h2 data-number="4.8" class="anchored" data-anchor-id="sec-projector_rotations"><span class="header-section-number">4.8</span> Projector rotations from controlled projectors</h2>
<p>Projector rotations <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)"> are easy to implement provided access to the projector-controlled NOT operation <img src="https://latex.codecogs.com/png.latex?C_%7B%5CPi%7DNOT">, which is defined as <img src="https://latex.codecogs.com/png.latex?C_%7B%5CPi%7DNOT=X%5Cotimes%5CPi+%5Cmathbb%7B1%7D%5Cotimes%20(1-%5CPi)"> or, graphically,</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/controlled_p.svg" class="img-fluid figure-img" width="300"></p>
</figure>
</div>
<p>Slashed line means the operator can act on an arbitrary number of qubits. The rotation <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)"> can be implemented as follows</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/projector_rotation.svg" class="img-fluid figure-img" width="300"></p>
</figure>
</div>
<p>Thus, with an additional ancilla qubit and the ability to perform <img src="https://latex.codecogs.com/png.latex?C_%5CPi%20NOT"> we get to implement <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)">. In what follows, I will not worry about this implementation detail and assume direct access to <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)">.</p>
</section>
</section>
<section id="approximating-functions-with-polynomials" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Approximating functions with polynomials</h1>
<p>Another key step in QSVT is approximating target functions with polynomials. This is a huge field on its own, and I can only scratch the surface. It may be tempting to view the polynomial approximation as a technical detail worth ignoring, but we probably shouldn’t. This is because the degree of the polynomial that gives a good enough approximation to your function determines the number of queries to the block encoded operators. Hence, it directly controls the complexity of the resulting quantum algorithm. Let’s therefore try to gain some intuition about how polynomial approximations work and how they scale.</p>
<section id="recap-of-the-problem" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="recap-of-the-problem"><span class="header-section-number">5.1</span> Recap of the problem</h2>
<p>Our original intention was to apply some function <img src="https://latex.codecogs.com/png.latex?f(x)"> to the singular values. However, in QSP/QSVT we only know how to apply polynomials <img src="https://latex.codecogs.com/png.latex?p(x)">, so we will need a polynomial that approximates the target function well. There are also restrictions on polynomials that we can implement.</p>
<ol type="1">
<li>The polynomial must be bounded: <img src="https://latex.codecogs.com/png.latex?%7Cp(x)%7C%5Cle1"> for <img src="https://latex.codecogs.com/png.latex?-1%5Cle%20x%20%5Cle%201">.</li>
<li>We can only implement directly even or odd <img src="https://latex.codecogs.com/png.latex?p(x)">. If the target function <img src="https://latex.codecogs.com/png.latex?f(x)"> is of indefinite parity, we approximate its even and odd parts separately, then combine.</li>
</ol>
<p>In a typical application we only need to approximate <img src="https://latex.codecogs.com/png.latex?f(x)"> on a subset <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D%5Csubset%20%5B-1,%201%5D">. So the approximation task is to find <img src="https://latex.codecogs.com/png.latex?p(x)"> such that</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%7Cp(x)-f(x)%7C%5Cle%20%5Cepsilon"> for <img src="https://latex.codecogs.com/png.latex?x%5Cin%20(a,b)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7Cp(x)%7C%5Cle%201"> for <img src="https://latex.codecogs.com/png.latex?x%5Cin(-1,1)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?p(x)"> has the smallest degree possible.</li>
</ol>
<p>Here is an illustration of what that should look like.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/approx.svg" class="img-fluid figure-img" width="400"></p>
<p></p><figcaption class="figure-caption">Approximation</figcaption><p></p>
</figure>
</div>
<p>Note that <img src="https://latex.codecogs.com/png.latex?%7Cf(x)%7C"> need not be bounded by 1 on <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">, but only on <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D">, where we wish to approximate it. Similarly, <img src="https://latex.codecogs.com/png.latex?%7Cp(x)%7C"> only needs to be bounded by 1 in <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">. In fact, because <img src="https://latex.codecogs.com/png.latex?p(x)"> is a polynomial, it will necessarily blow up for sufficiently large <img src="https://latex.codecogs.com/png.latex?x">.</p>
</section>
<section id="chebyshev-polynomials" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="chebyshev-polynomials"><span class="header-section-number">5.2</span> Chebyshev polynomials</h2>
<p>One of the most popular polynomial bases for approximations are given by Chebyshev polynomials, which can be defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?T_n(x)=%5Ccos(n%5Carccos%20x)=%5Cfrac12%5Cleft(%5Cleft(x+%5Csqrt%7B1-x%5E2%7D%5Cright)%5En+%5Cleft(x-%5Csqrt%7B1-x%5E2%7D%5Cright)%5En%5Cright)%20%5C%20."></p>
<p>Alright, this does not look very intuitive, what is so special about them? Actually, I don’t know. Let’s maybe ask a simpler question first, why not use the good old Taylor expansion? This is probably the first thing that comes to mind when talking about a polynomial approximation. The problem is, the Taylor series is designed to capture the behavior of a function near a particular point, and the quality of approximation degrades quickly as we step outside the close vicinity. Even if the Taylor series converges there, the convergence may be way too slow.</p>
<p>To capture the behavior over a certain range of values some other functional basis may be better. Probably a Fourier expansion will work well, except it is not polynomial. Now, let’s actually take a look at the Chebyshev polynomials.</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb4-4">    plt.plot(x, plt.np.polynomial.Chebyshev.basis(n)(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$T_n$=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chebyshev polynomials in [-1, 1])'</span>)</span>
<span id="cb4-6">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-7">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-8">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb4-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb4-10">    plt.plot(x, plt.np.polynomial.Chebyshev.basis(n)(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'$T_n$=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>n<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chebyshev polynomials in [-2, 2]'</span>)</span>
<span id="cb4-12">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-13">plt.tight_layout()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Is it just me, or the Chebyshev polynomials on <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> (left fig) actually look quite a lot like trigonometric functions? Note that they are also bounded there, and that they quickly blow up outside <img src="https://latex.codecogs.com/png.latex?%5B-1,%201%5D"> (right fig). For further intuition about the Chebyshev polynomials, you may wish to check out tis blog post by Jason Sachs <span class="citation" data-cites="Chebyshev">&nbsp;[7]</span>.</p>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The Chebyshev polynomials are most interesting for <img src="https://latex.codecogs.com/png.latex?x%5Cin%20%5B-1,1%5D">, but in QSP/QSVT applications we will linearly map this domain to <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D%5Csubset%5B-1,1%5D">, and so we will in fact be interested in how the Chebyshev polynomials behave outside <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> as well.</p>
</div>
</div>
</section>
<section id="chebyshev-series-and-bernstein-ellipse" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="chebyshev-series-and-bernstein-ellipse"><span class="header-section-number">5.3</span> Chebyshev series and Bernstein ellipse</h2>
<p>Now, as a respectable functional basis the Chebyshev polynomials have the property that an arbitrary reasonable function <img src="https://latex.codecogs.com/png.latex?f(x)"> can be expanded into the Chebyshev series <img src="https://latex.codecogs.com/png.latex?f(x)=%5Csum_%7Bn%5Cge0%7D%20a_nT_n(x),%20%5Cqquad%20x%5Cin%20%5B-1,%201%5D%20%5C%20."> Coefficients <img src="https://latex.codecogs.com/png.latex?a_n"> decay and can bound as follows <span class="citation" data-cites="Tang2023">&nbsp;[2]</span></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Aa_n%5Cle%202M%5Crho%5E%7B-n%7D%20%5C%20.%20%5Clabel%7Ban%7D%0A%5Cend%7Balign%7D"></p>
<p>Parameters <img src="https://latex.codecogs.com/png.latex?M"> and <img src="https://latex.codecogs.com/png.latex?%5Crho"> need to be explained. Define the <strong><em>Bernstein ellipse</em></strong> <img src="https://latex.codecogs.com/png.latex?E_%7B%5Crho%7D"> as the subset of the complex plane inside the ellipse <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7Bz+z%5E%7B-1%7D%7D%7B2%7D,%20%7Cz%7C=%5Crho">, or alternatively <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Crho%20e%5E%7Bi%5Cphi%7D+%5Crho%5E%7B-1%7D%20e%5E%7B-i%5Cphi%7D%7D%7B2%7D,%5Cphi%5Cin%20(0,2%5Cpi)">. Without loss of generality, we assume <img src="https://latex.codecogs.com/png.latex?%5Crho%5Cge1">. The interval <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> is contained in <img src="https://latex.codecogs.com/png.latex?E_%5Crho">. Here is a sketch.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/ellipse.svg" class="img-fluid figure-img" width="400"></p>
</figure>
</div>
<p>Now, assume that <img src="https://latex.codecogs.com/png.latex?f(x)"> can be analytically continued from <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> to the interior of <img src="https://latex.codecogs.com/png.latex?E_%5Crho">. Then, we denote by <img src="https://latex.codecogs.com/png.latex?M"> an upper bound on the value of <img src="https://latex.codecogs.com/png.latex?f(z)">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?%7Cf(z)%7C%5Cle%20M,%20z%5Cin%20E_%5Crho">.</p>
<p>In a typical application, we have a family of functions <img src="https://latex.codecogs.com/png.latex?f_%5Clambda(x)"> and want to look at the asymptotic of <img src="https://latex.codecogs.com/png.latex?%5Clambda%5Cto%200">. As <img src="https://latex.codecogs.com/png.latex?%5Clambda"> decreases, <img src="https://latex.codecogs.com/png.latex?M"> tends to increase. To counteract this and keep <img src="https://latex.codecogs.com/png.latex?M"> constant, we will need to shrink the Bernstein ellipse.</p>
<p>Alright, so for any fixed <img src="https://latex.codecogs.com/png.latex?M"> and <img src="https://latex.codecogs.com/png.latex?%5Crho"> the Chebyshev coefficients of <img src="https://latex.codecogs.com/png.latex?f(x)"> decay exponentially <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Ban%7D">. Given this fact and that all Chebyshev polynomials are bounded by 1 on <img src="https://latex.codecogs.com/png.latex?x%5Cin%20%5B-1,1%5D"> we find that the truncated Chebyshev series satisfies <img src="https://latex.codecogs.com/png.latex?%7Cf(x)-%5Csum_%7Bm=0%7D%5En%20a_m%20T_m(x)%7C_%7B%5B-1,1%5D%7D%5Cle%20%5Cfrac%7B2M%5Crho%5E%7B-n-1%7D%7D%7B%5Crho-1%7D%20%5C%20.%20"></p>
<p>However, this approximation result is in general not sufficient for QSVT applications. The interval <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> here should be linearly mapped to a subset <img src="https://latex.codecogs.com/png.latex?%5Ba,b%5D"> from the previous section, i.e.&nbsp;the subset where the target function needs to be approximated. This means that along with finding a good approximation on <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> we also need to ensure that the resulting polynomial remains bounded in some region outside <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">, which is an additional challenge.</p>
</section>
<section id="sec-polynomial_how_to" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="sec-polynomial_how_to"><span class="header-section-number">5.4</span> Bounded Chebyshev approximations</h2>
<p>A general approach to this problem is proposed in <span class="citation" data-cites="Tang2023">&nbsp;[2]</span>. The idea is to take an approximation that behaves well on <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> but blows up outside, and multiply it by a function that is close to 1 at <img src="https://latex.codecogs.com/png.latex?%5B-1,%201%5D"> and rapidly decays outside. Then the product can be re-expanded in the Chebyshev basis and yields the desired result. Here is what we get (Theorem 19 of <span class="citation" data-cites="Tang2023">&nbsp;[2]</span>).</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Bounded approximation by Chebyshev polynomials">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Bounded approximation by Chebyshev polynomials
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size=17px">
<p>Let <img src="https://latex.codecogs.com/png.latex?f(x)"> be analytic on <img src="https://latex.codecogs.com/png.latex?%5B-1,%201%5D"> and analytically continuanable to <img src="https://latex.codecogs.com/png.latex?E_%5Crho"> where it is bounded by <img src="https://latex.codecogs.com/png.latex?M">. Denote <img src="https://latex.codecogs.com/png.latex?%5Crho=1+%5Calpha,%20%5Calpha%3E0">. For any <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> there is a polynomial <img src="https://latex.codecogs.com/png.latex?p(x)"> such that</p>
<ol type="1">
<li><img src="https://latex.codecogs.com/png.latex?%7Cf(x)-p(x)%7C_%7B%5B-1,1%5D%7D%5Cle%20M%5Cepsilon">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7Cp(x)%7C_%7B%5B-1-%5Cdelta,%201+%5Cdelta%5D%7D%5Cle%20M">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%7Cp(x)%7C_%7B%5B-b,-1-%5Cdelta%5D%5Ccup%20%5B1+%5Cdelta,%20b%5D%7D%5Cle%20M%5Cepsilon">.</li>
</ol>
</div>
</div>
</div>
<p>In words, <img src="https://latex.codecogs.com/png.latex?p(x)"> approximates <img src="https://latex.codecogs.com/png.latex?f(x)"> to relative precision <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> on <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">. Furthermore, <img src="https://latex.codecogs.com/png.latex?p(x)"> is bounded by a constant in some <img src="https://latex.codecogs.com/png.latex?%5Cdelta">-neighborhood outside <img src="https://latex.codecogs.com/png.latex?%5B-1,%201%5D">. Finally, <img src="https://latex.codecogs.com/png.latex?p(x)"> is <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">-close to zero outside this <img src="https://latex.codecogs.com/png.latex?%5Cdelta">-neighborhood and up to a larger <img src="https://latex.codecogs.com/png.latex?b">-neighborhood. Here is a sketch.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/approx_delta.svg" class="img-fluid figure-img" width="400"></p>
</figure>
</div>
<p>The condition that <img src="https://latex.codecogs.com/png.latex?p(x)"> is zero ouside some <img src="https://latex.codecogs.com/png.latex?%5Cdelta">-neighborhood is useful for approximating piece-wise smooth functions. Now, I didn’t yet tell what are <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> and <img src="https://latex.codecogs.com/png.latex?b"> and, most importantly, what is the degree of the polynomial? According to <span class="citation" data-cites="Tang2023">&nbsp;[2]</span>, <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> can be anywhere in <img src="https://latex.codecogs.com/png.latex?(0,%20%5Cfrac%7Bmin(1,%5Calpha%5E2)%7D%7BC%7D)"> for a sufficiently large but constant <img src="https://latex.codecogs.com/png.latex?C">. And you get to choose <img src="https://latex.codecogs.com/png.latex?b%3E1+%5Cdelta"> freely. Then, the desired polynomial has degree <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Coperatorname%7Bdeg%7Dp(x)=O%5Cleft(%5Cfrac%7Bb%7D%7B%5Cdelta%7D%5Clog%20%5Cfrac%7Bb%7D%7B%5Cdelta%20%5Cepsilon%7D%5Cright)%20%5Clabel%7Bpdeg%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>Some important features of this result.</p>
<ol type="1">
<li>If you insist on a good approximation at the point of discontinuity, you pay a linear price. I.e. the degree of the polynomial scales linearly (modulo the log factor) with <img src="https://latex.codecogs.com/png.latex?%5Cdelta%5E%7B-1%7D">.</li>
<li>If you want your polynomial approximation to be bounded far enough away from <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D"> you pay a linear price, i.e.&nbsp;the degree scales linearly (modulo the log factor) with <img src="https://latex.codecogs.com/png.latex?b">.</li>
<li>Neatly, dependence on the error <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> is only logarithmic.</li>
</ol>
</section>
<section id="sec-theta_approx" class="level2" data-number="5.5">
<h2 data-number="5.5" class="anchored" data-anchor-id="sec-theta_approx"><span class="header-section-number">5.5</span> Illustration: approximating the sign function</h2>
<p>In many applications of QSVT it is actually very helpful to approximate the sign function <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bsign%7D(x)">. This will also help us illustrate the approximation results described above.</p>
<p>Note that <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bsign%7D(x)=%5Ctheta(x)-%5Ctheta(-x)">, where <img src="https://latex.codecogs.com/png.latex?%5Ctheta(x)"> is the step function. We can approximate each <img src="https://latex.codecogs.com/png.latex?%5Ctheta(%5Cpm%20x)"> separately, then combine. We will require that our approximation is <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">-close to <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bsign%7D(x)"> outside a small region <img src="https://latex.codecogs.com/png.latex?(-a,a)"> around the discontinuity.</p>
<p>Take for concreteness <img src="https://latex.codecogs.com/png.latex?%5Ctheta(x)">. For <img src="https://latex.codecogs.com/png.latex?x%3E0"> it is smooth and in fact constant, so <img src="https://latex.codecogs.com/png.latex?M=1"> for arbitrary <img src="https://latex.codecogs.com/png.latex?%5Crho">. The only thing we need to take care of is that the discontinuity region, where our approximation fails, is small enough <img src="https://latex.codecogs.com/png.latex?%5Cdelta%5Cle%20a">. This implies that there is a polynomial of degree <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac1a%5Clog%5Cfrac1%7Ba%5Cepsilon%7D)"> that does the job.</p>
<p>In this and some other cases, the approximation bound stated in the previous section does not give the tightest result. For instance, approximating the sign function is possible with a polynomial of degree <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac1a%5Clog%5Cfrac1%5Cepsilon)">, i.e.&nbsp;the additional <img src="https://latex.codecogs.com/png.latex?%5Clog%5Cfrac1%7Ba%7D"> factor is not necessary. However, the overhead we get from applying the procedure above is often modest, a may be a good price to pay for the universality of the approach.</p>
</section>
</section>
<section id="sec-QSVT" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> QSVT</h1>
<p>Phew! That was quite a bit of preparing. However, we now have all the ingredients in place to explain how (and also a bit why) QSVT works.</p>
<section id="recap" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="recap"><span class="header-section-number">6.1</span> Recap</h2>
<p>Let’s recap the setup.</p>
<ol type="1">
<li>The goal is to perform a functional transformation on the singular values of some operator <img src="https://latex.codecogs.com/png.latex?A%5Cto%20f(A)">.</li>
<li>We are provided with a unitary <img src="https://latex.codecogs.com/png.latex?U"> that block encodes <img src="https://latex.codecogs.com/png.latex?A">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?U=B_L%5Cbegin%7Bpmatrix%7D%20A&amp;*%5C%5C%20*&amp;*%5Cend%7Bpmatrix%7DB_R%5E%5Cdagger">.</li>
<li>We are provided with projectors <img src="https://latex.codecogs.com/png.latex?%5CPi_L,%5CPi_R"> that describe this block encoding, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5CPi_L%20U%20%5CPi_R=B_L%5Cbegin%7Bpmatrix%7D%20A&amp;0%5C%5C0&amp;0%5Cend%7Bpmatrix%7DB_R%5E%5Cdagger"> and can perform projector rotations <img src="https://latex.codecogs.com/png.latex?%5CPi_L(%5Cphi),%20%5CPi_R(%5Cphi)">.</li>
<li>We figured out what is a good polynomial approximation to our target function <img src="https://latex.codecogs.com/png.latex?p(x)%5Capprox%20f(x)">.</li>
</ol>
<p>From these ingredients, the QSVT builds a unitary <img src="https://latex.codecogs.com/png.latex?U_%5Cphi"> that block encodes the desired polynomial transformation.</p>
</section>
<section id="how-qsvt-works" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="how-qsvt-works"><span class="header-section-number">6.2</span> How QSVT works</h2>
<p>Alright, how to build <img src="https://latex.codecogs.com/png.latex?U_%5Cphi">? A bit awkwardly, we will have to separately describe two cases, when <img src="https://latex.codecogs.com/png.latex?p(x)"> is even and when it is odd. So, for <img src="https://latex.codecogs.com/png.latex?p(x)"> even (the number of QSP phases is odd)</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="QSVT circuit (even)">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
QSVT circuit (even)
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size:17px">
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_%5Cphi%20=%20%5Cleft(%5Cprod_%7Bi=0%7D%5E%7Bd/2-1%7D%5CPi_R(%5Cphi_%7B2i%7D)U%5E%5Cdagger%5CPi_L(%5Cphi_%7B2i+1%7D)U%20%5Cright)%20%5CPi_R(%5Cphi_d),%5Cqquad%20U_%5Cphi=B_R%5Cbegin%7Bpmatrix%7Dp(A)%20&amp;%20*%5C%5C%20*%20&amp;%20*%5Cend%7Bpmatrix%7D%20B_R%5E%5Cdagger%5C%20.%20%5Clabel%7BQSVT%20even%7D%0A%5Cend%7Balign%7D"></p>
</div>
</div>
</div>
<p>For <img src="https://latex.codecogs.com/png.latex?p(x)"> odd (the number of QSP phases even)</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="QSVT circuit (odd)">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
QSVT circuit (odd)
</div>
</div>
<div class="callout-body-container callout-body">
<div style="font-size:17px">
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU_%7B%5Cphi%7D=%5CPi_L(%5Cphi_%7B0%7D)U%5Cprod_%7Bi=1%7D%5E%7B(d-1)/2%7D%5CPi_R(%5Cphi_%7B2i-1%7D)U%5E%5Cdagger%5CPi_L(%5Cphi_%7B2i%7D)U%20%5CPi_R(%5Cphi_d),%5Cqquad%20U_%5Cphi=B_L%5Cbegin%7Bpmatrix%7Dp(A)%20&amp;%20*%5C%5C%20*%20&amp;%20*%5Cend%7Bpmatrix%7D%20B_R%5E%5Cdagger%20%5C%20.%20%5Clabel%7BQSVT%20odd%7D%0A%5Cend%7Balign%7D"></p>
</div>
</div>
</div>
<p>Recall that we defined the polynomial of a matrix <img src="https://latex.codecogs.com/png.latex?p(A)"> in Sec.&nbsp;3.5, and that it also had a personality split into even/odd cases. The angles <img src="https://latex.codecogs.com/png.latex?%5Cphi"> are <em>the same</em> angles that we would use to apply <img src="https://latex.codecogs.com/png.latex?p(x)"> in QSP with <em><img src="https://latex.codecogs.com/png.latex?R">-convention</em>. Overall, this is pretty similar to how QSP circuits work.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>One thing I tripped over. In QSP, we have different signal conventions and need to use a different angle sequence for each. Now I just told you that for QSVT we need to borrow QSP angles in the <img src="https://latex.codecogs.com/png.latex?R">-convention. Don’t we need to specify how exactly is our operator <img src="https://latex.codecogs.com/png.latex?A"> block encoded in <img src="https://latex.codecogs.com/png.latex?U"> then? No, we need not. The difference between QSP and QSVT is that in QSP we apply the same signal operator throughout, while in QSVT we alternate between <img src="https://latex.codecogs.com/png.latex?U"> and <img src="https://latex.codecogs.com/png.latex?U%5E%5Cdagger">. Because different block encodings are related by unitary transformations, these differences cancel in the QSVT sequence. To see why the R-convention of QSP most naturally maps to QSVT, take a look at section Sec.&nbsp;6.5.</p>
</div>
</div>
</section>
<section id="qsvt-circuit" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="qsvt-circuit"><span class="header-section-number">6.3</span> QSVT circuit</h2>
<p>Let’s take a moment to visualize the QSVT as a quantum circuit. In the simplest case, which often holds in practice, <img src="https://latex.codecogs.com/png.latex?B_L=B_R=%5Cmathbb%7B1%7D"> and <img src="https://latex.codecogs.com/png.latex?%5CPi=%5CPi_R=%5CPi_L=%7C0%5Crangle%5E%7B%5Cotimes%20k%7D%5Clangle0%7C%5E%7B%5Cotimes%20k%7D">, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5CPi"> projects onto the all-zero state of <img src="https://latex.codecogs.com/png.latex?k"> ancillariy qubits. Then, <img src="https://latex.codecogs.com/png.latex?C_%5CPi%20NOT"> is just the Toffoli gate controlled by these <img src="https://latex.codecogs.com/png.latex?k"> qubits. Recall that a projector rotation <img src="https://latex.codecogs.com/png.latex?%5CPi(%5Cphi)"> can be assembled from two <img src="https://latex.codecogs.com/png.latex?C_%5CPi%20NOT"> gates, as described in Sec.&nbsp;4.8.</p>
<p>In this case, the whole QSVT circuit looks something like (image borrowed from <a href="https://pure.uva.nl/ws/files/35292358/Thesis.pdf">András Gilyén’s thesis</a>)</p>
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/qsvt_circuit.png" class="img-fluid"></p>
<p>For more general block encodings, the picture is a bit different, yet quite similar.</p>
<p>Let’s implement the QSVT circuit in code for later use.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> projector_rotation(P, phi):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Computes exponential of a projector using relation e^{i (2P-1) x}= cos(x)+i(2P-1)sin(x)"""</span></span>
<span id="cb5-3">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(P)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.eye(N)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.cos(phi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>P<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>np.eye(N))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sin(phi)</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_QSVT(U, PL, PR, phis):</span>
<span id="cb5-8">    </span>
<span id="cb5-9">    phi_last <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phis[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-10">    </span>
<span id="cb5-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(phis) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Even polynomial</span></span>
<span id="cb5-12">        phis_paired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phis[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-13">        phi_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb5-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Odd polynomial</span></span>
<span id="cb5-15">        phis_paired <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-16">        phi_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phis[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-17">    </span>
<span id="cb5-18">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projector_rotation(PR, phi_last)</span>
<span id="cb5-19">    </span>
<span id="cb5-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> phi_R, phi_L <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.array(phis_paired).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)[::<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:</span>
<span id="cb5-21">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  projector_rotation(PR, phi_R) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.conj().T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>  projector_rotation(PL, phi_L) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> res</span>
<span id="cb5-22">    </span>
<span id="cb5-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> phi_0 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-24">        res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projector_rotation(PL, phi_0) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> res</span>
<span id="cb5-25">        </span>
<span id="cb5-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> res</span></code></pre></div>
</div>
</section>
<section id="controlled-version-of-qsvt-circuit" class="level2" data-number="6.4">
<h2 data-number="6.4" class="anchored" data-anchor-id="controlled-version-of-qsvt-circuit"><span class="header-section-number">6.4</span> Controlled version of QSVT circuit</h2>
<p>Recall that to obtain general polynomials with QSP we need to perform a trick discussed in Sec.&nbsp;2.4. It requires controlled versions of the full QSVT unitary <img src="https://latex.codecogs.com/png.latex?C(U_%5Cphi)">. Since constructing a controlled version is difficult in general, you might worry that implementing <img src="https://latex.codecogs.com/png.latex?C(U_%5Cphi)"> is costly and can alter the scaling of the algorithm. Turns out, constructing controlled version of QSVT circuits is pretty simple. Indeed, I claim that, in the even case <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BQSVT%20even%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AC(U_%5Cphi)=%5Cleft(%5Cprod_%7Bi=0%7D%5E%7Bd/2-1%7DC(%5CPi_R(%5Cphi_%7B2i%7D))U%5E%5Cdagger%20C(%5CPi_L(%5Cphi_%7B2i+1%7D))U%20%5Cright)%20C(%5CPi_R(%5Cphi_d))%20%5C%20,%0A"> i.e.&nbsp;it suffices to only control the projector rotations. Why? Right, if the control qubit is not activated, projectors drop out and all pairs of <img src="https://latex.codecogs.com/png.latex?U%5E%5Cdagger,%20U"> combine and cancel. Otherwise, we get the QSVT circuit back.</p>
<p>In the odd case, the situation is similar, except for a single unmatched application of <img src="https://latex.codecogs.com/png.latex?U">. So we will simply need to control the projectors and <em>a single</em> signal unitary <img src="https://latex.codecogs.com/png.latex?U">.</p>
<p>For completeness, the following circuit shows how to build a controlled version of a projector rotation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/controlled_rotation.svg" class="img-fluid figure-img" width="300"></p>
</figure>
</div>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Exercise">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-12-contents" aria-controls="callout-12" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-12" class="callout-12-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Convince yourself the claims we’ve made are valid. Check that the above circuit is indeed a controlled projector.</p>
</div>
</div>
</div>
</section>
<section id="sec-qsvt_why" class="level2" data-number="6.5">
<h2 data-number="6.5" class="anchored" data-anchor-id="sec-qsvt_why"><span class="header-section-number">6.5</span> Why QSVT works</h2>
<p>Alright, how do we prove <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BQSVT%20even%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BQSVT%20odd%7D">? I’d say that the full proof is a bit tedious and not very illuminating, and the main difficulty to deal with is non-squaredness of <img src="https://latex.codecogs.com/png.latex?A">. If we assume <img src="https://latex.codecogs.com/png.latex?A"> is square, we can sketch the proof quite simply.</p>
<p>I will follow a recent exposition in <span class="citation" data-cites="Tang2023">&nbsp;[2]</span> that simplifies the derivation. The key idea there is to leverage another special matrix decomposition, known as the <strong><em>CS decomposition</em></strong> (cosine-sine). It states that for any unitary matrix <img src="https://latex.codecogs.com/png.latex?U"> consisting of four blocks, the following decomposition exists <img src="https://latex.codecogs.com/png.latex?U=%5Cbegin%7Bpmatrix%7DA_%7B00%7D%20&amp;%20A_%7B01%7D%20%5C%5C%20A_%7B10%7D%20&amp;%20A_%7B11%7D%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7DV_0%20&amp;%200%20%5C%5C%200%20&amp;%20V_1%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7DC%20&amp;%20S%20%5C%5C%20S%20&amp;%20-C%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7DW_0%20&amp;%200%20%5C%5C%200%20&amp;%20W_1%5Cend%7Bpmatrix%7D%5E%5Cdagger%20%5C%20."></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?V_%7B0%7D,%20V_%7B1%7D,%20W_%7B0%7D,W_%7B1%7D"> are unitaries of appropriate sizes. If all blocks in <img src="https://latex.codecogs.com/png.latex?U"> are of equal size, matrices <img src="https://latex.codecogs.com/png.latex?C"> and <img src="https://latex.codecogs.com/png.latex?S"> are diagonal and satisfy <img src="https://latex.codecogs.com/png.latex?C%5E2+S%5E2=%5Cmathbb%7B1%7D">, hence the name cosine-sine decomposition. For blocks of arbitrary sizes, there will still be CS-subblocks, but you’d also have to carefully pad them with zeros and ones. I will not consider this case here.</p>
<p>An important property of the CS-decomposition, which is not shared e.g.&nbsp;by the SVD, is that the unitaries sandwiching the CS-core are block-diagonal. For this reason, they commute through projector-rotations and effectively drop out of the QSVT sequence. At the same time, the middle matrix in CS-decomposition looks exactly like the <img src="https://latex.codecogs.com/png.latex?R">-signal matrix in QSP, which explains why we need to use QSP angles in the <img src="https://latex.codecogs.com/png.latex?R">-convention to build QSVT circuits.</p>
<p>With these ideas in place, the rest is mostly filling in the details. I will not do this here, but you are welcome to try and work out the full derivation or look it up in <span class="citation" data-cites="Tang2023">&nbsp;[2]</span>.</p>
</section>
<section id="qubitization" class="level2" data-number="6.6">
<h2 data-number="6.6" class="anchored" data-anchor-id="qubitization"><span class="header-section-number">6.6</span> Qubitization</h2>
<p>QSVT is closely related to the concept of <strong><em>qubitization</em></strong>, which I believe was introduced a bit earlier in the context of the Hamiltonian simulation. The idea was again to adopt QSP to high-dimensional systems. If you go through the derivations in the previous section, you’ll find that nothing else is required other than dealing with <img src="https://latex.codecogs.com/png.latex?2%5Ctimes2"> block matrices. So effectively, the problem was indeed reduced to a QSP of a two-level system. In jargon, we qubitized the problem. <span class="citation" data-cites="Martyn2021">&nbsp;[1]</span> explains qubitization a bit differently and in a way that may help to establish a more conceptual connection between relate QSP and QSVT. You are welcome to take a look.</p>
<p>Alright, we are now ready to tackle some of the QSVT applications.</p>
</section>
</section>
<section id="grovers-search" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Grover’s search</h1>
<p>As is standard, I will open the list of QSVT applications with Grover’s search. I must note though, that I find it a bit harder conceptually than many other applications. This is because we will deal with a block encoding in an a priori unknown basis, which is unusual. Anyway, let’s get going.</p>
<section id="the-problem" class="level2" data-number="7.1">
<h2 data-number="7.1" class="anchored" data-anchor-id="the-problem"><span class="header-section-number">7.1</span> The problem</h2>
<p>We aim to find an unknown computational basis state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> of <img src="https://latex.codecogs.com/png.latex?n"> qubits. As our signal unitary, we choose the Hadamard gate acting on all qubits <img src="https://latex.codecogs.com/png.latex?U=H%5E%7B%5Cotimes%20n%7D">. We know that <img src="https://latex.codecogs.com/png.latex?%5Clangle%20m%7CH%5E%7B%5Cotimes%20n%7D%7C0%5Crangle=%5Cfrac%7B1%7D%7B%5Csqrt%7BN%7D%7D">. In other words,</p>
<p><img src="https://latex.codecogs.com/png.latex?U%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7BN%7D%7D%20%7Cm%5Crangle%5Clangle%200%7C+%5Cdots%20%5C%20,"></p>
<p>i.e.&nbsp;in a suitable basis, <img src="https://latex.codecogs.com/png.latex?U"> block encodes the transition amplitude between <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. If we could apply a polynomial transformation, which approximates <img src="https://latex.codecogs.com/png.latex?%5Ctheta(x-a)"> with <img src="https://latex.codecogs.com/png.latex?a%3C%5Cfrac%7B1%7D%7B%5Csqrt%7BN%7D%7D">, we would effectively amplify the transition amplitude and construct a unitary <img src="https://latex.codecogs.com/png.latex?U_%5Cphi"> that is almost guaranteed to prepare our marked state <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> starting with <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">.</p>
<p>A difficulty is that we do not really know the basis of the block encoding, as this would be equivalent to knowing <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">. At the same time, in QSVT we only need to access controlled versions of projectors corresponding to the block encoding, and this is exactly what Grover’s oracle does.</p>
</section>
<section id="projectors" class="level2" data-number="7.2">
<h2 data-number="7.2" class="anchored" data-anchor-id="projectors"><span class="header-section-number">7.2</span> Projectors</h2>
<p>Grover’s oracle can be defined as <img src="https://latex.codecogs.com/png.latex?G=%5Cmathbb%7B1%7D-2%7Cm%5Crangle%5Clangle%20m%7C">. Actually, in practical applications Grover’s oracle is more often represented as an operator that flips the state of an auxilary qubit controlled by the state of the system, i.e.&nbsp;<img src="https://latex.codecogs.com/png.latex?G%7Cn%5Crangle%7C0%5Crangle=%7Cn%5Crangle%7C0%5Crangle"> for <img src="https://latex.codecogs.com/png.latex?n%5Cneq%20m"> and <img src="https://latex.codecogs.com/png.latex?G%7Cm%5Crangle%7C0%5Crangle=%7Cm%5Crangle%7C1%5Crangle">. In effect, this operator is nothing but the <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle">-controlled NOT gate <img src="https://latex.codecogs.com/png.latex?G=C_%7B%7Cm%5Crangle%5Clangle%20m%7C%7DNOT">. As we discussed in Sec.&nbsp;4.8 it is sufficient to construct the projector rotation <img src="https://latex.codecogs.com/png.latex?%5CPi_R(%5Cphi)">. The left projector is simply <img src="https://latex.codecogs.com/png.latex?%5CPi_L=%7C0%5Crangle%5Clangle0%7C"> and its controlled version is just the <img src="https://latex.codecogs.com/png.latex?n+1"> qubit Toffoli gate.</p>
</section>
<section id="polynomial-approximation" class="level2" data-number="7.3">
<h2 data-number="7.3" class="anchored" data-anchor-id="polynomial-approximation"><span class="header-section-number">7.3</span> Polynomial approximation</h2>
<p>So we aim to approximate <img src="https://latex.codecogs.com/png.latex?%5Ctheta(x-a)"> for <img src="https://latex.codecogs.com/png.latex?a%5Cle%20%5Cfrac1%7B%5Csqrt%7BN%7D%7D">. Equivalently, we can approximate <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bsign%7D(x)"> with resolution <img src="https://latex.codecogs.com/png.latex?%5Cdelta%5E%7B-1%7D=a"> around the point of discontinuity <img src="https://latex.codecogs.com/png.latex?x=0">. As discussed in Sec.&nbsp;5.5, this can be done using a polynomial of degree <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac%7B1%7D%7Ba%7D%5Clog%5Cfrac%7B1%7D%7Ba%5Cepsilon%7D)=O(%5Csqrt%7BN%7D%5Clog%5Cfrac%7B%5Csqrt%7BN%7D%7D%7B%5Cepsilon%7D)">. We know that Grover’s search can run in time <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> so the extra <img src="https://latex.codecogs.com/png.latex?%5Clog%5Csqrt%7BN%7D">, while not crucial, is unnecessary. Anyway, in the framework of QSVT finding a better scaling algorithm amounts to ‘just’ constructing a more efficient polynomial approximation. We won’t go there.</p>
<p>Actually, I will not construct the polynomial approximations at all in subsequent implementations. Instead, I will use routines provided by <code>pyqsp</code> that besides building a QSP sequence from a polynomial also includes the approximation utils.</p>
</section>
<section id="implementation-1" class="level2" data-number="7.4">
<h2 data-number="7.4" class="anchored" data-anchor-id="implementation-1"><span class="header-section-number">7.4</span> Implementation</h2>
<p>First, let’s define and look at the approximating polynomials. To build them, we will use a function provided by <code>pyqsp</code> package, which approximates <img src="https://latex.codecogs.com/png.latex?erf(-%5CDelta%20x)">. Apparently, we can not simply specify the desired precision here, but instead have to give the degree of the polynomial and <img src="https://latex.codecogs.com/png.latex?%5CDelta">. I will go with the simplest options <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdeg%7Dp=%5Csqrt%7BN%7D,%20%5CDelta=%5Csqrt%7BN%7D"> which give a decent, but not ideal performance.</p>
<div class="cell" data-scrolled="true" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sign_approximating_polynomial(num_qubits):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Polynomial that approximates the step function theta(x) for x&gt;= 1/N**0.5"""</span></span>
<span id="cb6-3">    </span>
<span id="cb6-4">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb6-5">    target_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.poly.PolySign()</span>
<span id="cb6-6">    </span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For the Sign `pyqsp` does not determined the degree of the polynomial.</span></span>
<span id="cb6-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We have to input it. I will take the closest odd number to N**0.5</span></span>
<span id="cb6-9">    </span>
<span id="cb6-10">    degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.ceil(N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)</span>
<span id="cb6-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-12">        degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-13">    </span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This delta controls the width of our approximation around zero, but does not exacly</span></span>
<span id="cb6-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># correspond to delta defined in the text, rather Delta here ~ 1 / our delta.</span></span>
<span id="cb6-16">    Delta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-17">    </span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find the polynomial approximation.</span></span>
<span id="cb6-19">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  quiet(target_function.generate)(degree, delta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Delta)</span>
<span id="cb6-20">    </span>
<span id="cb6-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> p</span>
<span id="cb6-22"></span>
<span id="cb6-23">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb6-24">plt.plot(x, np.sign(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sign(x)'</span>)</span>
<span id="cb6-25"></span>
<span id="cb6-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num_qubits <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb6-27">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sign_approximating_polynomial(num_qubits)</span>
<span id="cb6-28">    plt.plot(x, p(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'qubits = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_qubits<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, deg=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>degree()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-29"></span>
<span id="cb6-30">plt.grid()</span>
<span id="cb6-31">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb6-32">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Polynomial approximation to sign(x)'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We see that indeed, as we increase the degree of the polynomial, the approximation around <img src="https://latex.codecogs.com/png.latex?x=0"> improves. Now we are ready to perform the full Grover search by QSVT.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> projector_from_state(state):</span>
<span id="cb7-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Builds |n&gt;&lt;n| from |n&gt;."""</span></span>
<span id="cb7-5">    </span>
<span id="cb7-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.outer(state, state.conj())</span>
<span id="cb7-7"></span>
<span id="cb7-8"></span>
<span id="cb7-9">qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)</span>
<span id="cb7-10">amplitudes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num_qubits <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> qubits:</span>
<span id="cb7-13">    </span>
<span id="cb7-14">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb7-15">    </span>
<span id="cb7-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define initial state |0&gt; and the associated projector.</span></span>
<span id="cb7-17">    all_zero_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(N)</span>
<span id="cb7-18">    all_zero_state[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-19">    PR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projector_from_state(all_zero_state)</span>
<span id="cb7-20"></span>
<span id="cb7-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a random marked state |m&gt;. It will only be accessed via the corresponding projector.</span></span>
<span id="cb7-22">    marked_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(N)</span>
<span id="cb7-23">    marked_state[np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, N)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-24">    PL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> projector_from_state(marked_state)</span>
<span id="cb7-25"></span>
<span id="cb7-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Signal operator is the n-th tensor power of the Hadamard gate.</span></span>
<span id="cb7-27">    H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-28">    U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(np.kron, [H]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits)</span>
<span id="cb7-29"></span>
<span id="cb7-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We will approximate the step function.</span></span>
<span id="cb7-31">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sign_approximating_polynomial(num_qubits)</span>
<span id="cb7-32">    </span>
<span id="cb7-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine QSP angles</span></span>
<span id="cb7-34">    phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.angle_sequence.QuantumSignalProcessingPhases(p.coef, signal_operator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wx'</span>)</span>
<span id="cb7-35">    phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles_from_W_to_R(phis)</span>
<span id="cb7-36">    </span>
<span id="cb7-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the QSVT sequence</span></span>
<span id="cb7-38">    U_phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apply_QSVT(U, PL, PR, phis)</span>
<span id="cb7-39">    </span>
<span id="cb7-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine the overlap with the marked state.</span></span>
<span id="cb7-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recall that takind the real part corresponds to combining two QSVT sequence and is not exactly trivial</span></span>
<span id="cb7-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># at the level of circuits.</span></span>
<span id="cb7-43">    amplitude <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.real(marked_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U_phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> all_zero_state)</span>
<span id="cb7-44">    </span>
<span id="cb7-45">    amplitudes.append(amplitude)</span></code></pre></div>
</div>
<p>Alright, here is the result.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">original_amplitudes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.array(qubits))</span>
<span id="cb8-2">polynomial_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [sign_approximating_polynomial(n)(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n, a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(qubits, original_amplitudes)]</span>
<span id="cb8-3"></span>
<span id="cb8-4">plt.plot(qubits, amplitudes, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'amplified amplitudes'</span>)</span>
<span id="cb8-5">plt.plot(qubits, polynomial_values, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'values of approximating polynomial'</span>)</span>
<span id="cb8-6">plt.plot(qubits, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>q) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> qubits], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original amplitudes'</span>)</span>
<span id="cb8-7"></span>
<span id="cb8-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'num qubits'</span>)</span>
<span id="cb8-9">plt.grid()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb8-10">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We see that our algorithm indeed significantly amplifies the original amplitudes with only <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> calls to the oracle, albeit not perfectly. Ideally, the amplified amplitudes stay constant as <img src="https://latex.codecogs.com/png.latex?N"> increases, while ours decay. However, this is entirely due to our choice of the polynomial approximation, which is demonstrated by plotting the values of the approximating polynomial. So our QSVT circuit works just as expected, but our approximating polynomials could be improved. I will not attempt to do it here.</p>
</section>
</section>
<section id="hamiltonian-simulation" class="level1" data-number="8">
<h1 data-number="8"><span class="header-section-number">8</span> Hamiltonian simulation</h1>
<p>Hamiltonian simulation lands itself very naturally to the QSVT framework, although there are some technical details to watch out for. Let’s begin.</p>
<section id="the-problem-1" class="level2" data-number="8.1">
<h2 data-number="8.1" class="anchored" data-anchor-id="the-problem-1"><span class="header-section-number">8.1</span> The problem</h2>
<p>The task is, given a Hamiltonian <img src="https://latex.codecogs.com/png.latex?H">, build a unitary <img src="https://latex.codecogs.com/png.latex?e%5E%7B-iHt%7D">. That’s it. So we need just need to figure out how to apply <img src="https://latex.codecogs.com/png.latex?f(x)=e%5E%7B-ixt%7D"> with QSVT.</p>
</section>
<section id="watch-out-for-your-hamiltonian" class="level2" data-number="8.2">
<h2 data-number="8.2" class="anchored" data-anchor-id="watch-out-for-your-hamiltonian"><span class="header-section-number">8.2</span> Watch out for your Hamiltonian</h2>
<p>Except that there may be subtleties. First, if <img src="https://latex.codecogs.com/png.latex?%7C%7CH%7C%7C%3E1"> we could only block encode <img src="https://latex.codecogs.com/png.latex?H/%5Calpha"> with large enough <img src="https://latex.codecogs.com/png.latex?%5Calpha">. But that’s fine, because simulating <img src="https://latex.codecogs.com/png.latex?H"> for time <img src="https://latex.codecogs.com/png.latex?t"> is the same as simulating <img src="https://latex.codecogs.com/png.latex?H/%5Calpha"> for time <img src="https://latex.codecogs.com/png.latex?%5Calpha%20t">. Next, if <img src="https://latex.codecogs.com/png.latex?H"> has negative eigenvalues, these do not coincide with the singular values. One way to deal with that is to shift <img src="https://latex.codecogs.com/png.latex?H"> by a constant <img src="https://latex.codecogs.com/png.latex?H+%5Calpha">, which can be achieved using the linear combination of unitaries. I will proceed assuming that <img src="https://latex.codecogs.com/png.latex?%7C%7CH%7C%7C%5Cle%201"> and <img src="https://latex.codecogs.com/png.latex?H%5Cge0">.</p>
</section>
<section id="solving-the-parity-problem" class="level2" data-number="8.3">
<h2 data-number="8.3" class="anchored" data-anchor-id="solving-the-parity-problem"><span class="header-section-number">8.3</span> Solving the parity problem</h2>
<p>Exponential <img src="https://latex.codecogs.com/png.latex?e%5E%7B-ixt%7D"> is not of definite parity, so we will need to construct it even and odd parts separately, and then combine into a linear combination of unitaries using the following circuit.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/cossin.svg" class="img-fluid figure-img" width="300"></p>
</figure>
</div>
<div class="callout callout-style-default callout-note callout-titled" title="Exercise">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Exercise
</div>
</div>
<div class="callout-body-container callout-body">
<p>Try to guess which <img src="https://latex.codecogs.com/png.latex?H"> is the Hadamard gate and which is the Hamiltonian.</p>
</div>
</div>
<p>In fact, this circuit will block encode <img src="https://latex.codecogs.com/png.latex?%5Cfrac12%20e%5E%7B-iHt%7D">. Since for any <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> we have <img src="https://latex.codecogs.com/png.latex?%7C%5Cfrac12%20e%5E%7B-iHt%7D%7C%5Cpsi%5Crangle%7C%5E2=%5Cfrac14"> the algorithm will succeed with a constant probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac14">.</p>
</section>
<section id="approximating-polynomial" class="level2" data-number="8.4">
<h2 data-number="8.4" class="anchored" data-anchor-id="approximating-polynomial"><span class="header-section-number">8.4</span> Approximating polynomial</h2>
<p>So now the task is to approximate <img src="https://latex.codecogs.com/png.latex?%5Ccos%20xt"> and <img src="https://latex.codecogs.com/png.latex?%5Csin%20x%20t"> on <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> to some precision <img src="https://latex.codecogs.com/png.latex?%5Cepsilon">. How should the result scale with <img src="https://latex.codecogs.com/png.latex?t,%20%5Cepsilon">?</p>
<p>Let’s try to apply the procedure from Sec.&nbsp;5.4. Since this procedure does not require a definite parity, we can understand the scaling by looking directly at <img src="https://latex.codecogs.com/png.latex?f(x)=e%5E%7B-ixt%7D">.</p>
<p>First we need to linearly map the region where we want the approximation <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D"> to the standard domain of Chebyshev polynomials <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">. We do this via <img src="https://latex.codecogs.com/png.latex?y=2x-1%20%5Cto%20x=%5Cfrac%7By+1%7D%7B2%7D">. Then we look at <img src="https://latex.codecogs.com/png.latex?f(x(y))=e%5E%7B-i%5Cfrac%7By+1%7D%7B2%7Dt%7D">. In the Bernstein ellipse <img src="https://latex.codecogs.com/png.latex?E_%5Crho"> this function has the maximum absolute value <img src="https://latex.codecogs.com/png.latex?e%5E%7B%5Cfrac%5Calpha2%20t%7D">, achieved when <img src="https://latex.codecogs.com/png.latex?y"> has the largest imaginary part <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bim%7D%20y=%5Cfrac%7B%5Crho-%5Crho%5E%7B-1%7D%7D%7B2%7D%5Capprox%20%5Calpha"> assuming <img src="https://latex.codecogs.com/png.latex?%5Crho=1+%5Calpha,%20%5Calpha%5Cll1">. Therefore, by taking <img src="https://latex.codecogs.com/png.latex?%5Calpha=%5Cfrac%7B1%7D%7Bt%7D"> we keep the target bounded by a constant in <img src="https://latex.codecogs.com/png.latex?E_%5Crho"> as we increase <img src="https://latex.codecogs.com/png.latex?t">.</p>
<p>According to Sec.&nbsp;5.4, the smallest <img src="https://latex.codecogs.com/png.latex?%5Cdelta"> we can choose is <img src="https://latex.codecogs.com/png.latex?%5Cdelta=%5Calpha%5E2=%5Cfrac%7B1%7D%7Bt%5E2%7D">, which leads to the approximating polynomial of degree <img src="https://latex.codecogs.com/png.latex?O(t%5E2%5Clog%20t%5E2/%5Cepsilon)">. While not terrible, this is quite suboptimal. Even on physical grounds, we expect that the complexity of the simulation problem should scale lineraly with <img src="https://latex.codecogs.com/png.latex?t">, not quadratically. A better approximation can be obtained by direct truncation of the Chebyshev series for <img src="https://latex.codecogs.com/png.latex?e%5E%7B-ixt%7D"> and gives a polynomial approximation with degree scaling as <img src="https://latex.codecogs.com/png.latex?O(t+%5Cfrac%7B%5Clog%20%5Cepsilon%5E%7B-1%7D%7D%7B%5Clog(e+t%5E%7B-1%7D%5Clog%5Cepsilon%5E%7B-1%7D)%7D)">. I agree, this equation looks weird, but for fixed <img src="https://latex.codecogs.com/png.latex?%5Cepsilon"> and large enough <img src="https://latex.codecogs.com/png.latex?t"> the scaling is linear in <img src="https://latex.codecogs.com/png.latex?t">. I will not dig into details of how to derive this approximation, but you can look them up in <span class="citation" data-cites="Tang2023">&nbsp;[2]</span> or <span class="citation" data-cites="Martyn2021">&nbsp;[1]</span>. Anyway, we are going to use the approximating polynomials determined by <code>pyqsp</code>.</p>
</section>
<section id="implementation-2" class="level2" data-number="8.5">
<h2 data-number="8.5" class="anchored" data-anchor-id="implementation-2"><span class="header-section-number">8.5</span> Implementation</h2>
<p>First let’s define a class that will take an arbitrary matrix <img src="https://latex.codecogs.com/png.latex?A,%20%7C%7CA%7C%7C%5Cle1"> and block encode it into a minimum number of qubits possible. We will use it here and in the next section.</p>
<div class="cell" data-tags="[]" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> BlockEncoding:</span>
<span id="cb9-2">    </span>
<span id="cb9-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, M):</span>
<span id="cb9-4">        </span>
<span id="cb9-5">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block_dimension(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_cols, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_rows))</span>
<span id="cb9-8">        </span>
<span id="cb9-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diagonal_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pad_matrix(M, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-10">        </span>
<span id="cb9-11">        U, S, WH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diagonal_block)</span>
<span id="cb9-12">        </span>
<span id="cb9-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U</span>
<span id="cb9-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> S</span>
<span id="cb9-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.WH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WH</span>
<span id="cb9-16">        </span>
<span id="cb9-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.off_diagonal_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.make_off_diagonal_block(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.U, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.S, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.WH)</span>
<span id="cb9-18">        </span>
<span id="cb9-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary_from_blocks(</span>
<span id="cb9-20">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.diagonal_block, </span>
<span id="cb9-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.off_diagonal_block)</span>
<span id="cb9-22">        </span>
<span id="cb9-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.projector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.kron(np.diag([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), np.eye(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb9-24"> </span>
<span id="cb9-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb9-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> block_dimension(n):</span>
<span id="cb9-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Finds the minimum number of qubits to block encode a square matrix of dimension n"""</span></span>
<span id="cb9-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>np.ceil(np.log2(n)))</span>
<span id="cb9-29">        </span>
<span id="cb9-30">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb9-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pad_matrix(M, dim):</span>
<span id="cb9-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Pads a matrix with zeros make to make it into a d x d matrix.."""</span></span>
<span id="cb9-33">        </span>
<span id="cb9-34">        S <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((dim, dim), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex64)</span>
<span id="cb9-35">        n_rows, n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M.shape</span>
<span id="cb9-36">        S[:n_rows,:n_cols] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> M</span>
<span id="cb9-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> S</span>
<span id="cb9-38">    </span>
<span id="cb9-39">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb9-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_off_diagonal_block(u, s, wh):</span>
<span id="cb9-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>(s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'All singular values </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>s<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> must be less than 1.'</span></span>
<span id="cb9-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.diag(np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> wh</span>
<span id="cb9-43">    </span>
<span id="cb9-44">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb9-45">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary_from_blocks(A, B):</span>
<span id="cb9-46">        n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb9-47">        U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex64)</span>
<span id="cb9-48">        U[:n, :n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A</span>
<span id="cb9-49">        U[:n,n:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B</span>
<span id="cb9-50">        U[n:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n, :n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> B</span>
<span id="cb9-51">        U[n:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n, n:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>A</span>
<span id="cb9-52">        </span>
<span id="cb9-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.conj().T, np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n), atol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-5</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ops, block encoding is not unitary.'</span></span>
<span id="cb9-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> U</span></code></pre></div>
</details>
</div>
<p>Now let’s build and look at approximating polynomials. In contrast to the sign function we used in Grover’s algorithm, here we can directly specify the desired time and accuracy, and the degree of the polynomial is determined by the package.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> trig_approximating_polynomial(t, epsilon, func):</span>
<span id="cb10-2">    </span>
<span id="cb10-3">    </span>
<span id="cb10-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cos'</span>:</span>
<span id="cb10-5">        target_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.poly.PolyCosineTX()</span>
<span id="cb10-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sin'</span>:</span>
<span id="cb10-7">        target_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.poly.PolySineTX()</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb10-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span></span>
<span id="cb10-10">        </span>
<span id="cb10-11">    coeffs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quiet(target_function.generate)(tau<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epsilon)</span>
<span id="cb10-12">    </span>
<span id="cb10-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.polynomial.Polynomial(coeffs)</span>
<span id="cb10-14"></span>
<span id="cb10-15">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb10-16">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb10-17">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>)</span>
<span id="cb10-18"></span>
<span id="cb10-19"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ti <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> t:</span>
<span id="cb10-20">    plt.plot(x, np.cos(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ti), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f't=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>ti<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb10-21">    plt.plot(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>trig_approximating_polynomial(ti, epsilon, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cos'</span>)(x), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'*'</span>)</span>
<span id="cb10-22"></span>
<span id="cb10-23">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>We see that our polynomials (plotted by stars) match the trigonometric functions well. So let’s go ahead and implement the whole QSVT circuit. In Grover’s example we looked how the results scale with the system size, here we instead will look at scaling with time.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span></span>
<span id="cb11-2">np.random.seed(seed)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fix the system size. The scalings should be independent.</span></span>
<span id="cb11-5">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb11-6">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random Hamiltonian satisfying H&gt;0, and ||H||&lt;1 </span></span>
<span id="cb11-9">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.stats.unitary_group.rvs(N, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed)</span>
<span id="cb11-10">D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(N,))</span>
<span id="cb11-11"></span>
<span id="cb11-12">H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> V.conj().T</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Block encode the Hamiltonian.</span></span>
<span id="cb11-15">block_encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BlockEncoding(H)</span>
<span id="cb11-16">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_encoding.unitary</span>
<span id="cb11-17">P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_encoding.projector</span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parameters.</span></span>
<span id="cb11-20">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb11-21">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We will keep track of the approximation quality and degrees of approximating polynomials.</span></span>
<span id="cb11-24">accuracies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-25">degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ti <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> t:</span>
<span id="cb11-28"></span>
<span id="cb11-29">    U_phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-30">    total_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-31">    </span>
<span id="cb11-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct QSVT circuits for the cos and sin part separately.</span></span>
<span id="cb11-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep track of the total degree.</span></span>
<span id="cb11-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> target_function <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cos'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sin'</span>]:</span>
<span id="cb11-35">        p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trig_approximating_polynomial(ti, epsilon, target_function)</span>
<span id="cb11-36">        phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.angle_sequence.QuantumSignalProcessingPhases(p.coef, signal_operator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wx'</span>)</span>
<span id="cb11-37">        phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles_from_W_to_R(phis)</span>
<span id="cb11-38">        </span>
<span id="cb11-39">        total_degree <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(phis)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-40"></span>
<span id="cb11-41">        U_phi.append(apply_QSVT(U, P, P, phis))</span>
<span id="cb11-42">    </span>
<span id="cb11-43">    degrees.append(total_degree)</span>
<span id="cb11-44">    </span>
<span id="cb11-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unpack constructed sequences.</span></span>
<span id="cb11-46">    U_phi_cos, U_phi_sin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U_phi</span>
<span id="cb11-47">    </span>
<span id="cb11-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Select real parts of the singular values.</span></span>
<span id="cb11-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is not a trivial operation at circuit level.</span></span>
<span id="cb11-50">    H_cos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U_phi_cos[:N, :N]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>U_phi_cos[:N, :N].conj().T</span>
<span id="cb11-51">    H_sin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U_phi_sin[:N, :N]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>U_phi_sin[:N, :N].conj().T</span>
<span id="cb11-52">    </span>
<span id="cb11-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assemble even and odd parts into an exponential.</span></span>
<span id="cb11-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Again, not trivial at the circuit level.</span></span>
<span id="cb11-55">    H_transformed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> H_cos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>H_sin</span>
<span id="cb11-56">    </span>
<span id="cb11-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Quantify accuracy of the result by the operator norm wrt exact anser.</span></span>
<span id="cb11-58">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.norm(H_transformed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>scipy.linalg.expm(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>ti), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ord=2 == operator norm</span></span>
<span id="cb11-59">    accuracies.append(accuracy)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-2">plt.plot(t, accuracies)</span>
<span id="cb12-3">plt.axhline(epsilon, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb12-4">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>)</span>
<span id="cb12-5">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-6"></span>
<span id="cb12-7">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-8">plt.plot(t, degrees)</span>
<span id="cb12-9">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>)</span>
<span id="cb12-10">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polynomial degree'</span>)</span>
<span id="cb12-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Cost scaling'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb12-12"></span>
<span id="cb12-13">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-13-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Alright, so at least in the range we have chosen, the error remains below the threshold while the degree of the polynomial appears to scale linearly with <img src="https://latex.codecogs.com/png.latex?t">.</p>
</section>
</section>
<section id="solving-linear-systems" class="level1" data-number="9">
<h1 data-number="9"><span class="header-section-number">9</span> Solving linear systems</h1>
<p>Our final example will be a linear system solver. Let’s begin at the beginning.</p>
<section id="the-problem-2" class="level2" data-number="9.1">
<h2 data-number="9.1" class="anchored" data-anchor-id="the-problem-2"><span class="header-section-number">9.1</span> The problem</h2>
<p>Given a linear system <img src="https://latex.codecogs.com/png.latex?Ax=b"> we aim to compute <img src="https://latex.codecogs.com/png.latex?A%5E+b"> where <img src="https://latex.codecogs.com/png.latex?A%5E+"> is the Moore-Penrose pseudo-inverse, see Sec.&nbsp;3.4. Again, framing the problem in QSVT terms is rather trivial, we only need to apply <img src="https://latex.codecogs.com/png.latex?f(x)=%5Cfrac1x"> to the singular values of <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger">.</p>
</section>
<section id="watch-out-for-your-linear-system" class="level2" data-number="9.2">
<h2 data-number="9.2" class="anchored" data-anchor-id="watch-out-for-your-linear-system"><span class="header-section-number">9.2</span> Watch out for your linear system</h2>
<p>If the original operator <img src="https://latex.codecogs.com/png.latex?A"> can be block embedded all its singular values satisfy <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%5Cle1"> (if this is not so, we should block embed <img src="https://latex.codecogs.com/png.latex?A/%5Calpha"> with some <img src="https://latex.codecogs.com/png.latex?%5Calpha%3E1"> instead). But then <img src="https://latex.codecogs.com/png.latex?1/%5Csigma_i"> will necessarily be greater than 1 and so <img src="https://latex.codecogs.com/png.latex?A%5E+"> could not be block encoded into a unitary. Moreover, the function <img src="https://latex.codecogs.com/png.latex?%5Cfrac1x"> blows up at <img src="https://latex.codecogs.com/png.latex?x=0">, and there is no hope to approximate it with a polynomial. Both these problems hint that we need to make an assumption on the range of singular values.</p>
<p>We will assume that <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B%5Ckappa%7D%5Cle%5Csigma_i%5Cle1">, and <img src="https://latex.codecogs.com/png.latex?%5Ckappa"> is known as the condition number of the system. It is an important figure of merit for classical solvers as well. Now we can make the problem well-posed. Our goal is to approximate <img src="https://latex.codecogs.com/png.latex?f(x)=%5Cfrac%7B1%7D%7B2%5Ckappa%20x%7D"> for <img src="https://latex.codecogs.com/png.latex?x%5Cin%5B%5Cfrac%7B1%7D%7B%5Ckappa%7D,%201%5D">.</p>
<div class="callout callout-style-default callout-note no-icon callout-titled" title="Why one half?">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-14-contents" aria-controls="callout-14" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why one half?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-14" class="callout-14-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The additional factor <img src="https://latex.codecogs.com/png.latex?%5Cfrac12"> is included to make <img src="https://latex.codecogs.com/png.latex?%7Cf(x)%7C%5Cle%5Cfrac12">. If <img src="https://latex.codecogs.com/png.latex?f(x)"> reaches <img src="https://latex.codecogs.com/png.latex?1"> at the approximating range, then the polynomial approximation can reach <img src="https://latex.codecogs.com/png.latex?1+%5Cepsilon">, and will not be implementable by QSP. We can be more accurate and define the target function like <img src="https://latex.codecogs.com/png.latex?f(x)=%5Cfrac%7B1%7D%7B(1+%5Cepsilon)%5Ckappa%20x%7D">, or be less careful and simply put in the <img src="https://latex.codecogs.com/png.latex?%5Cfrac12"> factor.</p>
</div>
</div>
</div>
</section>
<section id="approximating-polynomial-1" class="level2" data-number="9.3">
<h2 data-number="9.3" class="anchored" data-anchor-id="approximating-polynomial-1"><span class="header-section-number">9.3</span> Approximating polynomial</h2>
<p>Alright, how do we expect the complexity of the algorithm to scale with <img src="https://latex.codecogs.com/png.latex?%5Ckappa,%20%5Cepsilon">?</p>
<p>Let’s quickly run the procedure of Sec.&nbsp;5.4. First make a linear transformation <img src="https://latex.codecogs.com/png.latex?y=%5Cfrac%7B2x-1-%5Ckappa%5E%7B-1%7D%7D%7B1-%5Ckappa%5E%7B-1%7D%7D"> that maps <img src="https://latex.codecogs.com/png.latex?%5B%5Ckappa%7B%5E-1%7D,1%5D"> to <img src="https://latex.codecogs.com/png.latex?%5B-1,1%5D">. We get <img src="https://latex.codecogs.com/png.latex?f(x(y))=%5Cfrac%7B%5Cfrac1%7B%5Ckappa+1%7D%7D%7By+%5Cfrac%7B%5Ckappa+1%7D%7B%5Ckappa-1%7D%7D%20%5C%20."></p>
<p>This function has a pole at <img src="https://latex.codecogs.com/png.latex?y=-%5Cfrac%7B%5Ckappa+1%7D%7B%5Ckappa-1%7D"> and is maximized in the Bernstein ellipse when <img src="https://latex.codecogs.com/png.latex?y"> approaches this pole along the real axis. For <img src="https://latex.codecogs.com/png.latex?y%5Cge-1-%5Cfrac%7B1%7D%7Bk+1%7D"> we can write <img src="https://latex.codecogs.com/png.latex?%7Cf(x(y))%7C%3C1"> Therfore, <img src="https://latex.codecogs.com/png.latex?f(x(y))"> is bounded by <img src="https://latex.codecogs.com/png.latex?1"> in a Bernstein ellipse <img src="https://latex.codecogs.com/png.latex?E_%5Crho"> of radius <img src="https://latex.codecogs.com/png.latex?%5Crho=1+%5Calpha"> with <img src="https://latex.codecogs.com/png.latex?%5Calpha%5E2=%5Cfrac%7B2%7D%7B%5Ckappa+1%7D">. Therefore, we can choose <img src="https://latex.codecogs.com/png.latex?%5Cdelta%5Csim%5Cfrac%7B1%7D%7B%5Ckappa%7D">. Note that <img src="https://latex.codecogs.com/png.latex?y(-1)=-3+O(%5Ckappa%7B-1%7D)"> and so we can choose <img src="https://latex.codecogs.com/png.latex?b=2">, this does not affect the complexity. Therefore, in this case we expect the degree of the approximating polynomial to scale as <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdeg%7Dp=O(%5Ckappa%5Clog%20%5Cfrac%7B%5Ckappa%7D%7B%5Cepsilon%7D%20)%5C%20."></p>
<p>A couple of quick comments.</p>
<ul>
<li>This scaling is a significant improvement to the original HHL algorithm, which runs in <img src="https://latex.codecogs.com/png.latex?O(%5Cfrac%7B%5Ckappa%5E2%5Clog%20N%7D%7B%5Cepsilon%7D)">. Apparently, this scaling is state-of-the-art result for quantum matrix inversion.</li>
<li>The matrix dimension <img src="https://latex.codecogs.com/png.latex?N"> does not enter our scaling explicitly. However, if the costs of block encoding <img src="https://latex.codecogs.com/png.latex?A"> are taken into account the result will likly scale with <img src="https://latex.codecogs.com/png.latex?N">.</li>
<li>Merely finding <img src="https://latex.codecogs.com/png.latex?A%5E%7B+%7D"> is not a end-to-end quantum algorithm. In practice, you would also need a way to load the vector <img src="https://latex.codecogs.com/png.latex?%7Cb%5Crangle"> in and be able to read out useful information from a quantum state <img src="https://latex.codecogs.com/png.latex?%7CA%5E%7B+%7Db%5Crangle">, which are no trivial considerations.</li>
<li>The post-selection probability to get <img src="https://latex.codecogs.com/png.latex?%7CA%5E+b%5Crangle"> is proportional to <img src="https://latex.codecogs.com/png.latex?%7C%5Cfrac%7B1%7D%7B2%5Ckappa%7DA%5E+b%7C%5E2%5Cge%20%5Cfrac%7B1%7D%7B4%5Ckappa%5E2%7D"> (the smallest singular value of <img src="https://latex.codecogs.com/png.latex?A%5E+"> is at least 1). It decays quadratically with <img src="https://latex.codecogs.com/png.latex?%5Ckappa">, but can be exponentially enhanced via a classical repetition or a quantum amplitude amplification.</li>
</ul>
</section>
<section id="implementation-3" class="level2" data-number="9.4">
<h2 data-number="9.4" class="anchored" data-anchor-id="implementation-3"><span class="header-section-number">9.4</span> Implementation</h2>
<p>Alright, let’s inmplement our final example. First let’s build and look at approximating polynomials.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> xinverse_approximating_polynomial(kappa, epsilon):</span>
<span id="cb13-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Polynomal approxiamtion to 1/(2*kappa*x)"""</span></span>
<span id="cb13-3">    </span>
<span id="cb13-4">    target_function <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.poly.PolyOneOverX()</span>
<span id="cb13-5">    coeffs, scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> quiet(target_function.generate)(kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>kappa, epsilon<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epsilon, return_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-6">    </span>
<span id="cb13-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For some reason, pyqsp returns 1/x*scale with some `scale`</span></span>
<span id="cb13-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># that might be different from 1/kappa. </span></span>
<span id="cb13-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We remove this scale from our polynomial.</span></span>
<span id="cb13-10">    </span>
<span id="cb13-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.polynomial.Polynomial(coeffs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kappa))</span>
<span id="cb13-12"></span>
<span id="cb13-13"></span>
<span id="cb13-14">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb13-15">kappa <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.5</span></span>
<span id="cb13-16"></span>
<span id="cb13-17">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb13-18">plt.ylim(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-19"></span>
<span id="cb13-20">plt.plot(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1/x'</span>)</span>
<span id="cb13-21">plt.fill_between(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>epsilon, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>epsilon, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>)</span>
<span id="cb13-22">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xinverse_approximating_polynomial(kappa, epsilon)</span>
<span id="cb13-23">plt.plot(x, p(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'polynomial approximation'</span>)</span>
<span id="cb13-24"></span>
<span id="cb13-25">plt.axvline(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kappa, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb13-26">plt.axvline(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kappa, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb13-27"></span>
<span id="cb13-28">plt.grid()</span>
<span id="cb13-29">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb13-30">plt.title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'kappa = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>kappa<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, epsilon=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epsilon<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">, degree=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>degree()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This seems right. Let’s also write a function to generate random linear sysmtes with matrices <img src="https://latex.codecogs.com/png.latex?A"> satisfying <img src="https://latex.codecogs.com/png.latex?A%5Cin%20%5Cmathbb%7BR%7D,%20%7C%7CA%7C%7C%5Cle1">. It’s nothing interesting, really.</p>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> random_A(kappa, num_qubits):</span>
<span id="cb14-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Construnct a random real operator A with ||A||&lt;1 and condition number &lt;= kappa.</span></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Size of A is n by m, which a both smaller than 2**num_qubits."""</span></span>
<span id="cb14-4"></span>
<span id="cb14-5">    N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb14-6"></span>
<span id="cb14-7">    n, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(N<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, N, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Lets make N&gt;= n,m &gt;= N/2</span></span>
<span id="cb14-8">    V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.stats.ortho_group.rvs(n, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-9">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scipy.stats.ortho_group.rvs(m, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb14-10"></span>
<span id="cb14-11">    singular_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.uniform(low<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kappa, high<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, m))</span>
<span id="cb14-12">    Sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n, m))</span>
<span id="cb14-13">    Sigma[:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, m), :<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(n, m)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.diag(singular_values)</span>
<span id="cb14-14"></span>
<span id="cb14-15">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W.conj().T</span>
<span id="cb14-16">    </span>
<span id="cb14-17">    </span>
<span id="cb14-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> A</span></code></pre></div>
</details>
</div>
<p>Now we are ready to proceed with the full-fledged QSVT application. This time we will look at how complexity scales with <img src="https://latex.codecogs.com/png.latex?%5Ckappa">. This scaling should be independent of other parameters.</p>
<div class="cell" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">seed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-2">np.random.seed(seed)</span>
<span id="cb15-3"></span>
<span id="cb15-4">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-5">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb15-6"></span>
<span id="cb15-7">epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb15-8">kappas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We will keep track of accuracies and polynomial degrees.</span></span>
<span id="cb15-11">errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-12">degrees <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-13"></span>
<span id="cb15-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> kappa <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> kappas:</span>
<span id="cb15-15"></span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate a random linear system.</span></span>
<span id="cb15-17">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random_A(kappa, num_qubits)</span>
<span id="cb15-18">    n, m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.shape</span>
<span id="cb15-19"></span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Block encode it.</span></span>
<span id="cb15-21">    block_encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BlockEncoding(A)</span>
<span id="cb15-22">    U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_encoding.unitary</span>
<span id="cb15-23">    P <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_encoding.projector</span>
<span id="cb15-24">    </span>
<span id="cb15-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine approximating polynomial and QSP angles.</span></span>
<span id="cb15-26">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> xinverse_approximating_polynomial(kappa, epsilon)</span>
<span id="cb15-27">    degrees.append(p.degree())</span>
<span id="cb15-28">    </span>
<span id="cb15-29">    phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pyqsp.angle_sequence.QuantumSignalProcessingPhases(p.coef, signal_operator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Wx'</span>)</span>
<span id="cb15-30">    phis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles_from_W_to_R(phis)</span>
<span id="cb15-31">    </span>
<span id="cb15-32">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The QSVT circuit itself.</span></span>
<span id="cb15-33">    U_phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apply_QSVT(U, P, P, phis)</span>
<span id="cb15-34">    </span>
<span id="cb15-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare with the exact pseudo-inverse via the operator norm.</span></span>
<span id="cb15-36">    exact_pseudo_inverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.pinv(A)</span>
<span id="cb15-37">    our_pseudo_inverse <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kappa<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.real(U_phi.conj().T)[:m, :n] </span>
<span id="cb15-38">    </span>
<span id="cb15-39">    error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.norm(our_pseudo_inverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>exact_pseudo_inverse, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ord</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-40">    errors.append(error)</span>
<span id="cb15-41">    </span>
<span id="cb15-42">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-43">plt.plot(kappas, errors)</span>
<span id="cb15-44">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Errors'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-45">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kappa'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-46">plt.axhline(epsilon, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>)</span>
<span id="cb15-47">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-48">plt.plot(kappas, degrees)</span>
<span id="cb15-49">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Complexity'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-50">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'degree'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-51">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kappa'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb15-52">plt.tight_layout()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This looks right, the error quantified by the operator norm stays below the threshold while the degree of the approximating polynomial seems to grow linearly. This wraps up the experiment.</p>
</section>
</section>
<section id="conclusion" class="level1" data-number="10">
<h1 data-number="10"><span class="header-section-number">10</span> Conclusion</h1>
<p>Come on, this post is already waay too long. I think skipping the conclusion is the way to go 😎. As always, feedback is highly appreciated.</p>




</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body">
<div id="ref-Martyn2021" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">J. M. Martyn, Z. M. Rossi, A. K. Tan, and I. L. Chuang, <em><a href="https://doi.org/10.1103/PRXQuantum.2.040203"><span class="nocase">A Grand Unification of Quantum Algorithms</span></a></em>, PRX Quantum <strong>2</strong>, (2021).</div>
</div>
<div id="ref-Tang2023" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">E. Tang and K. Tian, <em><a href="https://arxiv.org/abs/2302.14324v1"><span class="nocase">A CS guide to the quantum singular value transformation</span></a></em>, (2023).</div>
</div>
<div id="ref-ArrazolaQSVT" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">J. M. Arrazola, <em><a href="https://pennylane.ai/qml/demos/tutorial_intro_qsvt.html">Intro to QSVT</a></em>, (2023).</div>
</div>
<div id="ref-Gilyen2019" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">A. Gilyén, Y. Su, G. H. Low, and N. Wiebe, <em><a href="https://doi.org/10.1145/3313276.3316366"><span class="nocase">Quantum singular value transformation and beyond: Exponential improvements for quantum matrix arithmetics</span></a></em>, Proceedings of the Annual ACM Symposium on Theory of Computing 193 (2019).</div>
</div>
<div id="ref-GilyenThesis" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">A. Gilyén, <em><a href="https://dare.uva.nl/search?identifier=20e9733e-6014-402d-afa9-20f3cc4a0568">Quantum Singular Value Transformation&amp; Its Algorithmic Applications</a></em>, (2019).</div>
</div>
<div id="ref-pyqsp" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">I. Chuang and et al, <em><a href="https://github.com/ichuang/pyqsp">Pyqsp: Quantum Signal Processing</a></em>, (2022).</div>
</div>
<div id="ref-Chebyshev" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">J. Sachs, <em><a href="https://www.embeddedrelated.com/showarticle/152.php">Chebyshev Approximation and How It Can Help You Save Money, Win Friends, and Influence People</a></em>, (2012).</div>
</div>
</div></section></div> ]]></description>
  <category>quantum concepts</category>
  <category>paper review</category>
  <guid>https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/index.html</guid>
  <pubDate>Tue, 06 Jun 2023 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/quantum_singular_value_transformation_intro/figures/main_qsvt.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>What will a quantum computer be good for, exactly?</title>
  <link>https://idnm.github.io/blog/posts/what_to_do_with_a_quantum_computer/what_to_do_with_a_quantum_computer.html</link>
  <description><![CDATA[ 




<section id="is-this-even-a-real-question" class="level1">
<h1>Is this even a real question?</h1>
<p>This post will be a bit different from others, in that I’ll try to give a high level review instead of diving in detail into a specific topic. Also, since this is my personal blog, I figured I will give some personal background on this one.</p>
<p>I got involved in the field of quantum computing relatively recently, in 2021. Before that, while working in theoretical physics, I didn’t even know the field exists, let alone is taking off at the industrial scale (yes, I’m known for my breadth of knowledge). After the transition into quantum, I’ve tried to catch up on many levels – from understanding the fundamentals, to getting up to speed with state of the art in hardware and algorithms, to carrying out some original research. Although I made some progress in all directions, you can imagine how fragmented and incomplete my picture of the field is. While there is still a ton of topics I’d like to understand better, one particular question have been sitting on the back of my mind for quite a while.</p>
<p><strong><em>What quantum computers will actually be good for?</em></strong></p>
<p>ChatGPT is probably a good way to summarize a folk knowledge. So, I asked it this exact question and got a pretty long list (click to unfold).</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled" title="Sure, here's a numbered list of some potential applications of quantum computers:">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Sure, here’s a numbered list of some potential applications of quantum computers:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>Cryptography: Quantum computers have the potential to break many of the currently used encryption methods and could be used to develop new, more secure encryption methods that are resistant to quantum attacks.</li>
<li>Optimization: Quantum computers could be used to solve optimization problems exponentially faster than classical computers, potentially revolutionizing industries ranging from finance to transportation to healthcare.</li>
<li>Chemistry and materials science: Quantum computers can simulate the behavior of molecules and materials at the quantum level, which could help in the development of new drugs and materials.</li>
<li>Machine learning and artificial intelligence: Quantum computers could potentially outperform classical computers in tasks such as image and speech recognition, which could have applications in areas such as autonomous vehicles and robotics.</li>
<li>Financial modeling: Quantum computers could be used to quickly analyze large amounts of financial data and predict stock prices or other market trends.</li>
<li>Supply chain optimization: Quantum computers could be used to optimize supply chain operations, such as routing and scheduling, to improve efficiency and reduce costs.</li>
<li>Weather forecasting: Quantum computers could be used to simulate complex weather patterns and improve the accuracy of weather forecasting.</li>
<li>Energy production: Quantum computers could be used to optimize energy production and distribution, potentially reducing energy costs and improving energy efficiency.</li>
<li>Particle physics: Quantum computers could be used to analyze data from particle accelerators and help physicists understand the behavior of particles at the subatomic level.</li>
<li>Transportation: Quantum computers could be used to optimize transportation networks, including traffic flow, route planning, and logistics.</li>
</ol>
</div>
</div>
</div>
<p>And indeed, all these topics, and many more, are frequently covered in popular discussions and technical papers on quantum computing. Probably for a non-expert, it would be nearly impossible to critically sort through these and resist the impression that quantum computers will be good for everything (and soon). However, my exposure to the field already made me skeptical about many of the usually proposed applications. And I felt a pressing need to sort this out for myself. I now feel like I’ve mostly done my homework on this one, and here is what I found.</p>
<p><strong><em>We don’t really know yet what quantum computers will be good for.</em></strong></p>
<p>And among the zoo of proposed applications, most are rather speculative, while a single one seems to stand out as most promising. You can read on to see what I have to back up these claims, or jump directly to the very short summary section (Section&nbsp;10).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://idnm.github.io/blog/posts/what_to_do_with_a_quantum_computer/what_to_use_qc_for.svg" class="img-fluid figure-img" width="800"></p>
</figure>
</div>
<section id="disclaimers" class="level2">
<h2 class="anchored" data-anchor-id="disclaimers">Disclaimers</h2>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I will specifically focus on quantum computation, not sensing or communication. Moreover, I will look for practical, useful problems, not just any possible demonstration of quantum advantage.</p>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>As mentioned, my expertise in the field is limited. So take my assessment critically. I will cite many sources, but of course they are subject to my selection bias. Also, I’m more than happy to be proven wrong in this case. Feel free to leave the feedback.</p>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I do not attempt to make the references comprehensive, e.g.&nbsp;I won’t cite original work of Grover or Shor. This is a blog post, come on. On the contrary, I will try to limit citations to those directly relevant to my arguments.</p>
</div>
</div>
</section>
</section>
<section id="types-of-quantum-algorithms" class="level1">
<h1>Types of quantum algorithms</h1>
<p>While there are a great many specific versions of quantum algorithms (see a pretty comprehensive list at <span class="citation" data-cites="zoo">&nbsp;[1]</span>), they can be divided in a few broad categories. Back in 2003 the one and only Peter Shor wrote a short essay “Why haven’t more quantum algorithms been found?” <span class="citation" data-cites="Shor2003">&nbsp;[2]</span>. There he points out three main types of quantum algorithms that were known to date.</p>
<ul>
<li>Those using the quantum Fourier transform to find periodicity. The most famous example is the integer factoring algorithm due to Shor himself.</li>
<li>Algorithms similar or derived from Grover’s search.</li>
<li>Algorithms for quantum simulation.</li>
</ul>
<p>By the way, if you are interested “why haven’t more quantum algorithms been found”, then according to Shor, it is probably because (1) quantum algorithms are so unusual that we do not have a good way to think about and invent them or (2) maybe there are just a few quantum algorithms, after all. You may wonder how much have changed in the past 20 years. Apparently, not that much. I would add three more positions to the list.</p>
<ul>
<li>Big data/machine learning algorithms, e.g.&nbsp;HHL algorithm.</li>
<li>NISQ “algorithms”.</li>
<li>Algorithms for quantum data.</li>
</ul>
<p>The key new addition here is the class of big data/machine learning algorithms. The most important example is an algorithm for linear systems, discovered by Harrow, Hassidim and Lloyd and known as HHL algorithm. Another broad class is NISQ algorithms, of which variational quantum algorithms (VQA) are the primary example. Finally, there is a new paradigm emerging, which asks if we can do more with a quantum computer if our data is not classical, but quantum. I will discuss each of them in turn.</p>
<p>As far as I can tell, that’s basically it. Of course, there have been a great deal of progress since 2003 in finding new applications for the existing primitives, refining their efficiency, and even building unifying frameworks (see e.g. <span class="citation" data-cites="Martyn2021">&nbsp;[3]</span>). But the broad classification outlined above still seems to apply. I list a number of omissions in section Section&nbsp;9, and I’m happy to expand it base on the feedback.</p>
</section>
<section id="wait-isnt-the-quantum-advantage-already-here" class="level1">
<h1>Wait, isn’t the quantum advantage already here?</h1>
<p>Before going through the list sketched above, let’s briefly touch on the quantum advantage experiments. They certainly made a big splash, and call to be addressed. So far, four groups reported quantum advantage. The first and most known result comes from Google <span class="citation" data-cites="Arute2019">&nbsp;[4]</span>, then there were two academic groups in China <span class="citation" data-cites="Wu2021">&nbsp;[5]</span>-<span class="citation" data-cites="Zhong2020">&nbsp;[6]</span>, and last year it was Xanadu <span class="citation" data-cites="Madsen2022">&nbsp;[7]</span>. All these quantum advantage experiments were in <em>sampling</em> tasks, meaning the goal was to sample from a certain probability distribution that is believed to be hard to sample from classically. While debates up to this day continue on whether these quantum advantage experiments can in fact be spoofed by a classical computer, I’m willing to assume that the sampling tasks of this kind give a real and short-term achievable quantum advantage.</p>
<p>The problem is, <em>no useful applications of these sampling tasks</em> are known. This claim may sound too strong, as there are papers proposing different uses. For example, here is a review from Xanadu on possible applications of the Gaussian Boson Sampling <span class="citation" data-cites="Bromley2019">&nbsp;[8]</span>. Unfortunately, these are only heuristics. I’m not familiar with this subfield in any technical detail, so my argument is a behavioral one. Since these sampling experiments are already available, there is a huge incentive to produce practical results or at least come up with strong theoretical proposals. And this does not seem to be happening. Until I’ll see a surge of activity in this area, I’ll assume these sampling experiments are unfortunately not useful.</p>
<p>I must admit this is bothering me. We found something, that quantum computers can do better than classical, why can’t we use it? There must be a way, right? If we can’t, is there a good explanation? I don’t know one, but my discomfort was a bit relieved after reading a perspective by Harrow and Montanaro <span class="citation" data-cites="Harrow2018">&nbsp;[9]</span>. There, they introduce sampling experiments as computational analogs of Bell’s experiments. Indeed, although <a href="https://idnm.github.io/blog/posts/entanglement/2021-07-12-entanglement.html">we know</a> that quantum correlations can be stronger than classical, this does not lead directly to useful applications. Alright, I’ll leave it at that.</p>
</section>
<section id="nisq-algorithms-dont-work" class="level1">
<h1>NISQ algorithms don’t work</h1>
<p>Noisy-Intermediate-Scale-Quantum (NISQ) algorithms <span class="citation" data-cites="Bharti2022">&nbsp;[10]</span> account for most of the prospective applications of quantum computing, or at least you can get such an impression. There are NISQ algorithms for almost everything – optimization, machine learning, simulation, and even NISQ versions of algorithms such as factoring or HHL. However, these “algorithms” are in fact heuristics that come with many theoretical and practical problems. Let’s take a closer look.</p>
<section id="variational-quantum-algorithms" class="level2">
<h2 class="anchored" data-anchor-id="variational-quantum-algorithms">Variational quantum algorithms</h2>
<p>The main bundle of NISQ algorithms are variational quantum algorithms (VQA) <span class="citation" data-cites="Cerezo2020">&nbsp;[11]</span>. The two most studied examples are Quantum Approximate Optimization Algorithm (QAOA) and Variational Quantum Eigensolver (VQE). QAOA mostly focuses on ground state preparation for classical Ising Hamiltonians, which in facts covers a huge range of problems related to combinatorial optimization. VQE typically addresses Hamiltonians that arise from physics or chemistry, but largely does the same thing. I think the line between different types of VQA is quite blurry.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Variational quantum algorithms" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Variational quantum algorithms
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Quite generally, variational quantum algorithms aim to find a low energy state of some Hamiltonian <img src="https://latex.codecogs.com/png.latex?H"> encoding the problem of interest. They start with a trivial quantum state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and apply a parameterized quantum circuit to it <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)%7C0%5Crangle">. The resulting energy <img src="https://latex.codecogs.com/png.latex?E(%5Ctheta)=%5Clangle0%7CU%5E%5Cdagger(%5Ctheta)HU(%5Ctheta)%7C0%5Crangle"> is minimized by adjusting parameters <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> classically.</p>
<p>Parameterized quantum circuits <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)"> can be informed by the problem as in QAOA, which seeks to approximate the adiabatic evolution, or completely problem-agnostic as in Hardware-Efficient ansatze.</p>
</div>
</div>
</div>
<p>Here is my simple-minded and a bit cynic take on the idea behind variational quantum “algorithms”, which I think would be better called heuristics. Real quantum algorithms (without quotes) typically require circuits that are very deep. The current generation of quantum devices is pretty inaccurate, errors in two-qubit gates are of the order of <img src="https://latex.codecogs.com/png.latex?0.1-1%5C%25">. If you apply many gates, there will be nothing but noise at the output, and the computation is not useful. VQA approach the problem as follows. Alright, we do not know algorithms with shallow circuits, but let’s try to build some. We’ll prepare a quantum circuit that is sufficiently shallow to have a non-zero signal-to-noise ratio, and introduce <em>parameters</em> in there. While we do not know if any values of these parameters correspond to a useful computation, let’s try to adjust them (classical optimization loop) so that the circuit does something useful.</p>
<p>I mean, it is not a bad idea, and in many respects similar to how classical machine learning works. The problem seems to be, the current hardware only allows circuits so shallow, that you may optimize them all you want, no interesting results will follow. Another practical problem is that evaluation of the energy function <img src="https://latex.codecogs.com/png.latex?E(%5Ctheta)"> requires taking a ton of samples, which is slow and expensive. On the theoretical side, the loss landscape of most VQA appears to be pretty terrible, featuring barren plateaus and many bad local minimums. So even with a perfect hardware, there are no guarantees for good results.</p>
</section>
<section id="quantum-machine-learning" class="level2">
<h2 class="anchored" data-anchor-id="quantum-machine-learning">Quantum machine learning</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Supervised quantum machine learning models" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Supervised quantum machine learning models
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>A typical quantum model for a supervised learning task looks very similar to VQA instances described above <img src="https://latex.codecogs.com/png.latex?E(x,%5Ctheta)=%5Clangle0%7CU%5E%5Cdagger(x,%5Ctheta)%20H%20U(x,%5Ctheta)%7C0%5Crangle%20%5C%20."> Only here, part of the parameters <img src="https://latex.codecogs.com/png.latex?x"> are now not model “weights” to be adjusted, but instead encode the training data. The rest of the parameters <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> are to be optimized to yield a better loss function <img src="https://latex.codecogs.com/png.latex?E(x,%5Ctheta)">.</p>
</div>
</div>
</div>
<p>Quantum machine learning (QML) <span class="citation" data-cites="Biamonte2017">&nbsp;[12]</span> sounds quite fancy, but it shares much of the problems with VQA. Additional questions you might ask about QML models is whether they have and edge over classical in data encoding, expressivity, generalize better etc. To the best of my understanding, all claims that some QML models are somehow better than classical counterparts are heuristic, inconclusive, or only work for extremely artificial datasets. Moreover, let me quote a recent perspective <span class="citation" data-cites="Schuld2022">&nbsp;[13]</span> by Schuld and Killoran titled “Is quantum advantage the right goal for quantum machine learning?”</p>
<blockquote class="blockquote">
<p>Contrary to commercial expectations – machine learning may turn out to be one of the hardest applications to show a practical quantum advantage for.</p>
</blockquote>
<p>Why? By all means take a look at the paper if you are interested, but a short answer is that</p>
<blockquote class="blockquote">
<p>Quantum machine learning research is trying to beat large, high-performing algorithms for problems that are conceptually hard to study.</p>
</blockquote>
<p>In other words, classical machine learning is so efficient it sets a very high bar; it’s hard to theoretically analyze how it works, let alone prove quantum advantage; and we can’t collect any meaningful empirical data on QML because we only have toy hardware yet.</p>
</section>
<section id="noisy-summary" class="level2">
<h2 class="anchored" data-anchor-id="noisy-summary">Noisy summary</h2>
<p>There are many more versions of NISQ algorithms beyond VQA and QML. However, they all come with significant challenges. I quote an extensive recent review <span class="citation" data-cites="Bharti2022">&nbsp;[10]</span></p>
<blockquote class="blockquote">
<p>At the moment of documenting this review, there is no known demonstration of industrially relevant quantum advantage.</p>
</blockquote>
<p>On top of that, to the best of my knowledge, there are also no theoretical guarantees that NISQ algorithms can lead to quantum advantage at all. So, NISQ algorithms seemed like a low-hanging fruit, but despite all the work of the past years, useful applications have not been demonstrated. Even the industry now seems to become less optimistic about NISQ, and focus more on the fault-tolerant algorithms, and so will we.</p>
</section>
</section>
<section id="error-correction-eats-polynomial-speedups" class="level1">
<h1>Error correction eats polynomial speedups</h1>
<p>One of the earliest discovered, best known, and simplest to explain quantum algorithms is due to Lov Grover.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Grover's algorithm" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-7-contents" aria-controls="callout-7" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Grover’s algorithm
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-7" class="callout-7-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Grover’s algorithm is often described as a search through an unstructured database. When there are <img src="https://latex.codecogs.com/png.latex?N"> entries and no structure to the database whatsoever, classically you need to make <img src="https://latex.codecogs.com/png.latex?N/2"> queries on average to find what are you looking for. Grover’s algorithm allows using about <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7BN%7D"> quantum queries, yielding a quadratic speed-up.</p>
</div>
</div>
</div>
<p>Although Grover’s algorithm is one of the central results in quantum computing, there are many ways to challenge its practical significance <span class="citation" data-cites="AaronsonGrover">&nbsp;[14]</span>. Here I will focus on a particular one, associated with the cost of its fault-tolerant implementation. This line of attack is important because it applies to many other algorithms with polynomial speed-ups, including variants of quantum optimization, Monte-Carlo, some machine learning tasks, etc.</p>
<p>As discussed in the NISQ section, decoherence and gate errors make it impossible to run deep circuits on current devices. Sure, we expect that the error rates will go down in the future, but even orders of magnitude improvements won’t be enough. The principle answer to this challenge is error correction and fault-tolerant computation. By encoding the logical states in many physical qubits it is possible to arbitrarily suppress effective error rates. Asymptotically, the overhead of error correction in terms of physical to logical qubit ratio is polylog, and looks insignificant. However, the constant factors involved can be a dealbreaker. What follows below is my coarse rundown based on papers <span class="citation" data-cites="Babbush2020">&nbsp;[15]</span> and <span class="citation" data-cites="Hoefler2023">&nbsp;[16]</span>.</p>
<p>In the dominating paradigm of fault-tolerant computing, the bottleneck is in production of the magic states. Roughly, one magic state is consumed to perform a single non-trivial computational primitive, such as the Toffoli gate. Producing a single magic state involves hundreds of physical qubits, multiple code cycles, and a lot of the classical processing to guide the behavior of the quantum system. Rough estimations show that executing a single Toffoli gate can be 10 <em>orders</em> of magnitude slower than executing the NAND gate, its classical counterpart. This looks troublesome, doesn’t it?</p>
<p>But won’t this huge constant factor become irrelevant for large enough problem sizes? After all, we have a quadratic speed-up. Yes it will, but you should also consider how big that problem will be. Because the quantum computer starts with this huge handicap, it can take years of runtime to catch up with a classical solver. So the problem sizes where you would see the quantum advantage are so large, that they will take too long to solve even for a quantum computer. So this scenario does not look practical, in the end.</p>
<p>With very optimistic projections of how quantum computing will progress, problems with higher polynomial speed-ups, say quartic, become to look feasible. However, it appears that problems with exponential speed-up are really our best bet, and so we turn to them.</p>
</section>
<section id="breaking-rsa-is-not-a-big-deal" class="level1">
<h1>Breaking RSA is not a big deal</h1>
<p>It was a true breakthrough by Shor to show that the integer factoring problem can be solved efficiently by a quantum computer, exponentially faster than with any known classical algorithm. While you’d still need a huge fault-tolerant machine to pull that out in practice <span class="citation" data-cites="Gidney2021">&nbsp;[17]</span>, Shor’s algorithm does defy most of the objections aplicable to other quantum algorithms.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Shor's algorithm" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-8-contents" aria-controls="callout-8" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shor’s algorithm
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-8" class="callout-8-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Shor’s algorithm allows factoring an integer into primes in time scaling polynomially with the number of digits. It is probably one of the hardest among the archetypical quantum algorithms to explain. However, the difficult part is entirely in the classical pre- and post-processing steps, where the factoring problem is reduced to finding a period of some function and factorization is extracted from an approximate solution.</p>
<p>The key quantum subroutine used is the quantum Fourier transform (QFT), which is simple to sketch. By definition, starting with a computational basis state <img src="https://latex.codecogs.com/png.latex?%7Cn%5Crangle"> it prepares a linear combination of all basis states <img src="https://latex.codecogs.com/png.latex?%7Cm%5Crangle"> with amplitudes given by the coefficients of the discrete Fourier transform.</p>
<p><img src="https://latex.codecogs.com/png.latex?QFT%7Cn%5Crangle%20=%20%5Cfrac%7B1%7D%7B%5Csqrt%7BN%7D%7D%5Csum_%7Bm%5Cin%5C%7B0,1%5C%7D%5EN%7D%20e%5E%7B2%5Cpi%20i%20%5Cfrac%7Bnm%7D%7BN%7D%7D%7Cm%5Crangle"></p>
<p>The Fourier transform of a periodic function is peaked at the values related to the period, so that it exposes the information about the original prime factorization problem. The important part is that the quantum Fourier transform can be implemented efficiently, i.e.&nbsp;by a polynomially-sized quantum circuit.</p>
</div>
</div>
</div>
<p>The only problem – <em>it is not really useful</em>. Yes, you can break RSA, but so what? There are other encryption schemes that so far seem to be safe against quantum adversaries. Once the quantum computers of necessary scale are available, the cryptographic world will need to adjust, and there will be some potential for adventures in the meantime. But in the end, the impact will be quite limited. Quoting Matthias Troyer <span class="citation" data-cites="HPQC">&nbsp;[18]</span></p>
<blockquote class="blockquote">
<p>So factoring might fund most of the field now, it’s not a killer app in the end.</p>
</blockquote>
<p>Now, there are other applications of factoring beyond cracking RSA, as there are other period-finding algorithms exploiting QFT, but these are mostly very special number-theoretic problems. While useful in principle, they seem much too limited in scope to provide the impact we expect from the quantum computing.</p>
</section>
<section id="big-data-algorithms-are-tricky" class="level1">
<h1>Big data algorithms are tricky</h1>
<p>There is a large class of quantum algorithms that can be broadly described as big data or (fault-tolerant) quantum machine learning algorithms. The initial inspiration and the key subroutine in many of them is provided by HHL algorithm, allowing to efficiently solve large systems of linear equations. Other options include clustering, support vector machines, principal component analysis, differential equations etc.</p>
<div class="callout callout-style-default callout-note callout-titled" title="HHL algorithm" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-9-contents" aria-controls="callout-9" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
HHL algorithm
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-9" class="callout-9-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>HHL is often described as an algorithm to solve a linear system of <img src="https://latex.codecogs.com/png.latex?N"> equations</p>
<p><img src="https://latex.codecogs.com/png.latex?Ax=b"></p>
<p>in time scaling as <img src="https://latex.codecogs.com/png.latex?%5Clog%20N">, providing an exponential speed-up over classical algorithms. This scaling really requires an explanation, since even writing down the full solution <img src="https://latex.codecogs.com/png.latex?(x_1,%5Cdots,%20x_N)"> would take <img src="https://latex.codecogs.com/png.latex?O(N)"> time and negate the speed-up.</p>
<p>HHL assumes that vector <img src="https://latex.codecogs.com/png.latex?b"> is as available as a quantum state <img src="https://latex.codecogs.com/png.latex?%7Cb%5Crangle"> belonging to <img src="https://latex.codecogs.com/png.latex?%5Clog%20N"> dimensional Hilbert space, whose amplitudes encode the entries of <img src="https://latex.codecogs.com/png.latex?b">. Similarly, the output of the algorithm is a quantum state <img src="https://latex.codecogs.com/png.latex?%7Cx%5Crangle">, and not its individual amplitudes. To produce the solution, one needs to apply operator <img src="https://latex.codecogs.com/png.latex?e%5E%7B-iAt%7D">, which only allows an efficient quantum circuit for very special types of matrices <img src="https://latex.codecogs.com/png.latex?A">. Finally, the matrix <img src="https://latex.codecogs.com/png.latex?A"> also needs to be well conditioned, meaning that the ratio of its highest to lowest eigenvalue is not too large (does not scale polynomially with <img src="https://latex.codecogs.com/png.latex?N">).</p>
</div>
</div>
</div>
<p>There are fundamental factors limiting applicability of the big data algorithms. My discussion here is mostly based on a short and wonderfully written commentary piece by Scott Aaronson “Read the fine print” <span class="citation" data-cites="Aaronson2015">&nbsp;[19]</span>. The big data quantum algorithms aim to provide an exponential speed-up to tasks like matrix inversion, which take polynomial time classically. Which means, quantum algorithms need to be done in logarithmic time. But in general, <img src="https://latex.codecogs.com/png.latex?%5Clog%20N"> time is not even sufficient to read in the problem specification, say <img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20N"> matrix, or output a full solution, say an <img src="https://latex.codecogs.com/png.latex?N">-dimensional vector.</p>
<p>Thus, big data algorithms assume that the initial data is encoded as amplitudes of quantum states <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_0%5Crangle"> in a Hilbert space of dimension <img src="https://latex.codecogs.com/png.latex?%5Clog%20N">, and output a solution in the same form <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle">. Hence, you need a very efficient way to load or generate the input data in your quantum memory, and be able to read out interesting results from a few expectation values of <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> (instead of all of its amplitudes). An operator transforming <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_0%5Crangle"> to <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> also requires an efficient quantum circuit implementation and can not correspond, say, to a general <img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20N"> matrix.</p>
<p>Finally, after you’ve restricted the problem in all these ways, it gets harder to exclude that some classical algorithm can take advantage of all the additional structure to run equally fast. This is not just a pedantic remark to wave away. Recently, many of the machine learning algorithms have been “de-quantized”, i.e.&nbsp;their efficient classical substitutes have been found <span class="citation" data-cites="Tang2022">&nbsp;[20]</span>. While de-quantized algorithms typically impose even more constraints on a problem, e.g.&nbsp;that the linear problem be low-rank <span class="citation" data-cites="Arrazola">&nbsp;[21]</span>, and can be polynomially slower, they add another layer of subtlety to finding big data algorithms with quantum advantage.</p>
<p>While not insurmountable, all these considerations are highly restrictive in practice. The HHL algorithm appeared in 2009, and in his 2015 essay Scott Aaronson mentions only two (and somewhat contrived) end-to-end proposals addressing all the caveats. Probably there are more today, but I do not know of a well-established useful big data problem that is just waiting for an appropriate fault-tolerant machine to appear to rock the world. I’ll still mention an interesting recent proposal <span class="citation" data-cites="Liu2023">&nbsp;[22]</span>, which aims to accelerate the training of <em>classical</em> neural networks. I also can’t resist quoting this passage from the paper</p>
<blockquote class="blockquote">
<p>Frankly, the core thesis of this work is that a main application of quantum computers may be in the training of classical neural networks.</p>
</blockquote>
</section>
<section id="the-boring-old-stuff-quantum-simulation" class="level1">
<h1>The boring old stuff: quantum simulation</h1>
<section id="quantum-dynamics" class="level2">
<h2 class="anchored" data-anchor-id="quantum-dynamics">Quantum dynamics</h2>
<p>Quantum simulation is the application that is often cited as having kick-started the field. At the same time, it is still widely believed to have the best shot at useful quantum advantage.</p>
<p>It is a very natural application, since no convoluted procedure to fold and squeeze a classical problem into a quantum domain is required. Instead, it looks at the task that is obviously quantum in origin, and proposes an efficient way to solve it with a quantum computer.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Quantum Simulation" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-10-contents" aria-controls="callout-10" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quantum Simulation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-10" class="callout-10-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Quantum simulation is designed to take an initial quantum state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_0%5Crangle"> and carry out its evolution under some Hamiltonian <img src="https://latex.codecogs.com/png.latex?H">, i.e.&nbsp;to find</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi(t)%5Crangle=e%5E%7B-iHt%7D%7C%5Cpsi_0%5Crangle%20%5C%20."></p>
<p>For a Hamiltonian which is sparse, e.g.&nbsp;consists of not too many local terms <img src="https://latex.codecogs.com/png.latex?H=%5Csum_k%7BH_k%7D">, one can use the Trotter-Suzuki approximation <img src="https://latex.codecogs.com/png.latex?e%5E%7B(A+B)%5CDelta%20t%7D=e%5E%7BA%5CDelta%20t%7De%5E%7BB%5CDelta%20t%7D+O(%5CDelta%20t%5E2)"> to reduce the simulation of the full Hamiltonian evolution over some small time period <img src="https://latex.codecogs.com/png.latex?%5CDelta%20t"> to a simulation of separate local terms, which is in principle straightforward</p>
<p><img src="https://latex.codecogs.com/png.latex?e%5E%7B-i%20H%20%5CDelta%20t%7D=%5Cprod_k%20e%5E%7B-i%20H_k%20%5CDelta%20t%7D+O(%5CDelta%20t%5E2)%20%5C%20."></p>
<p>Evolution over a finite time period <img src="https://latex.codecogs.com/png.latex?t"> can then be produced by a sequence of short evolutions <img src="https://latex.codecogs.com/png.latex?e%5E%7B-iHt%7D=%5Cleft(e%5E%7B-iH%5CDelta%20t%7D%5Cright)%5E%7B%5Cfrac%7Bt%7D%7B%5CDelta%20t%7D%7D">. The error coming from “Trotterization” of each small time step can be reduced by making <img src="https://latex.codecogs.com/png.latex?%5CDelta%20t"> smaller, at the cost of increasing the circuit depth polynomially.</p>
</div>
</div>
</div>
<p>While numerous classical methods for approximate simulation of quantum systems have been developed, with great success in many cases, they are not sufficient in general. This is another important point about the simulation problem – the difficulty of the classical approach is well appreciated, so quantum computer is really expected to make the difference here.</p>
<p>Is quantum simulation useful? I mean, it obviously is, but how exactly? There are definitely implications for fundamental science such as probing complicated quantum dynamics, new phases of matter, quantum chaos and so on. But what about designing a high-temperature superconductor or a new battery? Unfortunately, I am not aware of a rigorous connection between the ability to do quantum simulation and producing practically useful outcomes. So far it seems to be more about exploring the physics/chemistry with the new tools and beyond the regimes the current techniques allow. For this reason, it’s not clear that analog quantum simulators, which will be ultimately limited in their accuracy, will have applications beyond basic science <span class="citation" data-cites="Daley2022">&nbsp;[23]</span>.</p>
</section>
<section id="quantum-phase-estimation" class="level2">
<h2 class="anchored" data-anchor-id="quantum-phase-estimation">Quantum phase estimation</h2>
<p>There is another flavor of quantum simulation that leads to more deterministic results. The archetypical algorithm here is the quantum phase estimation (QPE).</p>
<div class="callout callout-style-default callout-note callout-titled" title="Quantum phase estimation" style="minimal">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-11-contents" aria-controls="callout-11" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quantum phase estimation
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-11" class="callout-11-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Quantum phase estimation (QPE) can be thought of as an efficient quantum circuit to perform a projective energy measurement.</p>
<p>It allows finding eigenvalues and preparing eigenstates of a Hamiltonian <img src="https://latex.codecogs.com/png.latex?H">, provided one can efficiently implement controlled evolution operators <img src="https://latex.codecogs.com/png.latex?e%5E%7B-iHt%7D">. Usually, QPE is formulated as an algorithm for finding eigenvalues of a unitary operator <img src="https://latex.codecogs.com/png.latex?U"> given its eigenstate <img src="https://latex.codecogs.com/png.latex?%7C%5Clambda%5Crangle"> with an unknown eigenvalue. QPE proceeds by applying powers of <img src="https://latex.codecogs.com/png.latex?U"> (<img src="https://latex.codecogs.com/png.latex?U,%20U%5E2,%20U%5E4,%5Cdots">) to state <img src="https://latex.codecogs.com/png.latex?%7C%5Clambda%5Crangle">, each controlled by its own auxiliary qubit. The state of the auxiliary qubits then contains a lot of information about <img src="https://latex.codecogs.com/png.latex?%5Clambda">, roughly one bit of accuracy per qubit, and this information can be efficiently revealed after performing a quantum Fourier transform on the auxiliary qubits.</p>
<p>If the original state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> is not an eigenstate of <img src="https://latex.codecogs.com/png.latex?U">, QPE performs a projective energy measurement. It will output some energy <img src="https://latex.codecogs.com/png.latex?E"> and prepare the corresponding state <img src="https://latex.codecogs.com/png.latex?%7C%5Clambda_E%5Crangle"> with probability proportional to the overlap of <img src="https://latex.codecogs.com/png.latex?%7C%5Clangle%5Cpsi%7C%5Clambda_E%5Crangle%7C%5E2">.</p>
</div>
</div>
</div>
<p>Quantum phase estimation can yield high-accuracy information about the eigenstates of a Hamiltonian. In many practical questions of quantum chemistry, this exactly what you want to know. There is a caveat, though. Most interesting in practice are ground and low-energy states, and for QPE to reveal information about them, the initial state for the algorithm needs to have sufficiently high overlap with low-energy states. In general this problem is QMA-hard (not expected to be efficiently solvable even on a quantum computer), and whether it is solvable in practical scenarios is still not settled conclusively <span class="citation" data-cites="Lee2022">&nbsp;[24]</span>.</p>
</section>
</section>
<section id="sec-missed" class="level1">
<h1>What did I miss?</h1>
<p>While I believe that the list of algorithms we went through captures all the main players competing for quantum advantage, it is of course not all comprehensive. Here I will mention some omissions. I also plan to extend this section based on feedback.</p>
<p>So here are some of the algorithms I didn’t mention, in no particular order.</p>
<ul>
<li>Quantum annealing. This is a NISQ optimization algorithm working on analog principles, and is subject to the same criticism as other NISQ algorithms. Mainly, it’s a heuristic (no theoretical guarantees) and a quantum advantage have not been demonstrated in practice.</li>
<li>As an example of new algorithmic developments, here is a recent paper <span class="citation" data-cites="Babbush2023">&nbsp;[25]</span> titled “Exponential quantum speedup in simulating coupled classical oscillators”. To my understanding, it is most similar to the big data algorithms described above, and shares the same limitations. In particular, I believe a practical application have not been identified.</li>
<li>Quantum computers can be provably efficient when the input data is quantum. E.g. a quantum computer can learn properties of a quantum state better <span class="citation" data-cites="Huang2021">&nbsp;[26]</span>. While a very interesting avenue, I believe it lacks practical use cases yet.</li>
</ul>
</section>
<section id="sec-summary" class="level1">
<h1>Short summary</h1>
<p>Here is a very short summary and some key references.</p>
<p>While it is easy to get an impression that quantum computers will be good for everything, finding a tangible and useful application appears to be really hard if you resist wishful thinking and insist on solid evidence.</p>
<ul>
<li>There is a NISQ algorithm for anything <span class="citation" data-cites="Bharti2022">&nbsp;[10]</span>. However, they try to make use of short noisy circuits, and this does not seem to work neither in practice nor in theory. In particular, this applies to NISQ machine learning <span class="citation" data-cites="Schuld2022">&nbsp;[13]</span>.</li>
<li>Algorithms with quadratic (and likely any polynomial) speed-ups become impractical once the cost of error correction is factored in <span class="citation" data-cites="Babbush2020">&nbsp;[15]</span>, <span class="citation" data-cites="Hoefler2023">&nbsp;[16]</span>.</li>
<li>While interesting theoretically, Shor’s and related algorithms are limited to a narrow range of number-theoretic problems. Breaking RSA is not a real application.</li>
<li>Big data/fault-tolerant machine learning algorithms only work under highly restrictive conditions <span class="citation" data-cites="Aaronson2015">&nbsp;[19]</span>, <span class="citation" data-cites="Tang2022">&nbsp;[20]</span>, and finding the right applications is an open problem.</li>
<li>Quantum simulation looks like the best bet. It is both naturally hard classically, and efficient quantumly. However, both quantum dynamics and quantum phase estimation come with their caveats that remain to be addressed <span class="citation" data-cites="Lee2022">&nbsp;[24]</span>.</li>
</ul>
<p>If you take this critical view to the extreme, there isn’t yet a single use-case for a quantum computer (even the future, fault-tolerant one) with a guaranteed impact. So not only the quantum hardware, but quantum algorithms themselves appear to still be under construction 🏗️.</p>
</section>
<section id="discussion" class="level1">
<h1>Discussion</h1>
<section id="nothing-ive-said-here-is-new" class="level2">
<h2 class="anchored" data-anchor-id="nothing-ive-said-here-is-new">Nothing I’ve said here is new</h2>
<p>If you think that the perspective taken in this blog post is in any way novel or radical, it’s not. While the points I made here are not often voiced or put in writing, many experts have been saying similar things for years. Here are some references.</p>
<ul>
<li>I highly recommend this talk <span class="citation" data-cites="HPQC">&nbsp;[18]</span> given by Matthias Troyer way back in 2014. Or a more recent one <span class="citation" data-cites="TPQA">&nbsp;[27]</span> from 2021. Interestingly, they are pretty similar in content, and in particular Troyer seems to entirely ignore the variational algorithms, and maybe for a good reason. There is also a recent short write-up by him and collaborators <span class="citation" data-cites="Hoefler2023">&nbsp;[16]</span>.</li>
<li>In a 2021 talk Ryan Babbush <span class="citation" data-cites="BabbushTalk">&nbsp;[28]</span> (in conclusions part) says that the community still needs to figure out, with clarity, what will quantum computers be useful for. He says this in the context of early fault-tolerant computation, but I think the point applies more broadly.</li>
<li>Here is a piece by a renowned condensed matter physicist Sankar Das Sarma <span class="citation" data-cites="Sarma">&nbsp;[29]</span>, arguing that potential applications of NISQ are highly overstated.</li>
<li>Here are two presentations by Owen Lockwood <span class="citation" data-cites="LockwoodNISQ">&nbsp;[30]</span>, <span class="citation" data-cites="LockwoodQML">&nbsp;[31]</span> critically assessing the state of NISQ algorithms and NISQ QML. Owen might not have the weight of other people I reference here, but I found his take on things original and informative.</li>
<li>Here is a pretty critical LinkedIn post by Victor Galitski <span class="citation" data-cites="Galitski">&nbsp;[32]</span>. It is again a mostly a critique of NISQ, with focus mainly on socio-economic rather than algorithmic side of things, but still worth a read.</li>
<li>Finally, I’ll mention this popular interview with John Preskill <span class="citation" data-cites="Preskill">&nbsp;[33]</span>, where he mentions (section ‘simulation’) that quantum simulation is still probably our best grounded expectation for practical quantum advantage.</li>
</ul>
</section>
<section id="i-may-have-a-bias-problem" class="level2">
<h2 class="anchored" data-anchor-id="i-may-have-a-bias-problem">I may have a bias problem</h2>
<p>Alright, you might have noticed that even this list gets increasingly less rigorous. My investigation, which started as a noble search for truth, quickly turned into a confirmation bias exercise. Indeed, I quite quickly started to err on the side that ‘we still don’t really know what quantum computers will be good for’, and enjoyed finding support for this view. While this may not be a great journalistic work, I still think this point of view is seriously underrepresented and worth voicing. At the same time, I’m really open to changing my mind, as I have all the reasons to want the field to succeed, and the sooner, the better.</p>
</section>
<section id="quantum-computing-is-gonna-be-a-rock-star-one-day" class="level2">
<h2 class="anchored" data-anchor-id="quantum-computing-is-gonna-be-a-rock-star-one-day">Quantum computing is gonna be a rock star one day</h2>
<p>I must also say that in the long run, a radical impact of quantum computing looks inevitable to me. This is a fundamentally new way of information processing, and this must make a difference. As Scott Aaronson have argued, if for fundamental reasons large scale quantum computers can never be built, it would be a new and revolutionary law of physics. I’d say that similarly, if we could ‘prove’ that quantum computers can not be useful, this would be a new remarkable law of nature worth discovering. From what we know now, it looks extremely unlikely. However, use cases for truly novel technologies are hard to forecast.</p>
</section>
<section id="what-looks-the-most-promising-at-the-moment" class="level2">
<h2 class="anchored" data-anchor-id="what-looks-the-most-promising-at-the-moment">What looks the most promising at the moment?</h2>
<p>In searching for practical quantum advantage, several requirements need to be met.</p>
<ol type="1">
<li>There must be a problem that a quantum computer can solve efficiently.</li>
<li>Evidence that a classical computer can’t.</li>
<li>Last but not least, the problem must be useful.</li>
</ol>
<p>If you think about it, this list is as much about the problem we want to solve as it is about the power of quantum algorithms. And finding the right problems, although possible in theory, turns out to be very challenging in practice.</p>
<p>It is exciting to try applying quantum algorithms to problems that appear to have no direct relation to the quantum world whatsoever. Basically, we start with (1) and then try to comply to (2) and (3). Say, we have an idea about how to solve certain large linear systems of equations and then try to find a subset of those that are useful and intractable classically. And while there may be gems on this path, a lot of evidence now shows that finding the right problems of this kind is really tricky. One early impressive success is Shor’s algorithm, but It may still be the only well-established example.</p>
<p>On the other hand, one can tackle obviously quantum-inspired problems. Quite recently, people started to look at cases when the input data is quantum rather than classical, and there the quantum advantage is already established, but no wide uses have been suggested yet. I’d say that the simulation of quantum systems for physics and chemistry appears to be our most grounded proposal for where to look for a practical quantum advantage. It addresses an obviously important problem known to be classically hard by decades of intensive research. So (2) and (3) are covered, and (1) also comes naturally. Indeed, people also often describe quantum simulation as a native task for a quantum computer. I quote an elegant passage from <span class="citation" data-cites="Daley2022">&nbsp;[23]</span></p>
<blockquote class="blockquote">
<p>This is the ‘native’ and most natural application of quantum computers, where we aim to use a quantum computer to mimic the rules that describe physical microscopic quantum systems. These problems are computationally challenging for the same underpinning reason that quantum computers can be powerful.</p>
</blockquote>
<p>Alright, I’ll leave it at that. As usual, any feedback is welcome.</p>




</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body">
<div id="ref-zoo" class="csl-entry">
<div class="csl-left-margin">[1] </div><div class="csl-right-inline">S. Jordan, <em><a href="https://quantumalgorithmzoo.org/">Quantum Algorithm Zoo</a></em>, (2022).</div>
</div>
<div id="ref-Shor2003" class="csl-entry">
<div class="csl-left-margin">[2] </div><div class="csl-right-inline">P. W. Shor, <em><a href="https://doi.org/10.1145/602382.602408"><span class="nocase">Why haven’t more quantum algorithms been found?</span></a></em>, Journal of the ACM (JACM) <strong>50</strong>, 87 (2003).</div>
</div>
<div id="ref-Martyn2021" class="csl-entry">
<div class="csl-left-margin">[3] </div><div class="csl-right-inline">J. M. Martyn, Z. M. Rossi, A. K. Tan, and I. L. Chuang, <em><a href="https://doi.org/10.1103/PRXQuantum.2.040203"><span class="nocase">A Grand Unification of Quantum Algorithms</span></a></em>, PRX Quantum <strong>2</strong>, (2021).</div>
</div>
<div id="ref-Arute2019" class="csl-entry">
<div class="csl-left-margin">[4] </div><div class="csl-right-inline">F. Arute et al., <em><a href="https://doi.org/10.1038/s41586-019-1666-5"><span class="nocase">Quantum supremacy using a programmable superconducting processor</span></a></em>, Nature 2019 574:7779 <strong>574</strong>, 505 (2019).</div>
</div>
<div id="ref-Wu2021" class="csl-entry">
<div class="csl-left-margin">[5] </div><div class="csl-right-inline">Y. Wu et al., <em><a href="https://doi.org/10.1103/PhysRevLett.127.180501"><span class="nocase">Strong quantum computational advantage using a superconducting quantum processor</span></a></em>, Physical Review Letters <strong>127</strong>, (2021).</div>
</div>
<div id="ref-Zhong2020" class="csl-entry">
<div class="csl-left-margin">[6] </div><div class="csl-right-inline">H.-S. Zhong et al., <em><a href="https://doi.org/10.1126/science.abe8770"><span class="nocase">Quantum computational advantage using photons</span></a></em>, Science <strong>370</strong>, 1460 (2020).</div>
</div>
<div id="ref-Madsen2022" class="csl-entry">
<div class="csl-left-margin">[7] </div><div class="csl-right-inline">L. S. Madsen et al., <em><a href="https://doi.org/10.1038/s41586-022-04725-x"><span class="nocase">Quantum computational advantage with a programmable photonic processor</span></a></em>, Nature 2022 606:7912 <strong>606</strong>, 75 (2022).</div>
</div>
<div id="ref-Bromley2019" class="csl-entry">
<div class="csl-left-margin">[8] </div><div class="csl-right-inline">T. R. Bromley, J. M. fla, S. Jahangiri, J. Izaac, N. Quesada, A. D. Gran, M. Schuld, J. Swinarton, Z. Zabaneh, and N. Killoran, <em><a href="https://doi.org/10.1088/2058-9565/ab8504"><span class="nocase">Applications of Near-Term Photonic Quantum Computers: Software and Algorithms</span></a></em>, Quantum Science and Technology <strong>5</strong>, (2019).</div>
</div>
<div id="ref-Harrow2018" class="csl-entry">
<div class="csl-left-margin">[9] </div><div class="csl-right-inline">A. W. Harrow and A. Montanaro, <em><a href="https://doi.org/10.1038/nature23458"><span class="nocase">Quantum computational supremacy</span></a></em>, Nature <strong>549</strong>, 203 (2017).</div>
</div>
<div id="ref-Bharti2022" class="csl-entry">
<div class="csl-left-margin">[10] </div><div class="csl-right-inline">K. Bharti et al., <em><a href="https://doi.org/10.1103/RevModPhys.94.015004"><span class="nocase">Noisy intermediate-scale quantum algorithms</span></a></em>, Reviews of Modern Physics <strong>94</strong>, 015004 (2022).</div>
</div>
<div id="ref-Cerezo2020" class="csl-entry">
<div class="csl-left-margin">[11] </div><div class="csl-right-inline">M. Cerezo et al., <em><a href="https://doi.org/10.1038/s42254-021-00348-9"><span>Variational Quantum Algorithms</span></a></em>, Nature Reviews Physics <strong>3</strong>, 625 (2020).</div>
</div>
<div id="ref-Biamonte2017" class="csl-entry">
<div class="csl-left-margin">[12] </div><div class="csl-right-inline">J. Biamonte, P. Wittek, N. Pancotti, P. Rebentrost, N. Wiebe, and S. Lloyd, <em><a href="https://doi.org/10.1038/nature23474"><span class="nocase">Quantum machine learning</span></a></em>, Nature <strong>549</strong>, 195 (2017).</div>
</div>
<div id="ref-Schuld2022" class="csl-entry">
<div class="csl-left-margin">[13] </div><div class="csl-right-inline">M. Schuld and N. Killoran, <em><a href="https://doi.org/10.1103/PRXQuantum.3.030101"><span class="nocase">Is quantum advantage the right goal for quantum machine learning?</span></a></em>, PRX Quantum <strong>3</strong>, (2022).</div>
</div>
<div id="ref-AaronsonGrover" class="csl-entry">
<div class="csl-left-margin">[14] </div><div class="csl-right-inline">S. Aaronson, <em><a href="https://scottaaronson.blog/?p=7143">Of Course Grover’s Algorithm Offers a Quantum Advantage!</a></em>, (2023).</div>
</div>
<div id="ref-Babbush2020" class="csl-entry">
<div class="csl-left-margin">[15] </div><div class="csl-right-inline">R. Babbush, J. McClean, M. Newman, C. Gidney, S. Boixo, and H. Neven, <em><a href="https://doi.org/10.1103/PRXQuantum.2.010103"><span class="nocase">Focus beyond quadratic speedups for error-corrected quantum advantage</span></a></em>, PRX Quantum <strong>2</strong>, (2020).</div>
</div>
<div id="ref-Hoefler2023" class="csl-entry">
<div class="csl-left-margin">[16] </div><div class="csl-right-inline">T. Hoefler, T. Häner, and M. Troyer, <em><a href="https://doi.org/10.1145/3571725"><span class="nocase">Disentangling Hype from Practicality: On Realistically Achieving Quantum Advantage</span></a></em>, Communications of the ACM <strong>66</strong>, 82 (2023).</div>
</div>
<div id="ref-Gidney2021" class="csl-entry">
<div class="csl-left-margin">[17] </div><div class="csl-right-inline">C. Gidney and M. Ekerå, <em><a href="https://doi.org/10.22331/q-2021-04-15-433"><span class="nocase">How to factor 2048 bit RSA integers in 8 hours using 20 million noisy qubits</span></a></em>, Quantum <strong>5</strong>, 433 (2021).</div>
</div>
<div id="ref-HPQC" class="csl-entry">
<div class="csl-left-margin">[18] </div><div class="csl-right-inline">M. Troyer, <em><a href="https://www.youtube.com/watch?v=-fcQt5C2XGY&amp;list=PLkSK0hIHz-LnGheNnZ1Al7eSYs0_lkb2d&amp;index=7">High Performance Quantum Computing</a></em>, (2014).</div>
</div>
<div id="ref-Aaronson2015" class="csl-entry">
<div class="csl-left-margin">[19] </div><div class="csl-right-inline">S. Aaronson, <em><a href="https://doi.org/10.1038/nphys3272"><span class="nocase">Read the fine print</span></a></em>, Nature Physics <strong>11</strong>, 291 (2015).</div>
</div>
<div id="ref-Tang2022" class="csl-entry">
<div class="csl-left-margin">[20] </div><div class="csl-right-inline">E. Tang, <em><a href="https://doi.org/10.1038/s42254-022-00511-w"><span class="nocase">Dequantizing algorithms to understand quantum advantage in machine learning</span></a></em>, Nature Reviews Physics 2022 4:11 <strong>4</strong>, 692 (2022).</div>
</div>
<div id="ref-Arrazola" class="csl-entry">
<div class="csl-left-margin">[21] </div><div class="csl-right-inline">J. M. Arrazola, <em><a href="https://medium.com/xanaduai/everything-you-always-wanted-to-know-about-quantum-inspired-algorithms-38ee1a0e30ef"><span class="nocase">Everything you always wanted to know about quantum-inspired algorithms | by Xanadu | XanaduAI | Medium</span></a></em>, (n.d.).</div>
</div>
<div id="ref-Liu2023" class="csl-entry">
<div class="csl-left-margin">[22] </div><div class="csl-right-inline">J. Liu, M. Liu, J.-P. Liu, Z. Ye, Y. Alexeev, J. Eisert, and L. Jiang, <em><a href="https://arxiv.org/abs/2303.03428v2"><span class="nocase">Towards provably efficient quantum algorithms for large-scale machine-learning models</span></a></em>, (2023).</div>
</div>
<div id="ref-Daley2022" class="csl-entry">
<div class="csl-left-margin">[23] </div><div class="csl-right-inline">A. J. Daley, I. Bloch, C. Kokail, S. Flannigan, N. Pearson, M. Troyer, and P. Zoller, <em><a href="https://doi.org/10.1038/s41586-022-04940-6"><span class="nocase">Practical quantum advantage in quantum simulation</span></a></em>, Nature 2022 607:7920 <strong>607</strong>, 667 (2022).</div>
</div>
<div id="ref-Lee2022" class="csl-entry">
<div class="csl-left-margin">[24] </div><div class="csl-right-inline">S. Lee et al., <em><a href="http://arxiv.org/abs/2208.02199"><span class="nocase">Is there evidence for exponential quantum advantage in quantum chemistry?</span></a></em>, (2022).</div>
</div>
<div id="ref-Babbush2023" class="csl-entry">
<div class="csl-left-margin">[25] </div><div class="csl-right-inline">R. Babbush, D. W. Berry, R. Kothari, R. D. Somma, and N. Wiebe, <em><a href="https://arxiv.org/abs/2303.13012v2"><span class="nocase">Exponential quantum speedup in simulating coupled classical oscillators</span></a></em>, (2023).</div>
</div>
<div id="ref-Huang2021" class="csl-entry">
<div class="csl-left-margin">[26] </div><div class="csl-right-inline">H.-Y. Huang et al., <em><a href="https://doi.org/10.1126/science.abn7293"><span class="nocase">Quantum advantage in learning from experiments</span></a></em>, Science <strong>376</strong>, 1182 (2021).</div>
</div>
<div id="ref-TPQA" class="csl-entry">
<div class="csl-left-margin">[27] </div><div class="csl-right-inline">M. Troyer, <em><a href="https://www.youtube.com/watch?v=WY3htdKUGsA&amp;t=1011s">High Performance Quantum Computing</a></em>, (2021).</div>
</div>
<div id="ref-BabbushTalk" class="csl-entry">
<div class="csl-left-margin">[28] </div><div class="csl-right-inline">R. Babbush, <em><a href="https://www.youtube.com/watch?v=-fcQt5C2XGY">Google’s Perspective on the Viable Applications of Early Fault-Tolerant Quantum Computers</a></em>, (2021).</div>
</div>
<div id="ref-Sarma" class="csl-entry">
<div class="csl-left-margin">[29] </div><div class="csl-right-inline">S. D. Sarma, <em><a href="https://www.technologyreview.com/2022/03/28/1048355/quantum-computing-has-a-hype-problem/">Quantum Computing Has a Hype Problem</a></em>, (2022).</div>
</div>
<div id="ref-LockwoodNISQ" class="csl-entry">
<div class="csl-left-margin">[30] </div><div class="csl-right-inline">O. Lockwood, <em><a href="https://www.youtube.com/watch?v=bELTWdQDtPs&amp;list=PL91jA61XuCIBrPUVXwG_2gVNYMqA7hrgi&amp;index=3">The Next Era of Quantum Computing: The End of NISQ and the Beginning of a New Phase</a></em>, (2022).</div>
</div>
<div id="ref-LockwoodQML" class="csl-entry">
<div class="csl-left-margin">[31] </div><div class="csl-right-inline">O. Lockwood, <em><a href="https://www.youtube.com/watch?v=ZDZc8bbe094&amp;list=PL91jA61XuCIBrPUVXwG_2gVNYMqA7hrgi&amp;index=2">What Is Quantum Machine Learning (QML) Good for Anyway? (OO)</a></em>, (2022).</div>
</div>
<div id="ref-Galitski" class="csl-entry">
<div class="csl-left-margin">[32] </div><div class="csl-right-inline">V. Galitski, <em><a href="https://www.linkedin.com/pulse/quantum-computing-hype-bad-science-victor-galitski-1c/">Quantum Computing Hype Is Bad for Science</a></em>, (2021).</div>
</div>
<div id="ref-Preskill" class="csl-entry">
<div class="csl-left-margin">[33] </div><div class="csl-right-inline">S. Carroll, <em><a href="https://www.youtube.com/watch?v=UYt4QG8iZ6U">Mindscape 153 | John Preskill on Quantum Computers and What They’re Good for</a></em>, (2022).</div>
</div>
</div></section></div> ]]></description>
  <category>quantum concepts</category>
  <category>paper review</category>
  <guid>https://idnm.github.io/blog/posts/what_to_do_with_a_quantum_computer/what_to_do_with_a_quantum_computer.html</guid>
  <pubDate>Sun, 14 May 2023 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/what_to_do_with_a_quantum_computer/what_to_use_qc_for.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Decomposition of a general single–qutrit gate</title>
  <link>https://idnm.github.io/blog/posts/qutrit_gate/2022-11-15-Qutrit.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> unitary_group</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/qutrit_gate/2022-11-15-Qutrit.ipynb"> <img src="https://idnm.github.io/blog/posts/qutrit_gate/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="whats-in-here" class="level1">
<h1>What’s in here?</h1>
<p>Recently I needed to decompose a general single-qutrit gate into elementary qutrit rotations, but was unable to find a ready-to-use result in the literature. After some time I gave up on searching and came up with a simple decomposition of the following form</p>
<p><img src="https://idnm.github.io/blog/posts/qutrit_gate/su3su2.png" alt="Drawing" style="width: 400px;"></p>
<p>The main purpose of this post is to give an explicit algorithm for constructing this decomposition. The procedure I propose is pretty elementary and only uses singular value decomposition, no fancy Cartan’s decompositions. If you want to cut to the chase, proceed to summary and implementation. For the backstory start here. For context I also cover Euler’s decomposition for single-qubit gates and give a brief motivation for the problem, for this read on.</p>
<blockquote class="blockquote">
<p><strong><em>NOTE:</em></strong> I’ve got a lot of feedback after sharing this blog post on LinkedIn, see <a href="https://www.linkedin.com/posts/nikita-nemkov_quantumcomputing-activity-6999081658490474496-Wz3_?utm_source=share&amp;utm_medium=member_desktop">here</a> for the discussion. Many papers were pointed out that contain similar results. The most elementary and directly related discussion can be found in App.A of <a href="https://aip.scitation.org/doi/10.1063/1.532911">this paper</a>, as pointed out by Barry Sanders. Other references suggested include</p>
<ul>
<li>https://journals.aps.org/pra/abstract/10.1103/PhysRevA.97.022328</li>
<li>https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.73.58</li>
<li>https://opg.optica.org/optica/fulltext.cfm?uri=optica-3-12-1460&amp;id=355743</li>
<li>https://arxiv.org/abs/quant-ph/0511041</li>
<li>https://arxiv.org/abs/quant-ph/0511019</li>
<li>https://arxiv.org/abs/2206.03842</li>
</ul>
</blockquote>
<p>So, why care about qutrits? Well, first thing to note is that they exist. Most quantum systems in the real world, in contrast to quantum computing textbooks, are not two-level. Qutrits (three-level systems) and, more generally, qudits (d-dimensional systems) are omnipresent. Trapped ion quantum computers give one example where qudits naturally arise, see e.g.&nbsp;<a href="https://arxiv.org/abs/1907.08569">https://arxiv.org/abs/1907.08569</a>. Another interesting example are superconducting qubits. In fact, a bare superconducting circuit is rather a harmonic oscillator and as such has infinitely many energy levels. Typically, an anharmonicity in the form of a Josephson junction is introduced, which allows to decouple the two lowest energy levels from the rest to give the familiar superconducting qubit. However, the higher energy levels are still there and can be fruitfully exploited.</p>
<p>For a theorist, more levels is a blessing. More states fit into the system of the same size (for example dimension of the qutrit state space scales as <img src="https://latex.codecogs.com/png.latex?3%5En"> instead of <img src="https://latex.codecogs.com/png.latex?2%5En"> for a qubit system) opening up novel optimization possibilities, here is just one example <a href="https://arxiv.org/abs/1909.08973">https://arxiv.org/abs/1909.08973</a>. An experimentator probably has mixed feelings about higher levels, because they are typically associated more noise and calibration overhead. Exploiting higher levels is therefore an promising yet challenging possibility. There are already many proofs of concept, see e.g.&nbsp;this result on using the third level in a superconducting circuit to improve the fidelity of the Toffoli gate <a href="https://arxiv.org/abs/2109.00558">https://arxiv.org/abs/2109.00558</a>.</p>
</section>
<section id="eulers-decomposition-of-an-arbitrary-single-qubit-gate" class="level1">
<h1>Euler’s decomposition of an arbitrary single-qubit gate</h1>
<section id="elementary-single-qubit-rotations" class="level2">
<h2 class="anchored" data-anchor-id="elementary-single-qubit-rotations">Elementary single-qubit rotations</h2>
<p>Me (and probably you too) usually take for granted that an arbitrary single-qubit gate <img src="https://latex.codecogs.com/png.latex?U"> can be decomposed into a product of three elementary rotations. The rotations are usually chosen as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A&amp;R_X(%5Ctheta)=e%5E%7B-i%5Ctheta%20X/2%7D=%5Cbegin%7Bpmatrix%7D%20%5Ccos%5Cfrac%7B%5Ctheta%7D2%20&amp;%20-i%5Csin%5Cfrac%7B%5Ctheta%7D2%20%5C%5C%20%20-i%5Csin%5Cfrac%7B%5Ctheta%7D2%20&amp;%20%5Ccos%5Cfrac%7B%5Ctheta%7D2%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;R_Y(%5Ctheta)=e%5E%7B-i%5Ctheta%20Y/2%7D=%5Cbegin%7Bpmatrix%7D%20%5Ccos%5Cfrac%7B%5Ctheta%7D2%20&amp;%20-%5Csin%5Cfrac%7B%5Ctheta%7D2%20%5C%5C%20%20%5Csin%5Cfrac%7B%5Ctheta%7D2%20&amp;%20%5Ccos%5Cfrac%7B%5Ctheta%7D2%5Cend%7Bpmatrix%7D%5C%5C%0A&amp;R_Z(%5Ctheta)=e%5E%7B-i%5Ctheta%20Z/2%7D=%5Cbegin%7Bpmatrix%7D%20e%5E%7B-i%20%5Ctheta/2%7D%20&amp;%200%20%5C%5C%200%20&amp;%20e%5E%7Bi%5Ctheta/2%7D%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"></p>
<p>and a sample decomposition reads</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU%20=%20R_X(%5Ctheta_1)R_Z(%5Ctheta_2)R_X(%5Ctheta_3)%20%5Clabel%7BXZX%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>This one is known as the Euler decomposition. Choosing angles <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i"> appropriately one can obtain any <img src="https://latex.codecogs.com/png.latex?2%5Ctimes%202"> special (with unit determinant) unitary matrix <img src="https://latex.codecogs.com/png.latex?U%5Cin%20SU(2)">.</p>
</section>
<section id="making-sense-of-eulers-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="making-sense-of-eulers-decomposition">Making sense of Euler’s decomposition</h2>
<p><a id="cell2"></a></p>
<p>Let me make a couple of remarks in an attempt to make relation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BXZX%7D"> a bit more intuitive. First of all, the dimension of the group <img src="https://latex.codecogs.com/png.latex?U(n)">, i.e.&nbsp;a group of <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n"> unitary matrices is equal to <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdim%7D%20U(n)=n%5E2%20%5C%20."> If you also factor out the global phase, i.e.&nbsp;impose <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdet%7DU=1">, you get the special unitary group <img src="https://latex.codecogs.com/png.latex?SU(n)"> which has one dimension less <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdim%7D%20SU(n)=n%5E2-1%5C%20."> For a single-qubit gate <img src="https://latex.codecogs.com/png.latex?n=2"> and <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdim%7D=3">. This implies that the right-hand side in eq.<img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BXZX%7D"> needs to have at least three parameters and hence three elementary rotations. Good, this explains why are there three terms in Euler’s decomposition. (This technique of unsubtle parameter counting in fact extends far more generally. For example, it can be used to deduce a minimum amount of <img src="https://latex.codecogs.com/png.latex?CNOT"> gates necessary to compile an arbitrary <img src="https://latex.codecogs.com/png.latex?n">-qubit unitary, as I discussed <a href="https://idnm.github.io/blog/machine%20learning/compilation/qiskit/paper%20review/2021/07/22/Machine-learning-compilation-of-quantum-circuits.html#Theoretical-lower-bound-and-quantum-Shannon-decomposition">here</a>).</p>
</section>
<section id="a-word-about-cartan-decomposition-kak" class="level2">
<h2 class="anchored" data-anchor-id="a-word-about-cartan-decomposition-kak">A word about Cartan decomposition (KAK)</h2>
<p>Now, is there anything special about this particular combination of rotations <img src="https://latex.codecogs.com/png.latex?XZX">? Well, yes and no. In fact, almost any three single-parameter unitaries would work. Other possible decompositions are <img src="https://latex.codecogs.com/png.latex?XYX">, <img src="https://latex.codecogs.com/png.latex?YZY"> etc, but also less common options exist such as <img src="https://latex.codecogs.com/png.latex?XYZ">.</p>
<p>However, decompositions like <img src="https://latex.codecogs.com/png.latex?XZX"> are special in a sense that they are examples of Cartan (aka KAK) decompositions, hinging on the structure of the underlying <img src="https://latex.codecogs.com/png.latex?su(2)"> algebra. Decompositions of two-qubit gates into <img src="https://latex.codecogs.com/png.latex?CNOT"> gates and single-qubit rotations is another important example where KAK arise. I will not cover the subject here, but can recommend a quite readable introduction with applications to quantum gates <a href="https://arxiv.org/abs/quant-ph/0010100">https://arxiv.org/abs/quant-ph/0010100</a>.</p>
</section>
<section id="finding-angles-in-eulers-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="finding-angles-in-eulers-decomposition">Finding angles in Euler’s decomposition</h2>
<p>Writing decomposition with generic parameters is one thing, fixing them explicitly for a given matrix <img src="https://latex.codecogs.com/png.latex?U"> is another. Here how you can do it for Euler’s decomposition. The key observation is that because <img src="https://latex.codecogs.com/png.latex?XZ=-XZ"> we have <img src="https://latex.codecogs.com/png.latex?X%20R_Z(%5Ctheta)X=R_Z(-%5Ctheta),%5Cquad%20X%20R_X(%5Ctheta)X=R_X(%5Ctheta)%20%5C%20."> Multiplying <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BXZX%7D"> by <img src="https://latex.codecogs.com/png.latex?X"> from left and right we get <img src="https://latex.codecogs.com/png.latex?XUX=R_X(%5Ctheta_1)R_Z(-%5Ctheta_2)R_X(%5Ctheta_3)%20%5C%20."> Therefore <img src="https://latex.codecogs.com/png.latex?M:=%20UXU%5E%5Cdagger%20X=R_x(%5Ctheta_1)R_Z(2%5Ctheta_2)R_x%5E%5Cdagger(%5Ctheta_1)%20%5C%20."></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?R_Z"> is a diagonal gate, the right hand side is nothing else but a unitary diagonalization of matrix <img src="https://latex.codecogs.com/png.latex?M">. Therefore, finding <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> and <img src="https://latex.codecogs.com/png.latex?%5Ctheta_2"> reduces to the standard diagonalization procedure. The last parameter <img src="https://latex.codecogs.com/png.latex?%5Ctheta_3"> is then read off from <img src="https://latex.codecogs.com/png.latex?R_X(%5Ctheta_3)=R_Z%5E%5Cdagger(%5Ctheta_2)%20R_X%5E%5Cdagger(%5Ctheta_1)U">.</p>
<p>Here is a quick and dirty code that implements the procedure. It won’t handle some edge cases and may not be the most efficient, but it will work with random unitaries.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define X, RX, and RZ.</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RX(theta):</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array(</span>
<span id="cb2-7">        [[np.cos(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sin(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)],</span>
<span id="cb2-8">         [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.sin(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), np.cos(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> RZ(theta):</span>
<span id="cb2-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.array(</span>
<span id="cb2-12">        [[np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-13">         [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, np.exp(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Recovering angle from cos and sin.</span></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> angle_from_cos_and_sin(c, s):</span>
<span id="cb2-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input does not satisfy c**2+s**2=1'</span></span>
<span id="cb2-18">    phi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arccos(c)</span>
<span id="cb2-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.allclose(np.sin(phi), s):</span>
<span id="cb2-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> phi</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb2-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>phi</span>
<span id="cb2-23">        </span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decomposition routine.</span></span>
<span id="cb2-26"></span>
<span id="cb2-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> XZX_decomposition(U):</span>
<span id="cb2-28">    </span>
<span id="cb2-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(U.conj().T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U, np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input matrix is not unitary.'</span></span>
<span id="cb2-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(np.linalg.det(U), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input matrix has non-unit determinant.'</span></span>
<span id="cb2-31">    </span>
<span id="cb2-32">    </span>
<span id="cb2-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Construct the matrix to diagonalize.</span></span>
<span id="cb2-34">    M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U.conj().T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X</span>
<span id="cb2-35">    </span>
<span id="cb2-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Diagonalization.</span></span>
<span id="cb2-37">    RZ_squared, RX1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(M)</span>
<span id="cb2-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(RX1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.diag(RZ_squared) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX1.conj().T, M)</span>
<span id="cb2-39">    </span>
<span id="cb2-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrix RX1 is not necessarily of RX(theta) form yet, but it can be made so by multiplying with a diagonal unitary.</span></span>
<span id="cb2-41">    phase_00 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-42">    RX1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> phase_00 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now RX1[0,0] is real and RX[1,0] has the correct phase.</span></span>
<span id="cb2-43">    phase_10 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-44">    phase_01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-45">    </span>
<span id="cb2-46">    RX1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> np.diag([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, phase_10<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>phase_01]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now RX1[0,1] and RX1[1,1] have the correct phase as well.</span></span>
<span id="cb2-47">    </span>
<span id="cb2-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine theta_1.</span></span>
<span id="cb2-49">    cos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-50">    sin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>RX1[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-51">    theta_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>angle_from_cos_and_sin(cos, sin)</span>
<span id="cb2-52">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(RX(theta_1), RX1)</span>
<span id="cb2-53"></span>
<span id="cb2-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Theta_2 from RZ squared.</span></span>
<span id="cb2-55">    theta_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.log(RZ_squared[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) </span>
<span id="cb2-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(RZ(theta_2), RZ(theta_2))</span>
<span id="cb2-57">        </span>
<span id="cb2-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Determine RX(theta_3) and theta_3. </span></span>
<span id="cb2-59">    RX2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RZ(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>theta_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>theta_1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U</span>
<span id="cb2-60">    cos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-61">    sin <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>RX2[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-62">    theta_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>angle_from_cos_and_sin(cos, sin)</span>
<span id="cb2-63">    </span>
<span id="cb2-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(RX(theta_3), RX2)</span>
<span id="cb2-65"></span>
<span id="cb2-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.allclose(RX(theta_1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(theta_3), U):</span>
<span id="cb2-67">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta_1, theta_2, theta_3</span>
<span id="cb2-68"></span>
<span id="cb2-69">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Something went wrong during decomposition.'</span>)</span></code></pre></div>
</div>
<p>And now let’s test.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw a random unitary and normalize its det to 1.</span></span>
<span id="cb3-2">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) </span>
<span id="cb3-3">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.linalg.det(U)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decompose and check</span></span>
<span id="cb3-6">theta_1, theta_2, theta_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> XZX_decomposition(U)</span>
<span id="cb3-7">check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.allclose(RX(theta_1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(theta_3), U)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Does it work? </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>check<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Does it work? True</code></pre>
</div>
</div>
<p>From <img src="https://latex.codecogs.com/png.latex?XZX"> decompositions we can get related ones. For example, since conjugating by the Hadamard gate <img src="https://latex.codecogs.com/png.latex?H"> swaps <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Z"> we can reduce <img src="https://latex.codecogs.com/png.latex?ZXZ"> decomposition of <img src="https://latex.codecogs.com/png.latex?U"> to <img src="https://latex.codecogs.com/png.latex?XZX"> decomposition of <img src="https://latex.codecogs.com/png.latex?HUH">.We’ll need it a bit later so let’s implement this one also.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ZXZ_decomposition(U):</span>
<span id="cb5-2">    H <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> XZX_decomposition(H<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>H)</span></code></pre></div>
</div>
<p>A simple check.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-2">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> np.sqrt(np.linalg.det(U))</span>
<span id="cb6-3"></span>
<span id="cb6-4">theta_1, theta_2, theta_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ZXZ_decomposition(U)</span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Check:'</span>, np.allclose(RZ(theta_1) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(theta_2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta_3), U))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Check: True</code></pre>
</div>
</div>
<p><a id="qutrit"></a> # Decomposing arbitrary single-qutrit gate ## Elementary qutrit gates Qutrit is an abstraction for any three-level quantum system and it’s is probably less familiar than a qubit. General qutrit gate belongs to <img src="https://latex.codecogs.com/png.latex?SU(3)"> and elementary rotation gates for a qutrit are commonly chosen as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AR%5E%7B01%7D_X(%5Ctheta)=%5Cbegin%7Bpmatrix%7D%5Ccos%5Cfrac%7B%5Ctheta%7D2&amp;-i%5Csin%5Cfrac%7B%5Ctheta%7D2&amp;0%5C%5C-i%5Csin%5Cfrac%7B%5Ctheta%7D2&amp;%5Ccos%5Cfrac%7B%5Ctheta%7D2&amp;0%5C%5C0&amp;0&amp;1%5Cend%7Bpmatrix%7D,%5Cquad%0AR%5E%7B01%7D_Z(%5Ctheta)=%5Cbegin%7Bpmatrix%7De%5E%7B-i%5Ctheta/2%7D&amp;0&amp;0%5C%5C0&amp;e%5E%7Bi%5Ctheta/2%7D&amp;0%5C%5C0&amp;0&amp;1%5Cend%7Bpmatrix%7D%20%5C%20,%0A%5Cend%7Balign%7D"></p>
<p>and</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AR%5E%7B12%7D_X(%5Ctheta)=%5Cbegin%7Bpmatrix%7D1&amp;0&amp;0%5C%5C0&amp;cos%5Cfrac%7B%5Ctheta%7D2&amp;-i%5Csin%5Cfrac%7B%5Ctheta%7D2%5C%5C0&amp;-i%5Csin%5Cfrac%7B%5Ctheta%7D2&amp;%5Ccos%5Cfrac%7B%5Ctheta%7D2%5Cend%7Bpmatrix%7D,%5Cquad%0AR%5E%7B12%7D_Z(%5Ctheta)=%5Cbegin%7Bpmatrix%7D1&amp;0&amp;0%5C%5C0&amp;e%5E%7B-i%5Ctheta/2%7D&amp;0%5C%5C0&amp;0&amp;e%5E%7Bi%5Ctheta/2%7D%5Cend%7Bpmatrix%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>Similar expression hold to <img src="https://latex.codecogs.com/png.latex?R_Y%5E%7B01%7D"> and <img src="https://latex.codecogs.com/png.latex?R_Y%5E%7B12%7D"> but we won’t need them. So these are basically single-qubit rotation gates which touch only two out of the three levels of a qutrit. By the way, gates that act only on levels 1 and 3 look bit awkward, and here we will do without them. ## Is there an off-the-shelf result? (I’m bad at googling) A general single-qutrit transformation lives in <img src="https://latex.codecogs.com/png.latex?SU(3)"> and hence has <img src="https://latex.codecogs.com/png.latex?3%5E2-1=8"> real parameters. Thus, we expect to have a decomposition which is a product of 8 elementary rotations. But how exactly will it look, and how to determine the parameters? To my surprise, the only explicit result I found is equation (4) in this paper <a href="https://arxiv.org/abs/1105.5485">https://arxiv.org/abs/1105.5485</a> which goes something like <img src="https://latex.codecogs.com/png.latex?U%20=%20R_Y%5E%7B01%7DR_Y%5E%7B02%7DR_Y%5E%7B01%7DR_Z%5E%7B01%7DR_Z%5E%7B02%7DR_Y%5E%7B01%7DR_Y%5E%7B02%7DR_Y%5E%7B01%7D%20%5C%20."></p>
<p>The result is based on a particular Cartan decomposition of <img src="https://latex.codecogs.com/png.latex?SU(3)"> (which is non-unique) and does not look very intuitive. Moreover, apparently no explicit algorithm to find the parameters of these rotations is given.</p>
</section>
<section id="decomposition-sketch" class="level2">
<h2 class="anchored" data-anchor-id="decomposition-sketch">Decomposition sketch</h2>
<p>I will now construct the explicit decomposition for a general single-qutrit gate advertised in the beginning. First, let us separate a general <img src="https://latex.codecogs.com/png.latex?U%5Cin%20SU(3)"> into four blocks <img src="https://latex.codecogs.com/png.latex?U=%5Cbegin%7Bpmatrix%7DA&amp;B%5C%5CC&amp;D%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7D%20a_%7B00%7D&amp;%20a_%7B01%7D%20&amp;%20b_0%5C%5C%20a_%7B10%7D%20&amp;%20a_%7B11%7D%20&amp;%20b_1%5C%5C%20c_0&amp;c_1&amp;d%5Cend%7Bpmatrix%7D%20%5C%20."></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?A"> is a <img src="https://latex.codecogs.com/png.latex?2%5Ctimes2"> matrix, <img src="https://latex.codecogs.com/png.latex?B"> and <img src="https://latex.codecogs.com/png.latex?C%5E%5Cdagger"> are <img src="https://latex.codecogs.com/png.latex?2%5Ctimes1"> column vectors and <img src="https://latex.codecogs.com/png.latex?D"> is a scalar. Now comes the key point. We factorize matrix <img src="https://latex.codecogs.com/png.latex?A"> using the <a href="https://en.wikipedia.org/wiki/Singular_value_decomposition">singular value decomposition</a> (SVD) <img src="https://latex.codecogs.com/png.latex?A%20=%20V%20%5CSigma%20W%20%5C%20.%20%5Clabel%7BA%20SVD%7D"> Here <img src="https://latex.codecogs.com/png.latex?V"> and <img src="https://latex.codecogs.com/png.latex?W"> are unitary, while <img src="https://latex.codecogs.com/png.latex?%5CSigma=%5Coperatorname%7Bdiag%7D(%5Csigma_0,%5Csigma_1)"> is diagonal with <img src="https://latex.codecogs.com/png.latex?%5Csigma_i%5Cge0">. SVD is a very useful factorization that works for arbitrary matrices, not necessarily hermitian or unitary (or even square). Using the SVD of <img src="https://latex.codecogs.com/png.latex?A"> we can factorize <img src="https://latex.codecogs.com/png.latex?U"> as follows <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU=%5Cbegin%7Bpmatrix%7DV&amp;0%5C%5C0&amp;1%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7D%5CSigma&amp;V%5E%5Cdagger%20B%5C%5C%20CW%5E%5Cdagger&amp;D%5Cend%7Bpmatrix%7D%5Cbegin%7Bpmatrix%7DW&amp;0%5C%5C0&amp;1%5Cend%7Bpmatrix%7D=V%5E%7B01%7D%5Cbegin%7Bpmatrix%7D%5CSigma&amp;V%5E%5Cdagger%20B%5C%5C%20CW%5E%5Cdagger&amp;D%5Cend%7Bpmatrix%7DW%5E%7B01%7D%20%5Clabel%7BU%20part%7D%20%5C%20.%0A%5Cend%7Balign%7D"> The left and right matrices act only within the first two levels. The middle matrix looks like it acts on all levels of the qutrit, but in fact it doesn’t. I will leave at as an exercise to show that matrix <img src="https://latex.codecogs.com/png.latex?A"> necessarily has a unit singular value (Hint: unitarity condition for <img src="https://latex.codecogs.com/png.latex?U"> implies <img src="https://latex.codecogs.com/png.latex?A%5E%5Cdagger%20A+C%5E%5Cdagger%20C=%5Cmathbb%7B1%7D">. Because <img src="https://latex.codecogs.com/png.latex?C"> is a vector <img src="https://latex.codecogs.com/png.latex?C%5E%5Cdagger%20C"> is not full rank and has a zero eigenvalue). I will assume that <img src="https://latex.codecogs.com/png.latex?%5Csigma_%7B0%7D=1">. This has consequences. In a unitary matrix each row and column has a unit norm. Therefore, if some entry in a unitary matrix is equal to one, all other elements in the corresponding row and column must be zero. Thus, the middle matrix in <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BU%20part%7D"> in fact looks like <img src="https://latex.codecogs.com/png.latex?H%5E%7B12%7D:=%5Cbegin%7Bpmatrix%7D1&amp;0&amp;0%5C%5C%200&amp;%5Csigma_%7B1%7D&amp;%20b'%5C%5C%200&amp;c'&amp;d%5Cend%7Bpmatrix%7D"> and hence only acts on levels 1 and 2. The overall decomposition can be sketched as follows. <img src="https://idnm.github.io/blog/posts/qutrit_gate/qutrit.png" alt="Drawing" style="width: 400px;"> (Here is a catch question. Are the lines on this diagram qubits or qutrit levels? Right, they aren’t qubits.)</p>
<p>Therefore, we have split a general qutrit gate into three gates touching two levels only. Each of these can be decomposed into the elementary rotations using Euler’s method for single-qubit gates. That’s good. However, as it stands the decomposition is not optimal. So far all matrices <img src="https://latex.codecogs.com/png.latex?V,%20H,%20W"> are generic <img src="https://latex.codecogs.com/png.latex?U(2)"> matrices. Each comes with 3 parameters and also a global phase. We should be able to do better. Wait, but why is global phase a problem?</p>
</section>
<section id="a-word-about-global-phases" class="level2">
<h2 class="anchored" data-anchor-id="a-word-about-global-phases">A word about global phases</h2>
<p>Sure, global phases are normally ignored, and rightfully so, but there are situations where they are important. In our case, a global phase for a two-qubit gate leads to a non-trivial transformation when embedded in a qutrit. For example, <img src="https://latex.codecogs.com/png.latex?(e%5E%7Bi%5Cphi%7D)%5E%7B01%7D=%5Cbegin%7Bpmatrix%7De%5E%7Bi%5Cphi%7D&amp;0&amp;0%5C%5C0&amp;e%5E%7Bi%5Cphi%7D&amp;0%5C%5C0&amp;0&amp;1%5Cend%7Bpmatrix%7D"> is surely not a global phase for a qutrit. You may try to decompose this gate into the elementary qutrit rotations introduced above+a true global phase gate for a qutrit. The result won’t be trivial and actually involve more than one qutrit rotation. Therefore, we will take extra care to avoid global phases in the two-level gates.</p>
</section>
<section id="decomposition-refinement" class="level2">
<h2 class="anchored" data-anchor-id="decomposition-refinement">Decomposition refinement</h2>
<p>We would like to have a decomposition where all two-level matrices lie in <img src="https://latex.codecogs.com/png.latex?SU(2)">, i.e.&nbsp;have a unit determinant. This can be achieved as follows. First we factor out global phases from matrices <img src="https://latex.codecogs.com/png.latex?V"> and <img src="https://latex.codecogs.com/png.latex?W">, denote <img src="https://latex.codecogs.com/png.latex?V=e%5E%7Bi%5Cphi_V%7DV_0,%20W=e%5E%7Bi%5Cphi_W%7DW_0">. Then we write <img src="https://latex.codecogs.com/png.latex?A=V'%5CSigma'%20W'%20%5C%20,"> where <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A&amp;V'=V_0%5C%5C%0A&amp;%5CSigma'=e%5E%7Bi%5Cphi_V%7De%5E%7Bi%5Cphi_W%7D%5CSigma%20R_Z(2%5Cphi_V+2%5Cphi_W)%5C%5C%0A&amp;W'=R_Z(-2%5Cphi_V-2%5Cphi_W)W_0%20%5C%20.%0A%5Cend%7Balign%7D"> Unitary matrices <img src="https://latex.codecogs.com/png.latex?V',W'"> now have unit determinant. Matrix <img src="https://latex.codecogs.com/png.latex?%5CSigma'"> is diagonal and importantly <img src="https://latex.codecogs.com/png.latex?%5CSigma'_%7B00%7D=1">. In order to enforce this constraint we included extra <img src="https://latex.codecogs.com/png.latex?R_Z"> factors in <img src="https://latex.codecogs.com/png.latex?%5CSigma'"> and <img src="https://latex.codecogs.com/png.latex?W'">. Note that <img src="https://latex.codecogs.com/png.latex?%5CSigma'_%7B11%7D"> is in general no longer real, but this will not pose a problem.</p>
<p>We will introduce another factorization of matrix <img src="https://latex.codecogs.com/png.latex?A"> <img src="https://latex.codecogs.com/png.latex?A=V'%5CSigma'W'"> and require <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdet%7DV'=%5Coperatorname%7Bdet%7DW'=1"> and also <img src="https://latex.codecogs.com/png.latex?%5CSigma'_%7B00%7D=1">. Note that <img src="https://latex.codecogs.com/png.latex?%5CSigma'_%7B11%7D"> can not in general be real in such decomposition, because <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdet%7DA"> is not real in general, but this won’t pose a problem. This new factorization of <img src="https://latex.codecogs.com/png.latex?A"> leads to the following decomposition of <img src="https://latex.codecogs.com/png.latex?U"> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%20U=(V')%5E%7B01%7D%20(H')%5E%7B12%7D(W')%5E%7B12%7D%20%5Clabel%7BU%20prime%7D%20%5C%20.%20%5Cend%7Balign%7D"> Because <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdet%7DU=1"> it follows <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdet%7DH'=1">. Therefore, the all two-level matrices now lie in <img src="https://latex.codecogs.com/png.latex?SU(2)"> and can be decomposed into three elementary rotations using e.g.&nbsp;Euler’s method.</p>
<p>Note that three matrices from the <img src="https://latex.codecogs.com/png.latex?SU(2)"> have 9 parameters in total, one more than dimension of <img src="https://latex.codecogs.com/png.latex?SU(3)">. En extra redundancy can be described as follows</p>
<p>You can check directly that <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BU%20prime%7D"> remains invariant. Using this freedom, we can fix one parameter in any of the three matrices.</p>
<p><a id="summary"></a> ## Summary and implementation In the end, we get the following decomposition for an arbitrary single-qutrit gate <img src="https://latex.codecogs.com/png.latex?U=(V')%5E%7B01%7D%20(H')%5E%7B12%7D(W')%5E%7B12%7D"> where <img src="https://latex.codecogs.com/png.latex?U%5Cin%20SU(3)"> and <img src="https://latex.codecogs.com/png.latex?V',%20H',%20W'%5Cin%20SU(2)">. It can be computed as follows</p>
<p>The algorithm can be summarized as follows. 1. Cut out of matrix <img src="https://latex.codecogs.com/png.latex?U"> a <img src="https://latex.codecogs.com/png.latex?2%5Ctimes2"> submatrix <img src="https://latex.codecogs.com/png.latex?A"> and find its singular value decomposition <img src="https://latex.codecogs.com/png.latex?A=V%20%5CSigma%20W">. 1. Factor out global phases from matrices <img src="https://latex.codecogs.com/png.latex?V"> and <img src="https://latex.codecogs.com/png.latex?W"> and denote <img src="https://latex.codecogs.com/png.latex?V=e%5E%7Bi%5Cphi_V%7DV_0,%20W=e%5E%7Bi%5Cphi_W%7DW_0">. 1. Introduce <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A&amp;V'=V_0%5C%5C%0A&amp;%5CSigma'=e%5E%7Bi%5Cphi_V%7De%5E%7Bi%5Cphi_W%7D%5CSigma%20R_Z(2%5Cphi_V+2%5Cphi_W)%5C%5C%0A&amp;W'=R_Z(-2%5Cphi_V-2%5Cphi_W)W_0%20%5C%20.%0A%5Cend%7Balign%7D"> Now <img src="https://latex.codecogs.com/png.latex?A=V'%5CSigma'W'"> is another factorization of <img src="https://latex.codecogs.com/png.latex?A"> where <img src="https://latex.codecogs.com/png.latex?V',W'%5Cin%20SU(2)"> and <img src="https://latex.codecogs.com/png.latex?%5CSigma'_%7B00%7D=1">. 1. Compute <img src="https://latex.codecogs.com/png.latex?V'%5E%5Cdagger%20U%20W'%5E%5Cdagger">. It will be of the form <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bpmatrix%7D1&amp;0%5C%5C0&amp;H'%5Cend%7Bpmatrix%7D"> for some matrix <img src="https://latex.codecogs.com/png.latex?H'%5Cin%20SU(2)">. 1. Voilà 1. Note also that <img src="https://latex.codecogs.com/png.latex?U"> does not change under transformation <img src="https://latex.codecogs.com/png.latex?V'%5Cto%20V'%20R_Z(2%5Cphi),%20W'%5Cto%20R_Z(-2%5Cphi)W',%20H'%5Cto%20R_Z(-%5Cphi)%20H'%20R_Z(%5Cphi)">. This can be used to fix one degree of freedom in either <img src="https://latex.codecogs.com/png.latex?V',%20H'"> or <img src="https://latex.codecogs.com/png.latex?W'">.</p>
<p>Let’s go ahead and implement this decomposition. I will use the following decomposition consisting of elementary rotations</p>
<p><img src="https://idnm.github.io/blog/posts/qutrit_gate/decomposition.png" alt="Drawing" style="width: 600px;"></p>
<p>I.e. I will decompose all <img src="https://latex.codecogs.com/png.latex?SU(2)"> matrices using <img src="https://latex.codecogs.com/png.latex?ZXZ"> Euler decomposition and also choose <img src="https://latex.codecogs.com/png.latex?W'"> so that <img src="https://latex.codecogs.com/png.latex?W'=XZ">. Again, efficiency or potential edge cases will not be a concern.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embedding qubit gates into qutrit.</span></span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> embed(U_qubit, levels):</span>
<span id="cb8-4">    U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.complex64)</span>
<span id="cb8-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> levels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>:</span>
<span id="cb8-6">        U[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>U_qubit</span>
<span id="cb8-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> levels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'12'</span>:</span>
<span id="cb8-8">        U[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>U_qubit</span>
<span id="cb8-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb8-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">TypeError</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Levels </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>levels<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not supported.'</span>)</span>
<span id="cb8-11">        </span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> U</span>
<span id="cb8-13"></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Decomposition routine</span></span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qutrit_decomposition(U):</span>
<span id="cb8-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(U.conj().T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U, np.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input in not unitary.'</span> </span>
<span id="cb8-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> np.allclose(np.linalg.det(U), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input is not special.'</span></span>
<span id="cb8-19">    </span>
<span id="cb8-20">    </span>
<span id="cb8-21">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2x2 submatrix</span></span>
<span id="cb8-22">    V, Sigma, W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.svd(A) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Basic SVD</span></span>
<span id="cb8-23">    </span>
<span id="cb8-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting det V = det W = 1</span></span>
<span id="cb8-25">    phase_V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(np.linalg.det(V))</span>
<span id="cb8-26">    phase_W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.sqrt(np.linalg.det(W))</span>
<span id="cb8-27">    </span>
<span id="cb8-28">    V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> phase_V</span>
<span id="cb8-29">    W <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> phase_W</span>
<span id="cb8-30">    </span>
<span id="cb8-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># RZ factor to remove from W</span></span>
<span id="cb8-32">    theta_W1, theta_W2, theta_W3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ZXZ_decomposition(W)</span>
<span id="cb8-33">    ZW1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RZ(theta_W1)</span>
<span id="cb8-34">    </span>
<span id="cb8-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Computing the middle diagonal matrix</span></span>
<span id="cb8-36">    M <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> phase_V<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>phase_W<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.diag(Sigma) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ZW1</span>
<span id="cb8-37">    M00_phase <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.log(M[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb8-38">    </span>
<span id="cb8-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Gauge factor to set M[0,0]=1</span></span>
<span id="cb8-40">    Z_gauge <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RZ(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>M00_phase)</span>
<span id="cb8-41">    </span>
<span id="cb8-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Final matrices</span></span>
<span id="cb8-43">    V_prime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Z_gauge.conj().T</span>
<span id="cb8-44">    W_prime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RX(theta_W2) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta_W3)</span>
<span id="cb8-45">    H_prime_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed(V_prime.conj().T, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> embed(W_prime.conj().T, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>)</span>
<span id="cb8-46">    H_prime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> H_prime_full[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb8-47">    </span>
<span id="cb8-48">    theta_V1, theta_V2, theta_V3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ZXZ_decomposition(V_prime)</span>
<span id="cb8-49">    theta_H1, theta_H2, theta_H3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ZXZ_decomposition(H_prime)</span>
<span id="cb8-50">    </span>
<span id="cb8-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta_V1, theta_V2, theta_V3, theta_H1, theta_H2, theta_H3, theta_W2, theta_W3</span></code></pre></div>
</div>
<p>And, let’s verify.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-2">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>np.linalg.det(U)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4">theta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qutrit_decomposition(U)</span>
<span id="cb9-5"></span>
<span id="cb9-6">V01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed(RZ(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>)</span>
<span id="cb9-7">H12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed(RZ(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RX(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'12'</span>)</span>
<span id="cb9-8">W01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embed(RX(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> RZ(theta[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>)</span>
<span id="cb9-9"></span>
<span id="cb9-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Does it work?'</span>, np.allclose(V01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> H12 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> W01, U))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Does it work? True</code></pre>
</div>
</div>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>quantum concepts</category>
  <category>compilation</category>
  <guid>https://idnm.github.io/blog/posts/qutrit_gate/2022-11-15-Qutrit.html</guid>
  <pubDate>Mon, 14 Nov 2022 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/qutrit_gate/su3su2.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Classiq coding competition – Toffoli gate decomposition</title>
  <link>https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-classiq toffoli.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-2">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> qiskit</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install qiskit</span>
<span id="cb1-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-6">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pylatexenc</span>
<span id="cb1-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-8">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pylatexenc</span>
<span id="cb1-9">  </span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> transpile, QuantumCircuit, QuantumRegister</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.circuit.library <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.quantum_info <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneQubitEulerDecomposer, random_clifford, Operator, Statevector</span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.extensions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UnitaryGate</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.circuit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Instruction</span>
<span id="cb1-15"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/classiq_toffoli/2022-06-21-Classiq%20Toffoli.ipynb"> <img src="https://idnm.github.io/blog/posts/classiq_toffoli/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="whats-in-here" class="level1">
<h1>What’s in here?</h1>
<p>I participated in <a href="https://www.classiq.io/competition">Classiq coding competition</a> and submitted the second best solution to the <a href="https://www.classiq.io/competition/toffoli">Toffoli</a> decomposition problem. The core technical trick to compress the resulting circuit was the use of the relative phase Toffoli gates, popularized by Dmitri Maslov in <a href="https://arxiv.org/abs/1508.03273">this paper</a>.</p>
<p>In this post I will - briefly recap what are the Toffoli gates - introduce relative phase Toffoli gates - explain why are they useful - illustrate by solving the Classiq problem</p>
<p>Amusingly, optimizing quantum circuits using an analog device (human brain) was exactly the kind of thing I wanted to avoid when I worked on the automatic compiler <a href="https://arxiv.org/abs/2205.01121">CPFlow</a>. However, our compiler works well only with small circuits, to solve a larger problem one needs to decompose it into digestible pieces. In the end, I found no efficient way to use the computer search in the original problem, but came up with paper-and-pencil solution. The usefulness of the relative phase Toffoli gates, which I will cover in some depth here, of course extends far beyond.</p>
</section>
<section id="toffoli-gates" class="level1">
<h1>Toffoli gates</h1>
<section id="cnot" class="level2">
<h2 class="anchored" data-anchor-id="cnot">CNOT</h2>
<p>The simplest “Toffoli” gate is CNOT gate, also known as controlled NOT or controlled X (CX).</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note, if you draw this interactively and have an error here (happens in Colab), redefine the global variable below.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># output = 'mpl'</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It flips the value (applies X gate) of the second qubit if the first qubit is in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> and does nothing if the first qubit is in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">. The first qubit is called the <em>control</em> qubit, the last is called the <em>target</em>. If the target qubit starts in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, than CNOT effectively copies that value of the control qubit to the target.</p>
</section>
<section id="q-toffoli" class="level2">
<h2 class="anchored" data-anchor-id="q-toffoli">3q Toffoli</h2>
<p>The regular Toffoli gates is defined on three qubits.</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-2">qc.ccx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-3">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It has two controls and one target. This gate flips the value of the target qubit if and only if both of the control qubits are in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, and does nothing otherwise. If the target qubit starts in state <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> the Toffoli gate effectively stores the logical AND of the control qubits <img src="https://latex.codecogs.com/png.latex?q_0%20%5Cland%20q_1"> in the target register.</p>
</section>
<section id="n-qubit-toffoli" class="level2">
<h2 class="anchored" data-anchor-id="n-qubit-toffoli">n-qubit Toffoli</h2>
<p>This construction has a plain generalization to multiple control qubits, e.g.&nbsp;here is the the Toffoli gate on 5 qubits (with 4 control qubits)</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-2">qc.mct([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-3">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?n-">qubit Toffoli gates are very important primitives in quantum computing. For elaboration on this claim I recommend the introduction section in <a href="https://arxiv.org/abs/1508.03273">Maslov’s paper</a>, which starts with</p>
<p><em>“Multiple control Toffoli gates are the staple of quantum arithmetic and reversible circuits. They are employed widely within quantum algorithms, including inreversible transformations, such as arithmetic circuits and all sorts of Boolean operations over quantum registers, as well as subroutines within other specialized quantum transforms.”</em></p>
</section>
<section id="decompositions" class="level2">
<h2 class="anchored" data-anchor-id="decompositions">Decompositions</h2>
<p>Although there are intriguing recent suggestions to implement multiple-control Toffoli gates directly (see e.g.&nbsp;<a href="https://arxiv.org/abs/2006.07035">here</a>) most hardware platforms currently require them to be decomposed into 1q+2q gates. This is the same what the Classiq problem asked for, to decompose a multiple-controlled Toffoli gate into CNOT gates and arbitrary 1q gates.</p>
<p>I will denote Toffoli gates on <img src="https://latex.codecogs.com/png.latex?n"> qubits (with <img src="https://latex.codecogs.com/png.latex?n-1"> controls) by <img src="https://latex.codecogs.com/png.latex?T%5En"> (another frequent notation is <img src="https://latex.codecogs.com/png.latex?C%5E%7Bn-1%7DX">). <img src="https://latex.codecogs.com/png.latex?T%5E2"> gate, which is just CNOT, need no further decomposition. <img src="https://latex.codecogs.com/png.latex?T%5E3"> gate, the regular Toffoli gate, can be decomposed into CNOT+1q gates as follows.</p>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-2">qc.ccx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-3">qc.decompose().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="5">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This decomposition has 6 CNOT gates as well as depth 6 with respect to CNOT gates. Total depth is 11. We will be looking for similar decompositions of <img src="https://latex.codecogs.com/png.latex?T%5E%7Bn%7D"> with <img src="https://latex.codecogs.com/png.latex?n%5Cge3">. The goal of the Classiq challenge was to find decompositions with the smallest total depth. Other optimization metrics such as CNOT count, CNOT depth or T count and T depth may be preferred for some applications. Here T without a superscript refers to the magic <a href="https://qiskit.org/documentation/stubs/qiskit.circuit.library.TGate.html">T gates</a>, which are important for fault-tolerant circuits. Fortunately, these metrics are not that much decoupled, and a circuit efficient in one respect is also often very efficient in others, see again Maslov’s <a href="https://arxiv.org/abs/1508.03273">paper</a> for examples.</p>
</section>
<section id="ancilla-qubits" class="level2">
<h2 class="anchored" data-anchor-id="ancilla-qubits">Ancilla qubits</h2>
<p>As CNOT+1q gates set is universal, it can be used to decompose an arbitrary <img src="https://latex.codecogs.com/png.latex?n-">qubit gate, including <img src="https://latex.codecogs.com/png.latex?T%5En">. The efficiency of this decomposition can be greatly enhanced if ancilla qubits are provided. Here is an example using a clean ancilla qubit to decompose <img src="https://latex.codecogs.com/png.latex?T%5E4"> into three regular Toffoli gates.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/T4/T4.png" alt="Drawing" style="width: 250px;"></p>
<p>The first <img src="https://latex.codecogs.com/png.latex?T%5E3"> stores <img src="https://latex.codecogs.com/png.latex?q_0%20%5Cland%20q_1"> in the ancilla qubit. The second <img src="https://latex.codecogs.com/png.latex?T%5E3"> combines this with an additional control and applies to the target. The last step is called <em>uncomputation</em>, it is only to restore the state of the ancilla bit to <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> (<img src="https://latex.codecogs.com/png.latex?T%5E3"> applied twice is the identity). For a great introduction covering Toffoli gates, their decompositions, various type of ancilla qubits and more see this <a href="https://algassert.com/circuits/2015/06/05/Constructing-Large-Controlled-Nots.html">blog series</a> by Craig Gidney.</p>
<p>As constructed, the circuit for <img src="https://latex.codecogs.com/png.latex?T%5E4"> with one clean ancilla uses three <img src="https://latex.codecogs.com/png.latex?T%5E3"> and has CNOT count <img src="https://latex.codecogs.com/png.latex?3%5Ctimes6=18">. I will now show how this can be compressed using relative phase Toffoli gates.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/relative_toffoli.png" alt="Drawing" style="width: 600px;"></p>
<p>(The wiggly lines are to emphasize the wave nature of quantum mechanics. Seriously though, the words ‘relative phase’ remind me of the phase shifts in signal processing, and I had to come up with some pic for this post anyway.)</p>
</section>
</section>
<section id="relative-phase-toffoli-gates" class="level1">
<h1>Relative phase Toffoli gates</h1>
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<p>Relative phase Toffoli gates <img src="https://latex.codecogs.com/png.latex?RT%5En"> are defined as standard Toffoli gates <img src="https://latex.codecogs.com/png.latex?T%5En"> followed by a diagonal gate <img src="https://latex.codecogs.com/png.latex?D%5En">. I will draw them as follows.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/RT3/RT3.png" alt="Drawing" style="width: 400px;"></p>
<p>So, the boxed Toffoli gate stands for the relative phase Toffoli gate. The boxed controlled Z gate (last gate on the right circuit) will be my notation for the diagonal gate itself. Note that this representation is not standard (which I found difficult to typeset), my apologies.</p>
</section>
<section id="diagonal-gates" class="level2">
<h2 class="anchored" data-anchor-id="diagonal-gates">Diagonal gates</h2>
<p>Diagonal gate is just what it sounds, a gate with only diagonal entries. For instance, a general 2q diagonal gate gate be written as <img src="https://latex.codecogs.com/png.latex?D=e%5E%7B%5Cphi_0%7D%7C00%5Crangle%5Clangle00%7C+e%5E%7B%5Cphi_1%7D%7C01%5Crangle%5Clangle01%7C+e%5E%7B%5Cphi_2%7D%7C10%5Crangle%5Clangle10%7C+e%5E%7B%5Cphi_3%7D%7C11%5Crangle%5Clangle11%7C">. The relative phase Toffoli gate is called that way because its elements only differ from the original Toffoli gate by a phase. Crucially, different elements may differ by different phases (so this is not the irrelevant global phase). Diagonal gates themselves are non-trivial objects. For example, up to a conjugation by two Hadamard gates <img src="https://latex.codecogs.com/png.latex?n-">qubit Toffoli gate is equivalent to <img src="https://latex.codecogs.com/png.latex?n-">qubit controlled Z gate, which is diagonal.</p>
</section>
<section id="relative-gates-are-shorter" class="level2">
<h2 class="anchored" data-anchor-id="relative-gates-are-shorter">Relative gates are shorter</h2>
<p>Why care about the relative phase gates? First, they can have shorter representations compared to the original gates. This might look unreasonable at first, because we are <em>adding</em> an extra diagonal gate. However, the extra gate can <em>cancel</em> part of the original circuit. So, by appending a suitable diagonal gate one can make the relative phase Toffoli gate <em>shorter</em> than the Toffoli gate itself. Here is an example of <img src="https://latex.codecogs.com/png.latex?RT%5E3"> gate.</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build circuit</span></span>
<span id="cb6-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-4">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-6">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-7">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-8">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-9">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-10">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-11">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-12"></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store to gate</span></span>
<span id="cb6-14">RT3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT3'</span>)</span>
<span id="cb6-15">RT3dg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RT3.inverse()</span>
<span id="cb6-16">RT3dg.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT3dg'</span></span>
<span id="cb6-17"></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb6-19">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Note that it only has 3 CNOT gates, while <img src="https://latex.codecogs.com/png.latex?T%5E3"> requires 6 gates. Here is a numeric way to check that this gate is indeed <img src="https://latex.codecogs.com/png.latex?RT%5E3">.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> is_relative(U, V):</span>
<span id="cb7-2">    D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V.conj().T <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> U</span>
<span id="cb7-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If and only if D is unitary and diagonal the check is True.</span></span>
<span id="cb7-4">    check <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.allclose(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(D), np.eye(U.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])) </span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> check</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb7-8">u_RT3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb7-9">qc_T3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb7-10">qc_T3.ccx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-11">u_T3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc_T3).data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regular Toffoli gate.</span></span>
<span id="cb7-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is RT3:'</span>, is_relative(u_RT3, u_T3))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>is RT3: True</code></pre>
</div>
</div>
</section>
<section id="diagonal-gates-commute-with-controls" class="level2">
<h2 class="anchored" data-anchor-id="diagonal-gates-commute-with-controls">Diagonal gates commute with controls</h2>
<p>Second, the relative phase Toffoli gates can be used instead of the standard Toffoli gates in compute-uncompute pairs. For example, <img src="https://latex.codecogs.com/png.latex?T%5E4"> with one clean ancilla can be decomposed in the following way.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/T4_with_RT3/T4_with_RT3.png" alt="Drawing" style="width: 250px;"></p>
<p>Here the second relative gate should be <img src="https://latex.codecogs.com/png.latex?(RT%5E3)%5E%5Cdagger"> but I leave it implicit in the notation. OK, but why can we replace <img src="https://latex.codecogs.com/png.latex?T%5E3"> by <img src="https://latex.codecogs.com/png.latex?RT%5E3">? Because a diagonal gate commutes with a control.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/D_commute/D_commute.png" alt="Drawing" style="width: 400px;"></p>
<p>Wires with backslash on them denote a group of several qubits. <img src="https://latex.codecogs.com/png.latex?U"> can be any operator on <img src="https://latex.codecogs.com/png.latex?n"> qubits. The diagonal gate can also act on any number of qubits <img src="https://latex.codecogs.com/png.latex?k+m">. And they can intersect along any number of controls <img src="https://latex.codecogs.com/png.latex?m">. To show this in full generality would be a bit of a notational mess. Here is the idea though. General diagonal gate can be represented as <img src="https://latex.codecogs.com/png.latex?D=%5Csum_n%20P_n%20e%5E%7Bi%5Cphi_n%7D"> where <img src="https://latex.codecogs.com/png.latex?P_n=%7Cn%5Crangle%5Clangle%20n%7C"> is the projector on <img src="https://latex.codecogs.com/png.latex?n-">th basis state. General controlled unitary is <img src="https://latex.codecogs.com/png.latex?CU%20=%20P_0%5Cotimes%20I+P_1%5Cotimes%20U">. The matrix <img src="https://latex.codecogs.com/png.latex?U"> is only applied to the qubits that are not touched by the diagonal gate, therfore <img src="https://latex.codecogs.com/png.latex?D"> and <img src="https://latex.codecogs.com/png.latex?CU"> only intersect along wires containing projectors. Since projectors commute, the whole operators also commute. Here is an illustration for the 2q D and <img src="https://latex.codecogs.com/png.latex?n">-qubit U</p>
<p><img src="https://latex.codecogs.com/png.latex?%5CBig%5B%5CBig(e%5E%7B%5Cphi_0%7D%7C00%5Crangle%5Clangle00%7C+e%5E%7B%5Cphi_1%7D%7C01%5Crangle%5Clangle01%7C+e%5E%7B%5Cphi_2%7D%7C10%5Crangle%5Clangle10%7C+e%5E%7B%5Cphi_3%7D%7C11%5Crangle%5Clangle11%7C%5CBig)%5Cotimes%20I_%7Bn+1%7D,%20I_1%5Cotimes%20%7C0%5Crangle%5Clangle0%7C%5Cotimes%20I_%7Bn%7D+I_1%5Cotimes%20%7C0%5Crangle%5Clangle0%7C%5Cotimes%20U_n%5CBig%5D=0"></p>
<p>Since <img src="https://latex.codecogs.com/png.latex?RT%5E3"> contains 3 CNOT gates the new construction for <img src="https://latex.codecogs.com/png.latex?T%5E4"> now has only 12 CNOT gates, significantly improving on the preceding 18 CNOT decomposition.</p>
</section>
<section id="special-relative-phase-gates" class="level2">
<h2 class="anchored" data-anchor-id="special-relative-phase-gates">Special relative phase gates</h2>
<p>Here is another version of <img src="https://latex.codecogs.com/png.latex?RT%5E3">, known as a <em>special</em> relative phase Toffoli gate <img src="https://latex.codecogs.com/png.latex?SRT%5E3">.</p>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Similar to the privious circuit but with an additional CZ gate</span></span>
<span id="cb9-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-4">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-5">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-6">qc.append(RT3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb9-7">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.decompose(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT3'</span>)</span>
<span id="cb9-8">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tdg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>], optimization_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-9">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store to gate</span></span>
<span id="cb9-12">SRT3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SRT3'</span>)</span>
<span id="cb9-13">SRT3dg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.inverse().to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SRT3dg'</span>)</span>
<span id="cb9-14"></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb9-16">u_SRT3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb9-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is relative:'</span>, is_relative(u_SRT3, u_T3))</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb9-20">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>is relative: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>This circuit has one more CNOT gate than <img src="https://latex.codecogs.com/png.latex?RT%5E3"> defined above. A special feature of this gate (and the reason it is called special) is that the diagonal gate has a restricted form – it only acts on the first two qubits, graphically</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/SRT3/SRT3.png" alt="Drawing" style="width: 400px;"></p>
</section>
<section id="rt4" class="level2">
<h2 class="anchored" data-anchor-id="rt4"><img src="https://latex.codecogs.com/png.latex?RT%5E4"></h2>
<p>As suggested by Maslov, this gate can be used to construct <img src="https://latex.codecogs.com/png.latex?RT%5E4"> out of <img src="https://latex.codecogs.com/png.latex?RT%5E3">. Indeed, take a look at the following circuit.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/RT4/RT4.png" alt="Drawing" style="width: 500px;"></p>
<p>It is obtained from <img src="https://latex.codecogs.com/png.latex?RT%5E3"> by adding an extra qubit and replacing the middle CNOT with <img src="https://latex.codecogs.com/png.latex?SRT%5E3">. Why does this work? The new circuit must (1) do what the 3q circuit did when the state of <img src="https://latex.codecogs.com/png.latex?q_0"> is <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> and (2) do nothing if the state of <img src="https://latex.codecogs.com/png.latex?q_0"> is <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">. When the new qubit is in state <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle">, the <img src="https://latex.codecogs.com/png.latex?RT%5E3"> gate behaves just like a CNOT between <img src="https://latex.codecogs.com/png.latex?q_1"> and <img src="https://latex.codecogs.com/png.latex?q_3"> and we are back to the 3q circuit behavior. When the new qubit is <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle">, the <img src="https://latex.codecogs.com/png.latex?RT%5E3"> gate becomes 3q identity, and all gates around it cancel in pairs, so the whole circuit is 4q identity. Good. Finally, the additional diagonal gate acting on <img src="https://latex.codecogs.com/png.latex?q_0,%20q_1"> can be moved to the right and combined with the diagonal gate defining <img src="https://latex.codecogs.com/png.latex?RT%5E3">. Note that if we inserted <img src="https://latex.codecogs.com/png.latex?RT%5E3"> instead of <img src="https://latex.codecogs.com/png.latex?SRT%5E3"> in the middle, this wouldn’t work because 3q diagonal gate would not commute with gates on qubit <img src="https://latex.codecogs.com/png.latex?q_3">. This implementation of <img src="https://latex.codecogs.com/png.latex?RT%5E4"> has 6 CNOT gates, which is apparently the optimal result.</p>
<p>Here is an explicit implementation.</p>
<div class="cell" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build circuit</span></span>
<span id="cb11-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-4">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-6">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-7">qc.append(SRT3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb11-8">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-9">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-10">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-11">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-12">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.decompose(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SRT3'</span>)</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store to gate</span></span>
<span id="cb11-15">RT4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT4'</span>)</span>
<span id="cb11-16">RT4dg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RT4.inverse()</span>
<span id="cb11-17">RT4dg.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT4dg'</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb11-20">u_RT4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb11-21">qc_T4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb11-22">qc_T4.mct([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb11-23">u_T4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc_T4).data</span>
<span id="cb11-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is relative:'</span>, is_relative(u_RT4, u_T4))</span>
<span id="cb11-25"></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb11-27">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>is relative: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="9">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="rt5" class="level2">
<h2 class="anchored" data-anchor-id="rt5"><img src="https://latex.codecogs.com/png.latex?RT%5E5"></h2>
<p>The final ingredient I will need is <img src="https://latex.codecogs.com/png.latex?RT%5E5">. It is not present in Maslov’s paper and I haven’t found it with a brief search in other literature, but we can use the same idea to build <img src="https://latex.codecogs.com/png.latex?RT%5E5"> out of <img src="https://latex.codecogs.com/png.latex?RT%5E4"> and <img src="https://latex.codecogs.com/png.latex?SRT%5E3">. Namely, in the diagram above we replace both CNOTs acting between <img src="https://latex.codecogs.com/png.latex?q_0"> and <img src="https://latex.codecogs.com/png.latex?q_3"> by <img src="https://latex.codecogs.com/png.latex?SRT%5E3">. This leads to the following circuit.</p>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build circuit</span></span>
<span id="cb13-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb13-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-4">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-6">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-7">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-8">qc.barrier()</span>
<span id="cb13-9">qc.append(SRT3dg, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb13-10">qc.barrier()</span>
<span id="cb13-11">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-12">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-13">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-14">qc.barrier()</span>
<span id="cb13-15">qc.append(SRT3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb13-16">qc.barrier()</span>
<span id="cb13-17">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-18">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-19">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-20">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-21">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-22">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-23">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-24">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-25"></span>
<span id="cb13-26">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.decompose(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT3'</span>)</span>
<span id="cb13-27">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tdg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>], optimization_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb13-28"></span>
<span id="cb13-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb13-30">u_RT5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb13-31">qc_T5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb13-32">qc_T5.mct([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-33">u_T5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc_T5).data</span>
<span id="cb13-34"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is relative:'</span>, is_relative(u_RT5, u_T5))</span>
<span id="cb13-35"></span>
<span id="cb13-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb13-37">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>is relative: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="10">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-11-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Subcircuits between barriers are the inserted <img src="https://latex.codecogs.com/png.latex?SRT%5E3"> gates. This circuit has 12 CNOT gates. Apparently, by looking at it carefully enough one can find a pair of CNOT gates that cancel each other. I stumbled upon this fact by accident. I tried to substitute shorter <img src="https://latex.codecogs.com/png.latex?RT%5E3"> instead of <img src="https://latex.codecogs.com/png.latex?SRT%5E3"> here and was sure it would fail, but it worked. The resulting decomposition of <img src="https://latex.codecogs.com/png.latex?RT%5E5"> has only 10 CNOT gates. Here is the circuit.</p>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build circuit</span></span>
<span id="cb15-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb15-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-4">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-6">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-7">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-8">qc.append(RT3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb15-9">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-10">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-11">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-12">qc.append(RT3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>])</span>
<span id="cb15-13">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-14">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-15">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-16">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-17">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-18">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-19">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-20">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-21"></span>
<span id="cb15-22">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.decompose(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT3'</span>)</span>
<span id="cb15-23">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tdg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>], optimization_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb15-24"></span>
<span id="cb15-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store to gate</span></span>
<span id="cb15-26">RT5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT5'</span>)</span>
<span id="cb15-27">RT5dg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RT5.inverse()</span>
<span id="cb15-28">RT5dg.label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RT5dg'</span></span>
<span id="cb15-29"></span>
<span id="cb15-30"></span>
<span id="cb15-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb15-32">u_RT5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb15-33">qc_T5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb15-34">qc_T5.mct([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-35">u_T5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc_T5).data</span>
<span id="cb15-36"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is relative:'</span>, is_relative(u_RT5, u_T5))</span>
<span id="cb15-37"></span>
<span id="cb15-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb15-39">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>is relative: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="11">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="generalization-of-relative-phase-gates" class="level2">
<h2 class="anchored" data-anchor-id="generalization-of-relative-phase-gates">Generalization of relative phase gates</h2>
<p>It is possible to further generalize relative phase gates by allowing more general operators which cancel in compute-uncompute pairs. See Maslov’s paper for the use of more general gates with dirty ancilla qubits.</p>
</section>
</section>
<section id="solution-to-the-classiq-problem" class="level1">
<h1>Solution to the Classiq problem</h1>
<p>Now all of the ingredients are in place. The original problem statement is <a href="https://www.classiq.io/competition/toffoli">here</a>. One needs to decompose a Toffoli gate with 14 controls and one target using no more than 5 clean ancilla qubits, 20 qubits in total. The ancilla must be returned into original state. Best solution is the one with the smallest depth. Here is my solution.</p>
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/T15/T15.png" alt="Drawing" style="width: 300px;"></p>
<p>The intuition is a follows. Having the smallest depth means that we need to perform as many operations in parallel as possible. The first layer in the circuit divides the 14 control qubits into four groups <img src="https://latex.codecogs.com/png.latex?14=4+4+3+3">, and stores their logical ANDs in four of the available ancilla qubits. It remains to compute the logical AND of these four ancilla and write it to the target qubit, i.e.&nbsp;to perform <img src="https://latex.codecogs.com/png.latex?T%5E5"> gate. To make this operation efficient we have one more clean ancilla available. Layers 2, 3 and 4 thus perform <img src="https://latex.codecogs.com/png.latex?T%5E5"> gate with the use of the last clean ancilla. The very last layer uncomputes the first. This circuit works if all of the gates used are plain Toffoli gates. However, using relative phase Toffoli gates in compute-uncompute pairs significantly reduces the depth.</p>
<p>The expected CNOT depth is <img src="https://latex.codecogs.com/png.latex?38=2%5Ctimes%2010+2%5Ctimes%206+6">, where <img src="https://latex.codecogs.com/png.latex?10"> is the depth of <img src="https://latex.codecogs.com/png.latex?RT%5E5">, 6 of <img src="https://latex.codecogs.com/png.latex?RT%5E4"> and the last 6 is the depth of <img src="https://latex.codecogs.com/png.latex?T%5E3">. The 1q depth should be about twice as much. Note that by the rules of the competition general single-qubit gates can be used, which means that, say, <img src="https://latex.codecogs.com/png.latex?H"> and <img src="https://latex.codecogs.com/png.latex?T"> gates can be combined together and count as a single gate.</p>
<p>After using <code>qiskit</code> transpiler the final CNOT and total depth of the circuit are a bit smaller than estimated above. I am not sure where the optimization comes from, but many thanks to the transpiler! Here is a complete solution coded in <code>qiskit</code>.</p>
<div class="cell" data-scrolled="true" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">c41 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c41'</span>)</span>
<span id="cb17-2">c42 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c42'</span>)</span>
<span id="cb17-3">c31 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c31'</span>)</span>
<span id="cb17-4">c32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c32'</span>)</span>
<span id="cb17-5"></span>
<span id="cb17-6">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'a</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)]</span>
<span id="cb17-7">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trgt'</span>)</span>
<span id="cb17-8"></span>
<span id="cb17-9">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(c41, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], c42, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c31, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], c32, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], t)</span>
<span id="cb17-10"></span>
<span id="cb17-11">qc.append(RT5, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb17-12">qc.append(RT5, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb17-13">qc.append(RT4, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)))</span>
<span id="cb17-14">qc.append(RT4, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)))</span>
<span id="cb17-15"></span>
<span id="cb17-16">qc.append(RT4, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>])</span>
<span id="cb17-17">qc.ccx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>)</span>
<span id="cb17-18">qc.append(RT4dg, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>])</span>
<span id="cb17-19"></span>
<span id="cb17-20">qc.append(RT5dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb17-21">qc.append(RT5dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb17-22">qc.append(RT4dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)))</span>
<span id="cb17-23">qc.append(RT4dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)))</span>
<span id="cb17-24"></span>
<span id="cb17-25">qc.draw()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre style="word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace">       ┌──────┐                       ┌────────┐
c41_0: ┤0     ├───────────────────────┤0       ├
       │      │                       │        │
c41_1: ┤1     ├───────────────────────┤1       ├
       │      │                       │        │
c41_2: ┤2 RT5 ├───────────────────────┤2 RT5dg ├
       │      │                       │        │
c41_3: ┤3     ├───────────────────────┤3       ├
       │      │┌──────┐     ┌────────┐│        │
   a1: ┤4     ├┤0     ├─────┤0       ├┤4       ├
       ├──────┤│      │     │        │├────────┤
c42_0: ┤0     ├┤      ├─────┤        ├┤0       ├
       │      ││      │     │        ││        │
c42_1: ┤1     ├┤      ├─────┤        ├┤1       ├
       │      ││      │     │        ││        │
c42_2: ┤2 RT5 ├┤      ├─────┤        ├┤2 RT5dg ├
       │      ││      │     │        ││        │
c42_3: ┤3     ├┤      ├─────┤        ├┤3       ├
       │      ││      │     │        ││        │
   a2: ┤4     ├┤1     ├─────┤1       ├┤4       ├
       ├──────┤│      │     │        │├────────┤
c31_0: ┤0     ├┤      ├─────┤        ├┤0       ├
       │      ││      │     │        ││        │
c31_1: ┤1     ├┤  RT4 ├─────┤  RT4dg ├┤1       ├
       │  RT4 ││      │     │        ││  RT4dg │
c31_2: ┤2     ├┤      ├─────┤        ├┤2       ├
       │      ││      │     │        ││        │
   a3: ┤3     ├┤2     ├─────┤2       ├┤3       ├
       ├──────┤│      │     │        │├────────┤
c32_0: ┤0     ├┤      ├─────┤        ├┤0       ├
       │      ││      │     │        ││        │
c32_1: ┤1     ├┤      ├─────┤        ├┤1       ├
       │  RT4 ││      │     │        ││  RT4dg │
c32_2: ┤2     ├┤      ├─────┤        ├┤2       ├
       │      ││      │     │        ││        │
   a4: ┤3     ├┤      ├──■──┤        ├┤3       ├
       └──────┘│      │  │  │        │└────────┘
   a5: ────────┤3     ├──■──┤3       ├──────────
               └──────┘┌─┴─┐└────────┘          
 trgt: ────────────────┤ X ├────────────────────
                       └───┘                    </pre>
</div>
</div>
<p>The CNOT and overall depth of the circuit can be computed as follows.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">qc_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u'</span>])</span>
<span id="cb18-2"></span>
<span id="cb18-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total depth:'</span>, qc_final.depth())</span>
<span id="cb18-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CX depth:'</span>, qc_final.depth(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gate: gate[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>total depth: 70
CX depth: 36</code></pre>
</div>
</div>
<p>It is of course possible to use other ways of splitting the control qubits into groups and/or using the ancilla qubits differently. I’m really curious to look at solutions submitted by other participants, including the best one due to Soshun Naito. Looking forward to Classiq announcement!</p>
<p><strong><em>Update</em></strong>: As noted by <a href="https://www.linkedin.com/in/gramolin/">Alexander Gramolin</a>, this decomposition can be improved by using an upgraded version of the Toffoli 3 gate sitting in the middle of the circuit. My implementation above uses standard <code>qiskit</code> decomposition with depth 11. A better option is to use depth-8 Toffoli gate from <a href="https://arxiv.org/abs/1206.0758">this paper</a> (be sure Dmitri Maslov if one of the authors:):</p>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Build circuit</span></span>
<span id="cb20-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-3">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-4">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb20-5">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-6">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-7">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-8">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-9">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-10">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-11">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-12">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-13">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-14">qc.t(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-15">qc.tdg(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-16">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb20-17">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-18"></span>
<span id="cb20-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store to gate</span></span>
<span id="cb20-20">T3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_instruction(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'T3'</span>)</span>
<span id="cb20-21"></span>
<span id="cb20-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check that it is indeed the relative phase Toffoli 3 gate</span></span>
<span id="cb20-23">u_T3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb20-24">qc_T3_standard <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb20-25">qc_T3_standard.ccx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-26">u_T3_standard <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc_T3_standard).data</span>
<span id="cb20-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'is T3:'</span>, np.allclose(u_T3, u_T3_standard))</span>
<span id="cb20-28"></span>
<span id="cb20-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Draw</span></span>
<span id="cb20-30">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>output)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>is T3: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="14">
<p><img src="https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-Classiq Toffoli_files/figure-html/cell-15-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>This reduces <img src="https://latex.codecogs.com/png.latex?CX"> depth by 1 and total depth by 4!</p>
<div class="cell" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">c41 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c41'</span>)</span>
<span id="cb22-2">c42 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c42'</span>)</span>
<span id="cb22-3">c31 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c31'</span>)</span>
<span id="cb22-4">c32 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c32'</span>)</span>
<span id="cb22-5"></span>
<span id="cb22-6">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'a</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)]</span>
<span id="cb22-7">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumRegister(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'trgt'</span>)</span>
<span id="cb22-8"></span>
<span id="cb22-9">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(c41, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], c42, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], c31, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], c32, a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], t)</span>
<span id="cb22-10"></span>
<span id="cb22-11">qc.append(RT5, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb22-12">qc.append(RT5, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb22-13">qc.append(RT4, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)))</span>
<span id="cb22-14">qc.append(RT4, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)))</span>
<span id="cb22-15"></span>
<span id="cb22-16">qc.append(RT4, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>])</span>
<span id="cb22-17">qc.append(T3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">17</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">19</span>])</span>
<span id="cb22-18">qc.append(RT4dg, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>])</span>
<span id="cb22-19"></span>
<span id="cb22-20">qc.append(RT5dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)))</span>
<span id="cb22-21">qc.append(RT5dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)))</span>
<span id="cb22-22">qc.append(RT4dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)))</span>
<span id="cb22-23">qc.append(RT4dg, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>)))</span>
<span id="cb22-24"></span>
<span id="cb22-25">qc_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'u'</span>])</span>
<span id="cb22-26"></span>
<span id="cb22-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total depth:'</span>, qc_final.depth())</span>
<span id="cb22-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CX depth:'</span>, qc_final.depth(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gate: gate[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>total depth: 66
CX depth: 35</code></pre>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>compilation</category>
  <category>paper review</category>
  <guid>https://idnm.github.io/blog/posts/classiq_toffoli/2022-06-21-classiq toffoli.html</guid>
  <pubDate>Mon, 20 Jun 2022 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/classiq_toffoli/relative_toffoli.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Classiq coding competition – state preparation</title>
  <link>https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-classiq lognormal.html</link>
  <description><![CDATA[ 




<div class="cell" data-outputid="c87f5f81-dde7-402e-83c4-482e53e71fb0" data-execution_count="31">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-2">   <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> qiskit</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install qiskit</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-7">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pylatexenc</span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-9">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pylatexenc</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-12">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optax</span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-14">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install optax</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.cmacom<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>idnm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>classiq_lognormal</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classiq_lognormal.l2_error <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> l2</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb1-20"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> namedtuple</span>
<span id="cb1-21"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-24"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-25"></span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> grad, jit, vmap, random, value_and_grad, lax</span>
<span id="cb1-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> jnp</span>
<span id="cb1-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> erf</span>
<span id="cb1-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optax</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.quantum_info <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Statevector, Operator</span>
<span id="cb1-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit, transpile</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/classiq_state_preparation/2022-06-21-Classiq%20lognormal.ipynb"> <img src="https://idnm.github.io/blog/posts/classiq_state_preparation/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Recently, I submitted a solution to to the <a href="https://www.classiq.io/competition/state-preparation">state preparation problem</a> of the Classiq coding competition. The goal was to prepare a lognormal distribution (with <img src="https://latex.codecogs.com/png.latex?%5Cmu=0,%5Csigma=0.1">) using no more than 10 qubits and within <img src="https://latex.codecogs.com/png.latex?0.01"> L2 accuracy. Crucially, the problem allowed to use any discretization when mapping from the wavefunction to the lognormal probability density. I did not have any good idea about how to solve the problem in a scalable way, but was curious how far one can go by a direct optimization of low-depth circuits jointly with the discretization intervals. To my surprise, depth 1 circuits on 10 (and in fact 9) qubits are already sufficient to achieve the target accuracy. I believe this solution would be eligible for a prize, but I submitted it later than other participants.</p>
<p>What follows is the notebook I submitted as a solution. It was intended for referees of the competition, who needed no introduction to the problem. In the end, I do not think this solution is particularly illuminating, so I will not try to turn it into a comprehensible blog post. But I also see no harm publishing it, so here we go.</p>
</section>
<section id="readme" class="level1">
<h1>Readme</h1>
<section id="solution" class="level2">
<h2 class="anchored" data-anchor-id="solution">Solution</h2>
<p>Solution to the problem is the following QASM string and byte-represetation of the <code>np.array</code> containing discretization.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">qasm_solution <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'OPENQASM 2.0;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">include "qelib1.inc";</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">qreg q[10];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(0.74283063,5.2044897,0.98926634) q[0];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(3.6797547,5.5519018,5.144691) q[1];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(1.8728536,5.2152901,1.8132132) q[2];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(4.5905914,0.059626058,4.4641838) q[3];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(4.6174035,4.488265,4.80723) q[4];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(4.5903974,2.4311147,5.9549437) q[5];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(4.687211,0.61535245,1.6999713) q[6];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(4.7381563,5.1480927,0.86016178) q[7];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(1.550415,0.87675416,1.7371591) q[8];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u(1.5602221,2.2341533,0.83279055) q[9];</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb2-2">x_solution_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'A</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\x1e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd\xa6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h$?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11\xcd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j,?n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y1?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3?t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7?Z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/:?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!;?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">;?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> =?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xde</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t&gt;?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8a\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j@?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89\xd0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.A?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03\xf9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SB?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0f\xa8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">B?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2\xf9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">B?sFC?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc0\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">C?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfb\xd2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">C?k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D?UTD?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xed\xc8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb8\x00</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">E?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5E?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hE?%</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">E?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\xd0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">E?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4\x05</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8F?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xff</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hF?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb3\x1c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">TG?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G?&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G?k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">H?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xad</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">LH?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">yH?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">H?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xde\xd4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">H?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?,1I?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6\xb0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb2\xd8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfd\xfe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I?+ J?1@J?*_J?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}J?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8\xb7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9\xd3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3\xee</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J?6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,K?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JK?xfK?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xde\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?Z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfe\xb8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb\xd2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L?&gt;7L?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">VL?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">uL?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x07\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L?J</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L?)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec\r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,M?lJM?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hM?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xba\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb5\xbb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4\xd6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc\xf0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0f\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N?0;N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x05</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SN?,jN?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?G</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\xcc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6\xe4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\xfc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1e\x14</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xab</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@O?:^O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">zO?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9e\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0\xff</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O?v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?"5P?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">PP?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">kP?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x07\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\xb9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6\x01</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd1\x18</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?*/Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DQ?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ZQ?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">oQ?_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\xaf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\xdc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91\x07</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0R?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">DR?b_R?MyR?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?C</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?i</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe5\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?+#S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xab</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;S?tUS?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mS?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x17\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6\xb3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0f\xca</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd3\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GT?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">nT?"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91\xae</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xef\xc2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?B</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4\xfe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T?~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*U?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CU?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[U?(sU?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?l</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\xb7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfe\xfe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x12</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.V?ZEV?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">rV?w</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?8</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?K</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3\xcf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11\xe1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3\x12</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xad</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JW?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[W?!mW?B~W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf9\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?B</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb6\xca</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec\xf3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">W?T</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/X?qBX?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">XX?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">nX?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfc\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\xab</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd\xbf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb3\x0b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc1\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?X/Y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">AY?CRY?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">cY?ysY?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb0\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?g</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa\xab</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?U</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\xe0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc7\xf1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y?[</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\x18</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CZ?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">XZ?smZ?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xba\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3\xa8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?K</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb6\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90\xff</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85\x14</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">([?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;[?7P[?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae\xe0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe2\xa7\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd1\xe6\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#]?E^]?W</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xef\xe3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]?J#^?p`^?Z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^?1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^?#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_?1H_?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x05\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_?)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`?.``?=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\xe2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb\x1f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[a?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4\xe3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$b?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">cb?*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd\xde</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b?v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c?VRc?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1a\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1a\xc2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82\xf7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c?L+d?$_d?o</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d?S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\xf1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d?4)e?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^e?/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">e?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf\xc5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">e?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac\xf8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">e?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)f?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Yf?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f?p</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">g?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?g?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">yg?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86\xb2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">g?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">g?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> h?hUh?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4\xce</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfa\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">i?rAi?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x12</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">zi?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x12\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">i?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9c\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">i?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8\x1a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j?.Hj?|tj?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb0\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\xc9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\xf4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j?6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k?`Ek?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lk?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\xc7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">l?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Gl?Bql?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">l?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\\xc1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">l?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc\xf6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">l?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xed</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*m?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]m?%</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6\xc0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m?z n?~Nn?o</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf7\xb8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n?6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n?%</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o?ZPo?I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0f\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o?h</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">p?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;p?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">hp?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">p?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\xbf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">p?x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">p?,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x14</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lq?&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\xc8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">q?/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">q?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!r?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Mr?Axr?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe9\xa1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">r?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xda</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">r?t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s?CGs?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{s?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa0\xb0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s?7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5\x16</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Gt?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15\xba</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t?7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u?F]u?7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\xf8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*v?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x10\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v?,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v?*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc\x18</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w?0Fw?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">rw?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97\xa6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w?|</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w?S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;x?&amp;mx?-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x?5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x?0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">uy?t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&amp;z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`z?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">z?B</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">z?F</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P{?,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb0\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">E|?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf6\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc0\xba</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.}?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f}?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1e\xd4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}?M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~?r?~?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s~?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2\xb0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe2\xec</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4\'\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf2\x9b\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3\x06\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?$"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Pl</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9\xb3\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81\xd7\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d\xfa\x80</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18\x1d\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b\x8e\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91\xb4\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xda\x81</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7\x00\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?]&amp;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?`K</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd0\x8f\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaf\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?K</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xce\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb6\xec\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d\x0b\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?m</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa9\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc\xca\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe\xeb\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19\r\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xde</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?"N</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xed\xc3\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t\xee\x84</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84\x17\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?4k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\xbc\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xec\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb6\x1b\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?fJ</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?|x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa7\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb8\xd5\x86</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x03\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1f\xb9\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\xe5\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\x12\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\x97\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95\xcb\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xff\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?B2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8\x98\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf8\xcb\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0\xfe\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?W1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?g</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac\x01\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd\x8d\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9\xd4\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x1b\x8c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?{b</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcf\xb7\x8c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?p</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xba\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06\x14\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\xc9\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?+&amp;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?{&amp;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&amp;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18\'\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?d</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb1\'\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfc\'\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?G(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?6)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?)*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?x*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">*</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?x+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?A,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x04</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?d-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? .</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?`/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?00</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Y1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?y2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?43</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?n5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?36</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?N7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?F8</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?49</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?":</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x05</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x07</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?x&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?V?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? @</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?EA</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">A</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">B</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?qB</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">B</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?EC</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xab</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">C</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x14</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?yD</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??E</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">E</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?FF</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">F</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?DG</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">G</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?=H</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">H</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?DJ</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?NK</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">K</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?XL</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">L</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?TM</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?NN</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">N</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??O</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">O</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-P</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x13</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">R</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x17</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">U</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?AV</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xde</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?xW</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&lt;Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?xZ</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?b</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??^</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?r_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x07</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Gb</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Yc</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?1e</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">e</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?`f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">g</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x17</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">i</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Uj</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?zl</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-m</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?ro</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?8p</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">p</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?|r</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?8s</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">t</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?^u</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x11</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?pw</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?ky</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?0z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xef</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?b|</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x7f\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\x81\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee\x81\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xce\x82\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb0\x83\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d\x84\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?f</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1d\x89\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\t\x8a\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf6\x8a\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe1\x8b\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\x8c\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x8d\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?l</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8e\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb\x8f\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4\x90\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19\x92\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc\x92\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19\x95\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0\x95\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4\x96\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?k</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xea\x98\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x99\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2\x9a\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99\x9b\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d\x9c\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?l</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9e\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">??</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa0\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?3</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa7\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18\xa8\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06\xa9\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf8\xa9\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4\xaa\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc\xab\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae\xac\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94\xad\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?s</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Q</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaf\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb0\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'\xb1\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb2\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x14\xb3\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03\xb4\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\xb4\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe2\xb5\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\xb6\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xad\xb7\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe2\xb8\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x13\xba\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbb\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?^</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85\xbd\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\xbe\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc1\xbf\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6\xc0\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1d\xc2\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\\xc3\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97\xc4\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8\xc5\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01\xc7\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe4\xce\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd3\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95\xdb\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc7\xdf\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe5\xe3\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf1\xe7\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6\xeb\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92\xf0\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&amp;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa\xf9\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15\xfe\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d\x02\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf0\x06\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0b\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?u</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0f\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8\x1a\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?b </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">%</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?S+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?8;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?^A</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?dG</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?PM</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">^</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?qd</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">j</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">o</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?"u</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdd\x7f\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x85\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x8a\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7\x8f\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcc\x94\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcd\x9a\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb1\xa0\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe6\xb1\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c\xb7\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x15\xbd\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86\xc2\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee\xc9\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd1\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?c</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80\xe6\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xed\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?X</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x13\xfb\x90</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08\x03\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8\n\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\x12\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x10\x1a\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?6)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?6&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x7f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">D</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">P</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">V</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd6\\\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?bo</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbf\x89\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x84\x96\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc\x9c\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\xad\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb9\xb5\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2\xbd\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe8\xc5\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xeb\xcd\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc8\xd5\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82\xdd\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa5\xe6\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\xef\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?r</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf8\x91</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">? </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xea\t\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\x12\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\x1b\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?e#</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?!4</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?H&lt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?MD</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?nL</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?fT</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">c</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">m</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?u</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?8</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5\x98\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?P</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa0\xa9\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfd\xb4\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc0\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?0</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00\xd6\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfe\xe0\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\xeb\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?i</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf6\x92</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdf\x00\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?@</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?i</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?g%</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?41</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-=</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">H</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">T</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?kk</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">v</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2\x81\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa9\x8c\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7\x97\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98\xa2\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?O</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xad\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd7\xb7\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc4\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x92\xd0\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa9\xdc\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x90\xe8\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3\xf4\x93</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x86\x00\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?&gt;</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x0c\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2\x17\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x83\'\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?ZF</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?rU</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcf</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">d</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xef</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xda\x82\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\x91\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfe\xa2\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb4\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?+</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc5\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xee\xd5\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf7\xe6\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc6\xf7\x94</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd\x18\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?^)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">I</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe7</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?%j</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?%z</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\x89\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x88\x99\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x06\xac\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?D</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd0\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19\xe2\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?9</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf4\x95</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1c\x06\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\x17\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?9)</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?*A</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">X</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Tp</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8f\x87\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?E</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbc\xb6\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfb\xcd\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfd\xe4\x96</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?e</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x00\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\x1b\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">6</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?GQ</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">l</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc2\x87\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xad\xa2\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?_</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbd\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa\xec\x97</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x02\x04\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x18\x1b\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xae</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x08</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">J</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.a</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x19</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">x</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?j</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x80\xae\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?n</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1b\xe4\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?o</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xff\x98</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x89\x1a\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?v5</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?-P</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x10</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">u</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd9\x99\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x93\xbe\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe3\x99</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xdc\x08\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?p.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfb</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">S</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?qy</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa6\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d\xd3\x9a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe2\x00\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?=.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?)]</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?9</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8c\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x81\xbb\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf5\xea\x9b</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\x1c\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?ZM</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xfd</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xe0\xb0\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xac\xe4\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca\x18\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?[M</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?O</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x82\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb7\xc2\x9d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x03\x04\x9e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?hF</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8\x89\x9e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8\xd0\x9e</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd5\x18\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x8a</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xce\xad\x9f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa2\x19\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x16\x8a\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xf0\xff\xa0</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc9</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xd8\x02\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x87\x92\xa2</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\xd3\xa3</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xcb\xaf\xa4</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?Y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xaa\xa5</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?`</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xce\xa6</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xc1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xa8</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?8</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x01\xaa</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xbe\x9e\xac</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x9c</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">y</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xb1</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xea</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">h</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\xca</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">?'</span></span></code></pre></div>
</div>
<p>To reproduce this result: ‘run all cells’. The two strings presented above will appear in the very last cell of this notebook. This should take about 10-20 minutes depending on the system, 15 minutes on Colab’s GPU.</p>
</section>
<section id="verification" class="level2">
<h2 class="anchored" data-anchor-id="verification">Verification</h2>
<p>The resulting circuit has single-qubit gates only and is therefore depth 1.</p>
<div class="cell" data-outputid="ee05372c-95e6-4de6-d164-a3080100bc33" data-execution_count="6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.frombuffer(x_solution_str, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float32)</span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discretization:'</span>, x)</span>
<span id="cb3-3">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit.from_qasm_str(qasm_solution)</span>
<span id="cb3-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circuit:'</span>)</span>
<span id="cb3-5">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>discretization: [0.62056357 0.6314514  0.642224   ... 1.3485944  1.3865237  1.5813267 ]
circuit:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>To verify correctnes I’ve collected several different methods of computing L2 norm <a href="https://github.com/idnm/classiq_lognormal">here</a>. In the code below I also only use <code>qiskit</code> methods for manipulating quantum ciruicts, so this should be a reliable check.</p>
<div class="cell" data-outputid="a129c80d-ab67-487e-f4e8-cd4d27b4ab0b" data-execution_count="8">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This function assumes that all qubits are to be measured for the distribution.</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> probabilities_from_circuit(qc):        </span>
<span id="cb5-3">    state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Statevector.from_instruction(qc) </span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> state.probabilities()</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> three_l2_errors_from_probabilities(p, x):</span>
<span id="cb5-7">    error_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l2.idnm_l2_error(jnp.array(p), jnp.array(x))</span>
<span id="cb5-8">    error_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l2.tnemoz_l2_error(p, x)</span>
<span id="cb5-9">    error_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l2.l2_error(p, x)</span>
<span id="cb5-10">    </span>
<span id="cb5-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Error by method 0 (QuantumSage):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error_0<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Error by method 1 (tnemoz):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error_1<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Error by method 2 (idnm):</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>error_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-14">    </span>
<span id="cb5-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> three_l2_errors_from_circuit(qasm_str, x, reverse_bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="cb5-16">    </span>
<span id="cb5-17">    qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit.from_qasm_str(qasm_str)</span>
<span id="cb5-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> reverse_bits:</span>
<span id="cb5-19">        qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.reverse_bits()</span>
<span id="cb5-20">        </span>
<span id="cb5-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Circuit depth is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>qc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>depth()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb5-22">    p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probabilities_from_circuit(qc)</span>
<span id="cb5-23">    three_l2_errors_from_probabilities(p, x)</span>
<span id="cb5-24">    </span>
<span id="cb5-25">three_l2_errors_from_circuit(qasm_solution, x)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Circuit depth is 1

Error by method 0 (QuantumSage):0.006361703002515892
Error by method 1 (tnemoz):0.005891621296138897
Error by method 2 (idnm):0.005880733951926231</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="approach" class="level2">
<h2 class="anchored" data-anchor-id="approach">Approach</h2>
<p>I used fairly straightforward numerical optimization. I was interested if the target lognormal distribution can be approximated by small-depth circuits optimized directly. In other words, I minimized numerically the L2 error as a function of angles in the circuit and discretization intervals.</p>
<p>To my surprise, 9 and 10 qubits circuits with the smallest depth possible (containing only single-qubit gates) are able to give a good enough approximation below the threshold error. The freedom to adjust discretization seems crucial for low-depth circuits.</p>
<p>I also looked how well can one approximate the target distribution for a given number of qubits, assuming that the probability density can take any shape. This corresponds to the maximally expressive circuit, where all <img src="https://latex.codecogs.com/png.latex?2%5En"> amplitudes can be controlled precisely. Of course I didn’t optimize circuits of such depth. Rather, I optimized values of discrete functions directly. Interestingly, I found that the best possible approximation is not significanltly better than the approximation one can get with depth 1 circuits and the same number of qubits.</p>
</section>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<section id="lognormal-distribution-and-l2-error" class="level2">
<h2 class="anchored" data-anchor-id="lognormal-distribution-and-l2-error">Lognormal distribution and L2 error</h2>
<p>The following cells define the lognormal distribution <img src="https://latex.codecogs.com/png.latex?f(x)"> itself as well as antiderivatives <img src="https://latex.codecogs.com/png.latex?%5Cint%20dx%20f(x)"> and <img src="https://latex.codecogs.com/png.latex?%5Cint%20dx%20f%5E2(x)">. Andtiderivatives will be useful for computing the L2 error.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lognormal(x):</span>
<span id="cb7-2">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb7-3">    mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (jnp.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(jnp.log(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lognormal_int(x):</span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> erf(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.log(x)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb7-10"></span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> lognormal_squared_int(x):</span>
<span id="cb7-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> erf(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.log(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> jnp.sqrt(jnp.pi) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> jnp.power(jnp.e, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>)</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Uncomment to verify correctness of antiderivatives</span></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x = jnp.linspace(0.01, 2, 100)</span></span>
<span id="cb7-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(jnp.allclose(vmap(lognormal)(x), vmap(grad(lognormal_int))(x)))</span></span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(jnp.allclose(vmap(lognormal)(x)**2, vmap(grad(lognormal_squared_int))(x)))</span></span></code></pre></div>
</div>
<p>Now we will define a simple class collecting some useful data about piecewise constant functions.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DiscreteFunction:</span>
<span id="cb8-2">    </span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb8-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> condlist(x, grid):</span>
<span id="cb8-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [(g_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> g_right) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> g_left, g_right <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(grid, grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])]</span>
<span id="cb8-6"></span>
<span id="cb8-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, grid, values):</span>
<span id="cb8-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(values) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of grid points </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match number of values </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(values)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span></span>
<span id="cb8-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid</span>
<span id="cb8-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values</span>
<span id="cb8-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>grid[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-12">        </span>
<span id="cb8-13">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> f(x):</span>
<span id="cb8-14">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.piecewise(x, DiscreteFunction.condlist(x, grid), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.values)</span>
<span id="cb8-15">        </span>
<span id="cb8-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f</span>
<span id="cb8-17">        </span>
<span id="cb8-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb8-20">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb8-21"></span>
<span id="cb8-22">        plt.plot(x, [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.f(xi) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> xi <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> x]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># jit or vmap here gives an error for some reason. Without them unnecessarily slow.</span></span>
<span id="cb8-23">        plt.plot(x, vmap(lognormal)(x))</span>
<span id="cb8-24">            </span>
<span id="cb8-25">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@classmethod</span>            </span>
<span id="cb8-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> from_probabilities(cls, grid, probs):</span>
<span id="cb8-27">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>grid[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> cls(grid, values)      </span></code></pre></div>
</div>
<p>Here is the function that computes the L2 error between a given discrete function and the lognormal distribution. I used the equation</p>
<p><img src="https://latex.codecogs.com/png.latex?L2=%5Cint_a%5Eb%20(v-p(x))%5E2=D%5E%7B-1%7Dp(x)%5E2%5CBig%7C%5Ea_b-2%20v%20D%5E%7B-1%7D%20p(x)%5CBig%7C%5Ea_b+v%5E2%20(b-a)"></p>
<p>This is an error of approximating function <img src="https://latex.codecogs.com/png.latex?p(x)"> by a constant <img src="https://latex.codecogs.com/png.latex?v"> on an interval <img src="https://latex.codecogs.com/png.latex?(a,b)">. That this function is correct is confirmed by comparison with other independent methods which I presented above. This (a bit fancy) form is useful for speed in my numerical optimization.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> l2_error_contributions(discrete_function, left, right):</span>
<span id="cb9-2">    </span>
<span id="cb9-3">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_function.grid</span>
<span id="cb9-4">    values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_function.values</span>
<span id="cb9-5">    </span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inner contributions</span></span>
<span id="cb9-7">    f_squared_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(lognormal_squared_int)(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> vmap(lognormal_squared_int)(grid[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-8">    f_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(lognormal_int)(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> vmap(lognormal_int)(grid[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-9">    const_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> grid[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-10"></span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># outer contributions</span></span>
<span id="cb9-12">    outer_contrib_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lognormal_squared_int(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lognormal_squared_int(left)</span>
<span id="cb9-13">    outer_contrib_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lognormal_squared_int(right) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> lognormal_squared_int(grid[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb9-14"></span>
<span id="cb9-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># total</span></span>
<span id="cb9-16">    total_contribs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f_squared_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> f_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> const_contrib <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> outer_contrib_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> outer_contrib_right</span>
<span id="cb9-17"></span>
<span id="cb9-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> total_contribs</span>
<span id="cb9-19"></span>
<span id="cb9-20"></span>
<span id="cb9-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> l2_error(discrete_function, left<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, right<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.inf):</span>
<span id="cb9-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.sqrt(l2_error_contributions(discrete_function, left, right).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span></code></pre></div>
</div>
<p>Here is a sample computation, <code>x</code> and <code>p</code> taken from <a href="https://quantum.discoursehosting.net/t/example-of-l2-norm/31/6">here</a>.</p>
<div class="cell" data-outputid="239385c4-26b9-4aa8-9373-eddfd7daae35" data-execution_count="12">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> , <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>]</span>
<span id="cb10-2">p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.081</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.115</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.15</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.03</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.004</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span> ]</span>
<span id="cb10-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction.from_probabilities(jnp.array(x), jnp.array(p))</span>
<span id="cb10-4">df.plot()</span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'L2 error:'</span>, l2_error(df))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>L2 error: 0.93145823</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-9-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="optimization-setup-irrelevant" class="level2">
<h2 class="anchored" data-anchor-id="optimization-setup-irrelevant">Optimization setup (irrelevant)</h2>
<p>I use <a href="https://github.com/google/jax"><code>JAX</code></a> for numerical optimization. It is very flexible and efficient, by lacks some of the high level API present in other libraries. The code below is only to setup numerical minimization with <code>JAX</code>, it has no relation to the problem. It is included here only in order to make the notebook self-contained.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_step(loss_and_grad, opt, opt_state, params):</span>
<span id="cb12-2">    loss, grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_and_grad(params)</span>
<span id="cb12-3">    updates, opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.update(grads, opt_state)</span>
<span id="cb12-4">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optax.apply_updates(params, updates)</span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> params, loss, opt_state</span>
<span id="cb12-7"></span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> glue_params(params):</span>
<span id="cb12-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.concatenate(params)</span>
<span id="cb12-11"></span>
<span id="cb12-12"></span>
<span id="cb12-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unglue_params(glued_params, slice_indices):</span>
<span id="cb12-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [glued_params[i0:i1] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i0, i1 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(slice_indices, slice_indices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])]</span>
<span id="cb12-15"></span>
<span id="cb12-16"></span>
<span id="cb12-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mynimize(loss, initial_params, opt_options):</span>
<span id="cb12-18">    </span>
<span id="cb12-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize optimizer and parameter splits.</span></span>
<span id="cb12-20">    loss_and_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value_and_grad(loss)</span>
<span id="cb12-21">    opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt_options.optimizer()</span>
<span id="cb12-22">    opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.init(initial_params)</span>
<span id="cb12-23">    sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ip) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> initial_params]</span>
<span id="cb12-24">    slice_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(sizes[:i]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sizes)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span>
<span id="cb12-25"></span>
<span id="cb12-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Single learning iteration compatible with lax fori loop.</span></span>
<span id="cb12-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> iteration_with_history(i, carry):</span>
<span id="cb12-28">        glued_params_history, loss_history, opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> carry</span>
<span id="cb12-29">        glued_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glued_params_history[i]</span>
<span id="cb12-30">        </span>
<span id="cb12-31">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unglue_params(glued_params, slice_indices)</span>
<span id="cb12-32">        </span>
<span id="cb12-33">        params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_params._make(params)</span>
<span id="cb12-34">        params, loss, opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> update_step(loss_and_grad, opt, opt_state, params)</span>
<span id="cb12-35">        </span>
<span id="cb12-36">        glued_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glue_params(params)</span>
<span id="cb12-37">        glued_params_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glued_params_history.at[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(glued_params)</span>
<span id="cb12-38">        </span>
<span id="cb12-39">        loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_history.at[i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(loss)</span>
<span id="cb12-40">        </span>
<span id="cb12-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> glued_params_history, loss_history, opt_state</span>
<span id="cb12-42"></span>
<span id="cb12-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize arrays holding whole histories for parameters and values.</span></span>
<span id="cb12-44">    glued_initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> glue_params(initial_params)</span>
<span id="cb12-45">    glued_params_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.zeros((opt_options.num_iterations, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(glued_initial_params))).at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(glued_initial_params)</span>
<span id="cb12-46">    loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.zeros((opt_options.num_iterations,))</span>
<span id="cb12-47"></span>
<span id="cb12-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimize iteratively within fori loop.</span></span>
<span id="cb12-49">    glued_params_history, loss_history, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lax.fori_loop(</span>
<span id="cb12-50">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb12-51">        opt_options.num_iterations,</span>
<span id="cb12-52">        iteration_with_history,</span>
<span id="cb12-53">        (glued_params_history, loss_history, opt_state))</span>
<span id="cb12-54">    </span>
<span id="cb12-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bring parameters to the original representation.</span></span>
<span id="cb12-56">    params_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> gp: unglue_params(gp, slice_indices))(glued_params_history)</span>
<span id="cb12-57">    reordered_params_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [initial_params._make([params_history[num_param][num_iteration] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num_param <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(initial_params))]) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> num_iteration <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(opt_options.num_iterations)]</span>
<span id="cb12-58"></span>
<span id="cb12-59">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> reordered_params_history, loss_history</span>
<span id="cb12-60"></span>
<span id="cb12-61"></span>
<span id="cb12-62"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb12-63"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> OptOptions:</span>
<span id="cb12-64">    learning_rate: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb12-65">    num_iterations: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span></span>
<span id="cb12-66">    random_seed: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-67"></span>
<span id="cb12-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> optimizer(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> optax.adam(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learning_rate)</span>
<span id="cb12-70">    </span>
<span id="cb12-71"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> OptResult:</span>
<span id="cb12-72">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, raw_result, loss_func, opt_options):</span>
<span id="cb12-73"></span>
<span id="cb12-74">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_func</span>
<span id="cb12-75">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.opt_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt_options</span>
<span id="cb12-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb12-77">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> raw_result[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb12-78">        </span>
<span id="cb12-79">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._best_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.argmin(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_history)</span>
<span id="cb12-80">        </span>
<span id="cb12-81">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.best_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params_history[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._best_i]</span>
<span id="cb12-82">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_history[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._best_i]</span>
<span id="cb12-83"></span>
<span id="cb12-84">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _i_or_best_i(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, i):</span>
<span id="cb12-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb12-86">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._best_i</span>
<span id="cb12-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb12-88">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> i</span>
<span id="cb12-89"></span>
<span id="cb12-90">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_loss_history(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-91">        plt.plot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_history)</span>
<span id="cb12-92">        plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span>
<span id="cb12-93">        </span>
<span id="cb12-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'OptResult: best_loss </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>best_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span></span></code></pre></div>
</div>
</section>
</section>
<section id="warm-up-fitting-discrete-functions-directly" class="level1">
<h1>Warm-up: fitting discrete functions directly</h1>
<p>I found it very istructive to see what accuracy can be achieved if one can fully control values of the discrete function. Empirically, the best strtategy seems to</p>
<ul>
<li>First optimize values of the discrete function with fixed discretization.</li>
<li>Continue by optimizing values and adjusting discretization intervals jointly.</li>
</ul>
<section id="fitting-values-only" class="level2">
<h2 class="anchored" data-anchor-id="fitting-values-only">Fitting values only</h2>
<p>Here is the function that does the first part of the job.</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namedtuple(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Values'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'values'</span>])</span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_values(discrete_function, opt_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OptOptions()):</span>
<span id="cb13-4">    </span>
<span id="cb13-5">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_function.grid</span>
<span id="cb13-6">    initial_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_function.values</span>
<span id="cb13-7">    </span>
<span id="cb13-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb13-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(v):</span>
<span id="cb13-10">        values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v.values</span>
<span id="cb13-11">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(grid, values)</span>
<span id="cb13-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l2_error(df)</span>
<span id="cb13-13">    </span>
<span id="cb13-14">    initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> V(initial_values)</span>
<span id="cb13-15">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mynimize(loss, initial_params, opt_options)</span>
<span id="cb13-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> OptResult(results, loss, opt_options)</span></code></pre></div>
</div>
<p>Here is the best this method can do with 10 qubits starting from random initial values between 0 and 1 (you can change the number of qubits if you wish). The histogram shows density of the grid points. At this point they are distributed uniformly.</p>
<div class="cell" data-outputid="168706e4-f73a-4d3c-d737-04c96cb18aee" data-execution_count="15">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb14-2"></span>
<span id="cb14-3">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-4">initial_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits, ))</span>
<span id="cb14-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(grid, initial_values)</span>
<span id="cb14-6">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_values(df)</span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res)</span>
<span id="cb14-8">df_fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(df.grid, res.best_params.values)</span>
<span id="cb14-9"></span>
<span id="cb14-10">res_values_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res</span>
<span id="cb14-11">df_fit_values_only <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_fit</span>
<span id="cb14-12"></span>
<span id="cb14-13">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb14-14">res.plot_loss_history()</span>
<span id="cb14-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss history'</span>)</span>
<span id="cb14-16">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb14-17">df_fit.plot()</span>
<span id="cb14-18">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discretization'</span>)</span>
<span id="cb14-19">plt.hist(np.array(df_fit.grid), bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_fit.grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OptResult: best_loss 0.0033653806895017624.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-12-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="fitting-values-and-grid" class="level2">
<h2 class="anchored" data-anchor-id="fitting-values-and-grid">Fitting values and grid</h2>
<p>Now we introduce the second optimization procedure, which also adjusts discretization intervals.</p>
<p>One technical subtlety here is that the grid points should never go past each other. In order to prevent that I use auxilary variables, which are square roots of the distances between neighboring grid points, <code>grid_roots</code>. Even if some <code>grid_root</code> becomes negative the distance between the grid points <code>grid_root**2</code> stays positive.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">VG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namedtuple(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ValuesGrid'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'values'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grid_roots'</span>])</span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> grid_to_roots(grid):</span>
<span id="cb16-4">    all_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.concatenate([jnp.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), grid]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Append '0' to the left.</span></span>
<span id="cb16-5">    cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_points[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> all_points[:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb16-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.sqrt(cells)</span>
<span id="cb16-7"></span>
<span id="cb16-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> roots_to_grid(roots):</span>
<span id="cb16-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""" A bit of complicated syntaxis to restore grid from roots in a jax-compatible way."""</span></span>
<span id="cb16-10">    cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb16-11">    masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.tri(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(roots))</span>
<span id="cb16-12">    pre_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> x: cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x)(masks)</span>
<span id="cb16-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pre_grid.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-14"></span>
<span id="cb16-15"></span>
<span id="cb16-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_values_and_grid(discrete_function, opt_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OptOptions()):</span>
<span id="cb16-17"></span>
<span id="cb16-18">    initial_grid_roots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_to_roots(discrete_function.grid)</span>
<span id="cb16-19">    initial_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_function.values</span>
<span id="cb16-20">    </span>
<span id="cb16-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(vg):</span>
<span id="cb16-23">        grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roots_to_grid(vg.grid_roots)</span>
<span id="cb16-24">        df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(grid, vg.values)</span>
<span id="cb16-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l2_error(df)</span>
<span id="cb16-26">    </span>
<span id="cb16-27">    initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VG(initial_values, initial_grid_roots)</span>
<span id="cb16-28">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mynimize(loss, initial_params, opt_options)</span>
<span id="cb16-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> OptResult(results, loss, opt_options)</span></code></pre></div>
</div>
<p>Here is the best fit to the lognormal distribution this procedure is able to find. Note that grid points are no longer distributed uniformly but clamp near the regions with the highest slope, as they should (this is in fact better visible at smaller qubit count). Note that here we initialized the optimization with values found at the previous stage. If we were to initialize them randomly, the result would be much worse. Note also a smaller learning rate at this stage.</p>
<div class="cell" data-outputid="a5eb7d7c-d271-4380-a343-f5b84c2a17d9" data-execution_count="17">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb17-2"></span>
<span id="cb17-3">initial_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_fit_values_only.grid</span>
<span id="cb17-4">initial_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_fit_values_only.values</span>
<span id="cb17-5"></span>
<span id="cb17-6">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(initial_grid, initial_values)</span>
<span id="cb17-7"></span>
<span id="cb17-8">opt_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OptOptions(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span>
<span id="cb17-9">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_values_and_grid(df, opt_options)</span>
<span id="cb17-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res)</span>
<span id="cb17-11"></span>
<span id="cb17-12">best_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res.best_params.values</span>
<span id="cb17-13">best_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roots_to_grid(res.best_params.grid_roots)</span>
<span id="cb17-14">df_fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction(best_grid, best_values)</span>
<span id="cb17-15"></span>
<span id="cb17-16">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb17-17">res.plot_loss_history()</span>
<span id="cb17-18">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss history'</span>)</span>
<span id="cb17-19">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb17-20">df_fit.plot()</span>
<span id="cb17-21">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discretization'</span>)</span>
<span id="cb17-22">plt.hist(np.array(df_fit.grid), bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_fit.grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OptResult: best_loss 0.00303847249597311.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
</section>
<section id="fitting-quantum-circuit" class="level1">
<h1>Fitting quantum circuit</h1>
<section id="mycircuit-class" class="level2">
<h2 class="anchored" data-anchor-id="mycircuit-class">MyCircuit class</h2>
<p>First I will define a very simple <code>MyCircuit</code> class that bundles <code>qiskit</code> representation with <code>jax</code>-compatible unitary. For the purposes of this notebook, we only need to place one gate on each qubit.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> U_gate(a):</span>
<span id="cb19-2">    theta, phi, lmbda <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a</span>
<span id="cb19-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.array([[jnp.cos(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>jnp.exp(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>lmbda)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.sin(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)],</span>
<span id="cb19-4">                     [jnp.exp(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>phi)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.sin(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), jnp.exp(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(phi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>lmbda))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.cos(theta<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]])</span>
<span id="cb19-5"></span>
<span id="cb19-6"></span>
<span id="cb19-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MyCircuit:</span>
<span id="cb19-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_qubits):</span>
<span id="cb19-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_qubits</span>
<span id="cb19-10">    </span>
<span id="cb19-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> qiskit_circuit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angles):</span>
<span id="cb19-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(angles) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Number of qubits </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>num_qubits<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> and angle triples </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(angles)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match.'</span></span>
<span id="cb19-13">        qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits)</span>
<span id="cb19-14">        angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(angles) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Qiskit does not accept JAX arrays.</span></span>
<span id="cb19-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, (theta, phi, lmbda) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(angles.reshape(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)):</span>
<span id="cb19-16">            qc.u(theta, phi, lmbda, i)</span>
<span id="cb19-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> qc</span>
<span id="cb19-18">    </span>
<span id="cb19-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angles):</span>
<span id="cb19-20">        gates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(U_gate)(angles.reshape(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb19-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(jnp.kron, gates)</span>
<span id="cb19-22">    </span>
<span id="cb19-23">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _verify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angles):</span>
<span id="cb19-24">        u_qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.qiskit_circuit(angles).reverse_bits()).data</span>
<span id="cb19-25">        u_jax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary(angles)</span>
<span id="cb19-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.allclose(u_qs, u_jax)</span></code></pre></div>
</div>
<p>Here is an example.</p>
<div class="cell" data-outputid="aa63b08c-d9ef-481f-f217-7993cacbc013" data-execution_count="24">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb20-2">angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), (num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, ), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span>
<span id="cb20-3"></span>
<span id="cb20-4">mc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyCircuit(num_qubits)</span>
<span id="cb20-5">mc.unitary(angles)</span>
<span id="cb20-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qiskit unitary coincides with our unitary:'</span>, mc._verify(angles))</span>
<span id="cb20-7">mc.qiskit_circuit(angles).draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>qiskit unitary coincides with our unitary: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="24">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-16-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="defining-loss-associated-with-a-unitary" class="level2">
<h2 class="anchored" data-anchor-id="defining-loss-associated-with-a-unitary">Defining loss associated with a unitary</h2>
<p>Quantum circuit transforms the input state. Amplitudes of the output state encode the values of the discrete function that we use to fit the lognormal distribution. Here we construct a function that takes a quantum circuit and returns the L2 error of the corresponding approximation.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss_from_unitary(grid, u):</span>
<span id="cb22-2">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probabilities_from_unitary(u)</span>
<span id="cb22-3">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction.from_probabilities(grid, probs)</span>
<span id="cb22-4">    </span>
<span id="cb22-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> l2_error(df)</span>
<span id="cb22-6"></span>
<span id="cb22-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> probabilities_from_unitary(u):</span>
<span id="cb22-8">    all_zero_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.zeros(u.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]).at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-9">    amplitudes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> amplitudes_from_state(u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> all_zero_state)</span>
<span id="cb22-10">    probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(amplitudes)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> probabilities</span>
<span id="cb22-12"></span>
<span id="cb22-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> amplitudes_from_state(state):</span>
<span id="cb22-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> vmap(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> basis_state: (state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> basis_state).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())(jnp.identity(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(state)))</span></code></pre></div>
</div>
</section>
<section id="fitting-angles-only" class="level2">
<h2 class="anchored" data-anchor-id="fitting-angles-only">Fitting angles only</h2>
<p>Now we are ready to optimize angles in the circuit for the best fit to the target distribution. Discretization is held fixed at this stage.</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namedtuple(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Angles'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angles'</span>])</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_angles(grid, num_qubits, opt_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OptOptions()):</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Grid length </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match number of qubits </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_qubits<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span></span>
<span id="cb23-5">    circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyCircuit(num_qubits)</span>
<span id="cb23-6"></span>
<span id="cb23-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb23-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(a):</span>
<span id="cb23-9">        u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> circuit.unitary(a.angles)</span>
<span id="cb23-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss_from_unitary(grid, u)</span>
<span id="cb23-11"></span>
<span id="cb23-12">    initial_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(opt_options.random_seed), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits, ), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span>
<span id="cb23-13">    initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A(initial_angles)</span>
<span id="cb23-14">    </span>
<span id="cb23-15">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mynimize(loss, initial_params, opt_options)</span>
<span id="cb23-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> OptResult(results, loss, opt_options)</span></code></pre></div>
</div>
<p>Here is an example with 6 qubits.</p>
<div class="cell" data-outputid="05853292-b8d7-472e-a2b3-d007bcb2a42b" data-execution_count="27">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb24-2">grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-3">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_angles(grid, num_qubits)</span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res)</span>
<span id="cb24-6">circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyCircuit(num_qubits)</span>
<span id="cb24-7">probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probabilities_from_unitary(circuit.unitary(res.best_params.angles))</span>
<span id="cb24-8">df_fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction.from_probabilities(grid, probs)</span>
<span id="cb24-9"></span>
<span id="cb24-10">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb24-11">res.plot_loss_history()</span>
<span id="cb24-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss history'</span>)</span>
<span id="cb24-13">plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb24-14">df_fit.plot()</span>
<span id="cb24-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discretization'</span>)</span>
<span id="cb24-16">plt.hist(np.array(df_fit.grid), bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_fit.grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb24-17"></span>
<span id="cb24-18">res_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res</span>
<span id="cb24-19">df_fit_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_fit</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>OptResult: best_loss 0.884075403213501.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The highly asymmetric shape of the fitting function here is typical and continutes to higher qubits. At the first glance, there seems to be little hope of making the construction work. However, as we see right now, adjusting the discretization ranges cuts the deal.</p>
</section>
<section id="fitting-angles-and-grid" class="level2">
<h2 class="anchored" data-anchor-id="fitting-angles-and-grid">Fitting angles and grid</h2>
<p>Here is the procedure that fits angles and grid together. We bundle it with the previous step into a single simple function <code>fit_circuit</code> that does all the work.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">AG <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namedtuple(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AnglesGrid'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'angles'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grid_roots'</span>])</span>
<span id="cb26-2"></span>
<span id="cb26-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_angles_and_grid(initial_angles, initial_grid, opt_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OptOptions()):</span>
<span id="cb26-4">    num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(initial_angles)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb26-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(initial_grid) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Grid length </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> does not match number of qubits </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_qubits<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.'</span></span>
<span id="cb26-6">    circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyCircuit(num_qubits)</span>
<span id="cb26-7"></span>
<span id="cb26-8">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@jit</span></span>
<span id="cb26-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(ag):</span>
<span id="cb26-10">        u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> circuit.unitary(ag.angles)</span>
<span id="cb26-11">        grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roots_to_grid(ag.grid_roots)</span>
<span id="cb26-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss_from_unitary(grid, u)</span>
<span id="cb26-13">    </span>
<span id="cb26-14">    initial_grid_roots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_to_roots(initial_grid)</span>
<span id="cb26-15">    initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AG(initial_angles, initial_grid_roots)</span>
<span id="cb26-16">    </span>
<span id="cb26-17">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mynimize(loss, initial_params, opt_options)</span>
<span id="cb26-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> OptResult(results, loss, opt_options)</span>
<span id="cb26-19"></span>
<span id="cb26-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fit_circuit(num_qubits):</span>
<span id="cb26-21">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Initial optimization of angles:'</span>)</span>
<span id="cb26-22">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-23">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_angles(grid, num_qubits)</span>
<span id="cb26-24">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res)</span>
<span id="cb26-25">    </span>
<span id="cb26-26">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Optimization of angles and grid:'</span>)</span>
<span id="cb26-27">    circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MyCircuit(num_qubits)</span>
<span id="cb26-28"></span>
<span id="cb26-29">    initial_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> res.best_params.angles</span>
<span id="cb26-30">    initial_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid</span>
<span id="cb26-31"></span>
<span id="cb26-32">    opt_options <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OptOptions(learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span>, num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>)</span>
<span id="cb26-33">    </span>
<span id="cb26-34">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_angles_and_grid(initial_angles, initial_grid, opt_options)</span>
<span id="cb26-35"></span>
<span id="cb26-36">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(res)</span>
<span id="cb26-37"></span>
<span id="cb26-38">    best_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probabilities_from_unitary(circuit.unitary(res.best_params.angles))</span>
<span id="cb26-39">    best_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> roots_to_grid(res.best_params.grid_roots)</span>
<span id="cb26-40"></span>
<span id="cb26-41">    df_fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteFunction.from_probabilities(best_grid, best_probs)</span>
<span id="cb26-42"></span>
<span id="cb26-43">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-44">    res.plot_loss_history()</span>
<span id="cb26-45">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss history'</span>)</span>
<span id="cb26-46">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-47">    df_fit.plot()</span>
<span id="cb26-48">    plt.hist(np.array(df_fit.grid), bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(df_fit.grid)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), density<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb26-49">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'discretization'</span>)</span>
<span id="cb26-50">    </span>
<span id="cb26-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> circuit.qiskit_circuit(res.best_params.angles).qasm(), best_grid</span></code></pre></div>
</div>
<p>Here is what happens for 6 qubits when we follow up initial angle optimization with the grid optimization.</p>
<div class="cell" data-outputid="b0b6ffde-25bb-41a4-e24f-9741889645a1" data-execution_count="29">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">qasm, grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_circuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Initial optimization of angles:
OptResult: best_loss 0.884075403213501.

Optimization of angles and grid:
OptResult: best_loss 0.04849757254123688.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The optimization results improved dramatically. We are able to achive <img src="https://latex.codecogs.com/png.latex?5%5Ctimes%2010%5E%7B-2%7D"> error already on six qubits. As we can anticipate, using all 10 qubits helps a lot.</p>
</section>
</section>
<section id="final-solution" class="level1">
<h1>Final solution</h1>
<p>Here is the final solution. The qasm file and grid specified at the beginning of this notebook were produced here. On Colab’s GPU this takes about 10 minutes to run.</p>
<div class="cell" data-outputid="ae84c95a-ad8c-42a6-9505-b0c4ff800ebf">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">qasm, grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fit_circuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Initial optimization of angles:
OptResult: best_loss 0.8839455246925354.

Optimization of angles and grid:
OptResult: best_loss 0.005602838937193155.</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-Classiq lognormal_files/figure-html/cell-22-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-outputid="453f7d24-e959-4c3d-edcb-6efc7f44d2a5">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'grid:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(np.array(grid).tobytes())</span>
<span id="cb31-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">QASM: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb31-4">qasm</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>grid:

b'A\xdd\x1e?\xcd\xa6!?\xcbh$?\xc4 \'?\x11\xcd)?\xe7j,?n\xf2.?\xeeY1?\xcd\x963?t\xb35?\xc8\x847?Z\x029?\xf0/:?\x9f!;?!\xe6;?\x96\x8d&lt;?\xd3 =?\xbd\xd5=?\xdet&gt;?\x1c\x03??\x8a\x83??.\xfc??\xa2j@?\x89\xd0@?\xeb.A?\xd7\x97A?\x03\xf9A?\x87SB?\x0f\xa8B?\xc2\xf9B?sFC?\xc0\x8eC?\xfb\xd2C?k\x15D?UTD?\x1c\x90D?\xed\xc8D?\xb8\x00E?\xdf5E?\xa6hE?%\x99E?\xca\xd0E?\xd4\x05F?\x898F?\xffhF?\xd4\x98F?\x9f\xc6F?\x8d\xf2F?\xb3\x1cG?\xb4TG?!\x8aG?&gt;\xbdG?!\xeeG?k\x1eH?\xadLH?\x16yH?\xb7\xa3H?\xde\xd4H?\xf5\x03I?,1I?\x92\\I?\x94\x87I?\xe6\xb0I?\xb2\xd8I?\xfd\xfeI?+ J?1@J?*_J?\x16}J?\xee\x9aJ?\xc8\xb7J?\xb9\xd3J?\xc3\xeeJ?6\x0eK?\x99,K?\x03JK?xfK?\xde\x82K?Z\x9eK?\xfe\xb8K?\xcb\xd2K?q\xf5K?\xe4\x16L?&gt;7L?\x80VL?\xafuL?\xd4\x93L?\x07\xb1L?J\xcdL?)\xeeL?\xec\rM?\xae,M?lJM?\x1fhM?\xdc\x84M?\xba\xa0M?\xb5\xbbM?\xa4\xd6M?\xbc\xf0M?\x0f\nN?\x9d"N?0;N?\x05SN?,jN?\xa5\x80N?\xdd\x9aN?G\xb4N?\xf5\xccN?\xe6\xe4N?\xdd\xfcN?\x1e\x14O?\xb9*O?\xab@O?:^O?\xd9zO?\x9e\x96O?\x86\xb1O?q\xccO?\x89\xe6O?\xe0\xffO?v\x18P?"5P?\xe9PP?\xe1kP?\x07\x86P?1\xa0P?\x93\xb9P?&lt;\xd2P?*\xeaP?\xd6\x01Q?\xd1\x18Q?*/Q?\xe0DQ?\xa4ZQ?\xc9oQ?_\x84Q?a\x98Q?\xc4\xafQ?{\xc6Q?\x93\xdcQ?\n\xf2Q?\x91\x07R?~\x1cR?\xdc0R?\xaaDR?b_R?MyR?\x80\x92R?\xf4\xaaR?x\xc3R?C\xdbR?i\xf2R?\xe5\x08S?+#S?\xab&lt;S?tUS?\x87mS?\xa8\x85S?\x17\x9dS?\xe6\xb3S?\x0f\xcaS?@\xe0S?\xd2\xf5S?\xd3\nT?@\x1fT?\xc03T?\xaeGT?\x1d[T?\x03nT?"\x84T?\xa1\x99T?\x91\xaeT?\xef\xc2T?`\xd7T?B\xebT?\xa4\xfeT?~\x11U?\xf5*U?\xb2CU?\xc4[U?(sU?\x9d\x8aU?l\xa1U?\x9f\xb7U?7\xcdU?v\xe6U?\xfe\xfeU?\xdd\x16V?\x12.V?ZEV?\xfc[V?\x06rV?w\x87V?8\x9aV?{\xacV?K\xbeV?\xa3\xcfV?\x11\xe1V?\r\xf2V?\x9f\x02W?\xc3\x12W?\xad%W?\x188W?\rJW?\x8c[W?!mW?B~W?\xf9\x8eW?B\x9fW?I\xb5W?\xb6\xcaW?\x98\xdfW?\xec\xf3W?T\x08X?4\x1cX?\x94/X?qBX?\x89XX?\tnX?\xfc\x82X?`\x97X?\xdd\xabX?\xcd\xbfX?@\xd3X?0\xe6X?1\xf9X?\xb3\x0bY?\xc1\x1dY?X/Y?\tAY?CRY?\x16cY?ysY?\xb0\x86Y?g\x99Y?\xaa\xabY?t\xbdY?U\xcfY?\xc4\xe0Y?\xc7\xf1Y?[\x02Z?\xc9\x18Z?\x9f.Z?\xe7CZ?\xa1XZ?smZ?\xba\x81Z?\x81\x95Z?\xc3\xa8Z?S\xbfZ?K\xd5Z?\xb6\xeaZ?\x90\xffZ?\x85\x14[?\xeb([?\xd4&lt;[?7P[?\xe0\x99[?\xae\xe0[?\xe6$\\?\x95f\\?\xe2\xa7\\?\xd1\xe6\\?\x9b#]?E^]?W\xa2]?\xef\xe3]?J#^?p`^?Z\x9d^?1\xd8^?#\x11_?1H_?\x05\x92_?)\xd9_?\xdf\x1d`?.``?=\xa2`?\n\xe2`?\xcb\x1fa?\x80[a?\xec\xa0a?\xf4\xe3a?\xd5$b?\x8fcb?*\xa2b?\xbd\xdeb?v\x19c?VRc?\x1a\x8bc?\x1a\xc2c?\x82\xf7c?L+d?$_d?o\x91d?S\xc2d?\xca\xf1d?4)e?\xf4^e?/\x93e?\xdf\xc5e?\xac\xf8e?\xfd)f?\xf7Yf?\x96\x88f?p\xc7f?`\x04g?\x90?g?\x00yg?\x86\xb2g?\\\xeag?\xaa h?hUh?\x08\x93h?\xd4\xceh?\xfa\x08i?rAi?\x12zi?\x12\xb1i?\x9c\xe6i?\xa8\x1aj?.Hj?|tj?\xb0\x9fj?\xc4\xc9j?\n\xf4j?6\x1dk?`Ek?\x86lk?`\x9ak?\n\xc7k?\x9a\xf2k?\x08\x1dl?\xb2Gl?Bql?\xd2\x99l?\\\xc1l?\xdc\xf6l?\xed*m?\xb4]m?%\x8fm?\xd6\xc0m?@\xf1m?z n?~Nn?o\x84n?\xf7\xb8n?6\xecn?%\x1eo?ZPo?I\x81o?\x0f\xb1o?\xa1\xdfo?h\x0ep?\x06&lt;p?\x95hp?\x0b\x94p?\xc9\xbfp?x\xeap?,\x14q?\xdf&lt;q?\xa2lq?&lt;\x9bq?\xc4\xc8q?/\xf5q?\xec!r?\x94Mr?Axr?\xe9\xa1r?`\xdar?t\x11s?CGs?\xc3{s?\xa0\xb0s?7\xe4s?\xa5\x16t?\xdfGt?\xac\x81t?\x15\xbat?7\xf1t?\x0b\'u?F]u?7\x92u?\x01\xc6u?\x93\xf8u?\xe7*v?\x10\\v?,\x8cv?*\xbbv?\x8f\xeav?\xdc\x18w?0Fw?\x7frw?\x97\xa6w?|\xd9w?S\x0bx?\x04&lt;x?&amp;mx?-\x9dx?5\xccx?0\xfax?\xa38y?\xafuy?t\xb1y?\xe4\xeby?\xdd&amp;z?\x87`z?\x02\x99z?B\xd0z?F\x11{?\xdcP{?,\x8f{?!\xcc{?\xb0\t|?\xebE|?\xf6\x80|?\xc0\xba|?\x08\xf5|?\x15.}?\x06f}?\xcb\x9c}?\x1e\xd4}?M\n~?r?~?\x80s~?\xd2\xb0~?\xe2\xec~?\xd4\'\x7f?\x90a\x7f?\xf2\x9b\x7f?#\xd5\x7f?\xa3\x06\x80?$"\x80?\x98G\x80?Pl\x80?]\x90\x80?\xb9\xb3\x80?\x81\xd7\x80?\x9d\xfa\x80?\x18\x1d\x81?\xeb&gt;\x81?\xdbf\x81?\x0b\x8e\x81?\x91\xb4\x81?f\xda\x81?\xb7\x00\x82?]&amp;\x82?`K\x82?\xb6o\x82?\xd0\x8f\x82?S\xaf\x82?K\xce\x82?\xb6\xec\x82?\x8d\x0b\x83?\xd7)\x83?\xa1G\x83?\xddd\x83?q\x87\x83?m\xa9\x83?\xdc\xca\x83?\xbe\xeb\x83?\x19\r\x84?\xde-\x84?"N\x84?\xd7m\x84?5\x99\x84?\xed\xc3\x84?\t\xee\x84?\x84\x17\x85?\xaaA\x85?4k\x85?.\x94\x85?\x8f\xbc\x85?t\xec\x85?\xb6\x1b\x86?fJ\x86?|x\x86?f\xa7\x86?\xb8\xd5\x86?\x87\x03\x87?\xbe0\x87?\xc1^\x87?/\x8c\x87?\x1f\xb9\x87?\x88\xe5\x87?\xca\x12\x88?\x87?\x88?\xc6k\x88?\x88\x97\x88?\x95\xcb\x88?"\xff\x88?B2\x89?\xe6d\x89?\xa8\x98\x89?\xf8\xcb\x89?\xe0\xfe\x89?W1\x8a?\x02w\x8a?g\xbc\x8a?\xac\x01\x8b?\xb8F\x8b?\xcd\x8d\x8b?\xb9\xd4\x8b?\xa6\x1b\x8c?{b\x8c?\xcf\xb7\x8c?p\r\x8d?\x91c\x8d?#\xba\x8d?\x06\x14\x8e?\x8en\x8e?\xf5\xc9\x8e?+&amp;\x8f?{&amp;\x8f?\xca&amp;\x8f?\x18\'\x8f?d\'\x8f?\xb1\'\x8f?\xfc\'\x8f?G(\x8f?\x8e(\x8f?\xe3(\x8f?6)\x8f?\x87)\x8f?\xd9)\x8f?)*\x8f?x*\x8f?\xc6*\x8f?\x11+\x8f?x+\x8f?\xdd+\x8f?A,\x8f?\xa3,\x8f?\x04-\x8f?d-\x8f?\xc4-\x8f? .\x8f?\x8d.\x8f?\xf8.\x8f?`/\x8f?\xc6/\x8f?00\x8f?\x940\x8f?\xf70\x8f?Y1\x8f?\xbb1\x8f?\x1a2\x8f?y2\x8f?\xd62\x8f?43\x8f?\x8e3\x8f?\xe83\x8f??4\x8f?\xa64\x8f?\x0b5\x8f?n5\x8f?\xcf5\x8f?36\x8f?\x936\x8f?\xf16\x8f?N7\x8f?\xcb7\x8f?F8\x8f?\xbe8\x8f?49\x8f?\xac9\x8f?":\x8f?\x94:\x8f?\x05;\x8f?\x89;\x8f?\t&lt;\x8f?\x89&lt;\x8f?\x07=\x8f?\x82=\x8f?\xfe=\x8f?x&gt;\x8f?\xee&gt;\x8f?V?\x8f?\xbb?\x8f? @\x8f?\x83@\x8f?\xe4@\x8f?EA\x8f?\xa5A\x8f?\x01B\x8f?qB\x8f?\xdcB\x8f?EC\x8f?\xabC\x8f?\x14D\x8f?yD\x8f?\xdfD\x8f??E\x8f?\xc3E\x8f?FF\x8f?\xc6F\x8f?DG\x8f?\xc2G\x8f?=H\x8f?\xb8H\x8f?-I\x8f?\xbbI\x8f?DJ\x8f?\xcbJ\x8f?NK\x8f?\xd4K\x8f?XL\x8f?\xd5L\x8f?TM\x8f?\xd3M\x8f?NN\x8f?\xc8N\x8f??O\x8f?\xb7O\x8f?-P\x8f?\xa0P\x8f?\x13Q\x8f?\x97Q\x8f?\x19R\x8f?\x9aR\x8f?\x17S\x8f?\x95S\x8f?\x11T\x8f?\x8bT\x8f?\x01U\x8f?\xa3U\x8f?AV\x8f?\xdeV\x8f?xW\x8f?\x11X\x8f?\xa8X\x8f?&lt;Y\x8f?\xccY\x8f?xZ\x8f?\x1e[\x8f?\xc3[\x8f?b\\\x8f?\x06]\x8f?\xa4]\x8f??^\x8f?\xd9^\x8f?r_\x8f?\x07`\x8f?\x99`\x8f?\'a\x8f?\xb9a\x8f?Gb\x8f?\xd2b\x8f?Yc\x8f?\xfbc\x8f?\x97d\x8f?1e\x8f?\xc7e\x8f?`f\x8f?\xf5f\x8f?\x88g\x8f?\x17h\x8f?\xd9h\x8f?\x99i\x8f?Uj\x8f?\x0bk\x8f?\xc5k\x8f?zl\x8f?-m\x8f?\xdbm\x8f?\xaan\x8f?ro\x8f?8p\x8f?\xfap\x8f?\xbcq\x8f?|r\x8f?8s\x8f?\xf0s\x8f?\xa9t\x8f?^u\x8f?\x11v\x8f?\xc0v\x8f?pw\x8f?\x1cx\x8f?\xc6x\x8f?ky\x8f?0z\x8f?\xefz\x8f?\xaa{\x8f?b|\x8f?\x1d}\x8f?\xd2}\x8f?\x85~\x8f?4\x7f\x8f?!\x80\x8f?\n\x81\x8f?\xee\x81\x8f?\xce\x82\x8f?\xb0\x83\x8f?\x8d\x84\x8f?f\x85\x8f?&lt;\x86\x8f?5\x87\x8f?-\x88\x8f?\x1d\x89\x8f?\t\x8a\x8f?\xf6\x8a\x8f?\xe1\x8b\x8f?\xc4\x8c\x8f?\xa6\x8d\x8f?l\x8e\x8f?.\x8f\x8f?\xeb\x8f\x8f?\xa4\x90\x8f?a\x91\x8f?\x19\x92\x8f?\xcc\x92\x8f?~\x93\x8f?M\x94\x8f?\x19\x95\x8f?\xe0\x95\x8f?\xa4\x96\x8f?k\x97\x8f?.\x98\x8f?\xea\x98\x8f?\xa6\x99\x8f?\xa2\x9a\x8f?\x99\x9b\x8f?\x8d\x9c\x8f?{\x9d\x8f?l\x9e\x8f?Y\x9f\x8f??\xa0\x8f?!\xa1\x8f?.\xa2\x8f?2\xa3\x8f?3\xa4\x8f?-\xa5\x8f?,\xa6\x8f?#\xa7\x8f?\x18\xa8\x8f?\x06\xa9\x8f?\xf8\xa9\x8f?\xe4\xaa\x8f?\xcc\xab\x8f?\xae\xac\x8f?\x94\xad\x8f?s\xae\x8f?Q\xaf\x8f?)\xb0\x8f?\'\xb1\x8f? \xb2\x8f?\x14\xb3\x8f?\x03\xb4\x8f?\xf5\xb4\x8f?\xe2\xb5\x8f?\xca\xb6\x8f?\xad\xb7\x8f?\xe2\xb8\x8f?\x13\xba\x8f?&lt;\xbb\x8f?^\xbc\x8f?\x85\xbd\x8f?\xa6\xbe\x8f?\xc1\xbf\x8f?\xd6\xc0\x8f?\x1d\xc2\x8f?\\\xc3\x8f?\x97\xc4\x8f?\xc8\xc5\x8f?\x01\xc7\x8f?0\xc8\x8f?Y\xc9\x8f?}\xca\x8f?\xe4\xce\x8f?2\xd3\x8f?n\xd7\x8f?\x95\xdb\x8f?\xc7\xdf\x8f?\xe5\xe3\x8f?\xf1\xe7\x8f?\xe6\xeb\x8f?\x92\xf0\x8f?&amp;\xf5\x8f?\xaa\xf9\x8f?\x15\xfe\x8f?\x8d\x02\x90?\xf0\x06\x90?&lt;\x0b\x90?u\x0f\x90?4\x15\x90?\xd8\x1a\x90?b \x90?\xd1%\x90?S+\x90?\xb80\x90?\x086\x90?8;\x90?^A\x90?dG\x90?PM\x90? S\x90?\x00Y\x90?\xc6^\x90?qd\x90?\x01j\x90?\x9fo\x90?"u\x90?\x8dz\x90?\xdd\x7f\x90?@\x85\x90?\x87\x8a\x90?\xb7\x8f\x90?\xcc\x94\x90?\xcd\x9a\x90?\xb1\xa0\x90?{\xa6\x90?)\xac\x90?\xe6\xb1\x90?\x8c\xb7\x90?\x15\xbd\x90?\x86\xc2\x90?\xee\xc9\x90?4\xd1\x90?]\xd8\x90?c\xdf\x90?\x80\xe6\x90?y\xed\x90?X\xf4\x90?\x13\xfb\x90?\x08\x03\x91?\xd8\n\x91?\x88\x12\x91?\x10\x1a\x91?\xb5!\x91?6)\x91?\x960\x91?\xd67\x91?6&gt;\x91?\x7fD\x91?\xa9J\x91?\xb3P\x91?\xd5V\x91?\xd6\\\x91?\xbeb\x91?\x8bh\x91?bo\x91?\x1av\x91?\xb3|\x91?.\x83\x91?\xbf\x89\x91?2\x90\x91?\x84\x96\x91?\xbc\x9c\x91?5\xa5\x91?\x88\xad\x91?\xb9\xb5\x91?\xc2\xbd\x91?\xe8\xc5\x91?\xeb\xcd\x91?\xc8\xd5\x91?\x82\xdd\x91?\xa5\xe6\x91?\x9f\xef\x91?r\xf8\x91? \x01\x92?\xea\t\x92?\x8f\x12\x92?\n\x1b\x92?e#\x92?\xd5+\x92?!4\x92?H&lt;\x92?MD\x92?nL\x92?fT\x92?&gt;\\\x92?\xf4c\x92?\x0em\x92?\x01v\x92?\xcf~\x92?u\x87\x92?8\x90\x92?\xd5\x98\x92?P\xa1\x92?\xa0\xa9\x92?\xfd\xb4\x92?-\xc0\x92?0\xcb\x92?\x00\xd6\x92?\xfe\xe0\x92?\xc9\xeb\x92?i\xf6\x92?\xdf\x00\x93?@\r\x93?i\x19\x93?g%\x93?41\x93?-=\x93?\xf4H\x93?\x8fT\x93?\xfa_\x93?kk\x93?\xacv\x93?\xc2\x81\x93?\xa9\x8c\x93?\xb7\x97\x93?\x98\xa2\x93?O\xad\x93?\xd7\xb7\x93?M\xc4\x93?\x92\xd0\x93?\xa9\xdc\x93?\x90\xe8\x93?\xa3\xf4\x93?\x86\x00\x94?&gt;\x0c\x94?\xc2\x17\x94?\x83\'\x94?\x087\x94?ZF\x94?rU\x94?\xcfd\x94?\xefs\x94?\xda\x82\x94?\x8f\x91\x94?\xfe\xa2\x94?2\xb4\x94?+\xc5\x94?\xee\xd5\x94?\xf7\xe6\x94?\xc6\xf7\x94?`\x08\x95?\xbd\x18\x95?^)\x95?\xc29\x95?\xf2I\x95?\xe7Y\x95?%j\x95?%z\x95?\xf5\x89\x95?\x88\x99\x95?\x06\xac\x95?D\xbe\x95?M\xd0\x95?\x19\xe2\x95?9\xf4\x95?\x1c\x06\x96?\xc9\x17\x96?9)\x96?*A\x96?\xdbX\x96?Tp\x96?\x8f\x87\x96?E\x9f\x96?\xbc\xb6\x96?\xfb\xcd\x96?\xfd\xe4\x96?e\x00\x97?\x93\x1b\x97?\x896\x97?GQ\x97?\xa2l\x97?\xc2\x87\x97?\xad\xa2\x97?_\xbd\x97?"\xd5\x97?\xaa\xec\x97?\x02\x04\x98?\x18\x1b\x98?\xae2\x98?\x08J\x98?.a\x98?\x19x\x98?j\x93\x98?\x80\xae\x98?n\xc9\x98?\x1b\xe4\x98?o\xff\x98?\x89\x1a\x99?v5\x99?-P\x99?\x10u\x99?\xd9\x99\x99?\x93\xbe\x99?.\xe3\x99?\xdc\x08\x9a?p.\x9a?\xfbS\x9a?qy\x9a?{\xa6\x9a?\x9d\xd3\x9a?\xe2\x00\x9b?=.\x9b?)]\x9b?9\x8c\x9b?\x81\xbb\x9b?\xf5\xea\x9b?\r\x1c\x9c?ZM\x9c?\xfd~\x9c?\xe0\xb0\x9c?\xac\xe4\x9c?\xca\x18\x9d?[M\x9d?O\x82\x9d?\xb7\xc2\x9d?\x03\x04\x9e?hF\x9e?\xd8\x89\x9e?\xa8\xd0\x9e?\xd5\x18\x9f?\x8ab\x9f?\xce\xad\x9f?\xa2\x19\xa0?\x16\x8a\xa0?\xf0\xff\xa0?\xc9{\xa1?\xd8\x02\xa2?\x87\x92\xa2?\xa4,\xa3?\r\xd3\xa3?\xcb\xaf\xa4?Y\xaa\xa5?`\xce\xa6?\xc1.\xa8?8\x01\xaa?\xbe\x9e\xac?\x9cy\xb1?\xeah\xca?'

QASM: 
</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="98">
<pre><code>'OPENQASM 2.0;\ninclude "qelib1.inc";\nqreg q[10];\nu(0.74283063,5.2044897,0.98926634) q[0];\nu(3.6797547,5.5519018,5.144691) q[1];\nu(1.8728536,5.2152901,1.8132132) q[2];\nu(4.5905914,0.059626058,4.4641838) q[3];\nu(4.6174035,4.488265,4.80723) q[4];\nu(4.5903974,2.4311147,5.9549437) q[5];\nu(4.687211,0.61535245,1.6999713) q[6];\nu(4.7381563,5.1480927,0.86016178) q[7];\nu(1.550415,0.87675416,1.7371591) q[8];\nu(1.5602221,2.2341533,0.83279055) q[9];\n'</code></pre>
</div>
</div>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>compilation</category>
  <category>machine learning</category>
  <category>JAX</category>
  <guid>https://idnm.github.io/blog/posts/classiq_state_preparation/2022-06-21-classiq lognormal.html</guid>
  <pubDate>Mon, 20 Jun 2022 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/classiq_state_preparation/fishing.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Machine learning error correction codes</title>
  <link>https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/2022-06-16-machine learning error correction codes.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-2">   <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optax</span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-4">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install optax</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-7">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mynimize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git clone https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>idnm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>mynimize</span>
<span id="cb1-10">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>git reset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>hard e11daa3396ef7682fccf744ce3dce0262cbbfac2</span>
<span id="cb1-11">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mynimize.main <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> namedtuple</span>
<span id="cb1-14"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax.scipy.linalg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expm</span>
<span id="cb1-17"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-18"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> unitary_group</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/machine_learning_quantum_ecc/2022-06-16-Machine%20learning%20error%20correction%20codes.ipynb"> <img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Quantum error correction codes (QECC) are crucial to the prospects of the quantum technology as well as extremely interesting from a theoretical point of view. Despite similarities to the classical error correction, there are fundamental distinctions, too. A naive attempt to generalize classical codes to work with quantum bits faces several conceptual challenges, such as no-cloning theorem and decoherence induced by a measurement. I got curious how far one can go in constructing a simple quantum ECC without worrying too much about those, using a simple machine learning model with little to no physics assumptions underneath. I think the experiment worked out pretty well, for instance, I’ll show how to get a 5 qubit code. Sure, most things appear to be obvious in retrospect, and rediscovering something that you know is possible is a completely different thing. Still, I found this to be a very interesting exercise with a couple of bonus take-aways, such as:</p>
<ul>
<li>Measurements are not a necessary part of the error correction. Decoding can be a unitary operation (at least for some codes).</li>
<li>You can train the model on unitary errors only, general single-qubit error channels will be accounted for for free.</li>
</ul>
</section>
<section id="classical-repetition-code" class="level1">
<h1>Classical repetition code</h1>
<p>Following 99% of error correction tutorials I will start with the classical repetition code. And you know what, I do not even feel guilty, this is a great time-tested warm up. So, we are sending a classical bit along a noisy channel and it is flipped with a probability <img src="https://latex.codecogs.com/png.latex?p">. The error probability can be suppressed if we are willing to send more bits. Namely, instead of sending <code>0</code> we send <code>000</code>, instead of <code>1</code> we send <code>111</code>. This is called <em>encoding</em>, we encoded a single <em>logical</em> bit into several <em>physical</em> bits. Due to errors, the message <code>000</code> can be corrupted in several ways: 1. <code>000</code> : no corruption, with probability <img src="https://latex.codecogs.com/png.latex?(1-p)%5E3"> 2. <code>100</code>, <code>010</code>, <code>001</code>: single corrupted bit, with probability <img src="https://latex.codecogs.com/png.latex?3%20p(1-p)%5E2"> 3. <code>110</code>, <code>011</code>, <code>101</code>: two corrupted bits, with probability <img src="https://latex.codecogs.com/png.latex?3%20p%5E2(1-p)"> 4. <code>111</code>: all bits flipped, with probability <img src="https://latex.codecogs.com/png.latex?p%5E3"></p>
<p>Same holds for the <code>111</code> message.</p>
<p>Now, if the receiver sees any message except <code>000</code> or <code>111</code> he knows there was an error somewhere. He can try to fix the error by taking a majority vote, e.g.&nbsp;he assumes that <code>100</code> means <code>0</code> while <code>101</code> means <code>1</code>. If the single-bit errors are much more likely than two-bit or three-bit errors, this <em>decoding</em> strategy works. More precisely, it succeeds in cases (1) and (2) but fails in cases (3) and (4). The overall success probability is therefore <img src="https://latex.codecogs.com/png.latex?(1-p)%5E3+3p(1-p)%5E2"> and for <img src="https://latex.codecogs.com/png.latex?p%3E1/2"> it is in fact greater than <img src="https://latex.codecogs.com/png.latex?1-p">, the success probability of the unencoded message.</p>
</section>
<section id="conceptual-difficulties-with-qecc" class="level1">
<h1>Conceptual difficulties with QECC</h1>
<p>Now instead of sending a classical bit we want to send a qubit, also subject to noise. Can we use a similar strategy to protect the quantum bit? Textbooks often mention several apparent problems that make the quantum case sufficiently different from the classical.</p>
<ol type="1">
<li>Qubit states are continuous. Instead of sending just <code>0</code> or <code>1</code> we need to be able to send an arbitrary superposition <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle=%5Calpha%7C0%5Crangle+%5Cbeta%7C1%5Crangle">.</li>
<li>As a consequence, errors are also continuous. For example, instead of a full bit flip <img src="https://latex.codecogs.com/png.latex?X"> we can have ‘just a bit’ of a bit flip <img src="https://latex.codecogs.com/png.latex?R_X(%5Ctheta)=%5Ccos(%5Ctheta/2)-i%20X%20%5Csin(%5Ctheta/2)"> with very small <img src="https://latex.codecogs.com/png.latex?%5Ctheta">. There are also additional error types with no classical counterparts, such as the phase flip error <img src="https://latex.codecogs.com/png.latex?Z">. General single-qubit unitary error is a linear combination <img src="https://latex.codecogs.com/png.latex?U=%5Calpha_0+%5Calpha_1%20X+%5Calpha_2%20Y+%5Calpha_3%20Z">.</li>
<li>Quantum states can not be cloned. This means that for an unknown quantum state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> we can not construct and transmit e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cotimes%7C%5Cpsi%5Crangle%5Cotimes%7C%5Cpsi%5Crangle"> as a plain generalization of the repetition code, although that would definitely help.</li>
<li>When the message is received, we need to look at it to decide if there was an error and choose a correction. But looking at the quantum states can break the coherence that we were looking to preserve.</li>
</ol>
<p>We now know that all these issues can be elegantly resolved and the modern theory of error correction is rich and beautiful. My personal agenda for this small project was to see how far can one go with a black-box approach, sweeping all conceptual problems under the rug. The main two assumptions are - We need to use several physical qubits to safeguard a single logical qubit. - We only try to protect against single-qubit errors.</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/black_box.png" alt="Drawing" style="width: 600px;"></p>
</section>
<section id="machine-learning-qecc" class="level1">
<h1>Machine learning QECC</h1>
<p>Here is an architecture that I have in mind.</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/arch.svg" alt="Drawing" style="width: 800px;"></p>
<p>First, we embed a logical qubit into <img src="https://latex.codecogs.com/png.latex?n"> physical ones. I will do this in the simplest possible way <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%20%5Cto%20%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D">, i.e.&nbsp;assuming that the first physical qubit is the logical state to be transmitted while other physical qubits are initialized in <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> states. The initial embedding is in fact irrelevant, because after that I allow for an arbitrary encoding transformation <img src="https://latex.codecogs.com/png.latex?U_%7Bencoding%7D">. It is only required to be unitary. The encoding stage does the heavy lifting, and the encoding unitary is the main variable to be optimized. After that we add an error layer, which can consist of arbitrary single-qubit unitary errors. Then goes the decoding layer, which we will trust to recover the information about the logical qubit (it will also be trained). I will assume that the decoding layer is also a unitary. At the final step, the physical qubit state must somehow be projected onto the single-qubit state which will be our final, received and corrected state.</p>
<p>If you are familiar with quantum error correction, the assumption that decoding is a unitary operation and hence makes no explicit reference to syndrome measurements and things of that sort may look suspicious. We’ll see that it works, and make some comments afterwards.</p>
</section>
<section id="design-choices" class="level1">
<h1>Design choices</h1>
<section id="projecting-the-final-state" class="level2">
<h2 class="anchored" data-anchor-id="projecting-the-final-state">Projecting the final state</h2>
<p>There are still details to be filled in. One is to specify how to get a single-qubit logical state from the final state of the physical qubits. Similarly to the embedding step, I will assume that the relevant information is contained exclusively in the first physical qubit. Then, successful error correction implies that the first physical qubit is unentangled with the others after the decoding step and has the same state it had before the encoding.</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%20%5Cto%20%5Ctext%7BEncoding+Error+Decoding%7D%20%5Cto%20%7C%5Cpsi%5Crangle%5Cotimes%20%7Ce%5Crangle_%7Bn-1%7D"></p>
<p>Note that the rest of the physical qubits will end up in different states <img src="https://latex.codecogs.com/png.latex?%7Ce%5Crangle_%7Bn-1%7D"> depending on the error that have been corrected. Requiring that the final state is <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D"> regardless of the error is too strong and can not be satisfied for any interesting set of errors.</p>
</section>
<section id="dealing-with-continuum" class="level2">
<h2 class="anchored" data-anchor-id="dealing-with-continuum">Dealing with continuum</h2>
<p>Next, how do we deal with the continuum of states and errors? I guess that a truly black-box approach would be to generate a large set of initial states and single-qubit errors and train the model using all this data. If successful, check on the test data to exclude overfitting. I’m sure that would work, but here I will take a shortcut and exploit the linearity of the whole construction. Denote by <img src="https://latex.codecogs.com/png.latex?U(E)"> the full unitary of the encoding+error+correction process, for some error <img src="https://latex.codecogs.com/png.latex?E"></p>
<p><img src="https://latex.codecogs.com/png.latex?U(E)=U_%7Bdecoding%7D%5C,%5C,%20U_%7Berror%7D(E)%20%5C,%5C,%20U_%7Bencoding%7D%20%5C%20."></p>
<p>For a given initial state <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle=%5Calpha%20%7C0%5Crangle+%5Cbeta%20%7C1%5Crangle"> and a fixed error <img src="https://latex.codecogs.com/png.latex?E">, the final state can be reconstructed from the action on <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> states</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D=%5Calpha%5C,%5C,%20U(E)%20%7C0%5Crangle%5Cotimes%7C0%5Crangle%5E%7Bn-1%7D+%5Cbeta%5C,%5C,%20U(E)%7C1%5Crangle%5Cotimes%7C0%5Crangle%5E%7Bn-1%7D%20%5C%20."></p>
<p>Similarly, if we can correct errors corresponding to <img src="https://latex.codecogs.com/png.latex?X,%20Y"> and <img src="https://latex.codecogs.com/png.latex?Z"> unitaries on a given qubit, we will be able to correct an arbitrary linear combination of them, which is unitary. Indeed, say we can correct both <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> errors <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%5Cto%20U(X)%20%5Cto%20%7C%5Cpsi%5Crangle%5Cotimes%20%7Cx%5Crangle_%7Bn-1%7D%20%5C%20,%5C%5C%0A%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%5Cto%20U(Y)%20%5Cto%20%7C%5Cpsi%5Crangle%5Cotimes%20%7Cy%5Crangle_%7Bn-1%7D%20%5C%20.%0A%5Cend%7Balign*%7D"> Then their unitary linear combination will also be corrected in a sence that the state of the first physical qubit is the original encoded state <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%5Cto%20U(aX+bY)%20%5Cto%20%7C%5Cpsi%5Crangle%5Cotimes%5Cleft(a%7Cx%5Crangle_%7Bn-1%7D+b%7Cy%5Crangle_%7Bn-1%7D%5Cright)%20%5C%20.%0A%5Cend%7Balign*%7D"> In fact, correcting <img src="https://latex.codecogs.com/png.latex?X,Y"> and <img src="https://latex.codecogs.com/png.latex?Z"> errors on any of the qubits is sufficient to correct their arbitrary linear combination, including non-unitary ones and those acting on different qubits. More on that later.</p>
</section>
</section>
<section id="implementation" class="level1">
<h1>Implementation</h1>
<p>Here is a code that implements the model. I do no use any quantum framework and deal with unitary matrices directly. That requires making a few tensor products here and there, but nothing cumbersome. I include the code right below in order to make this notebook/post self-contained, but do not go into detailed explanations. Here are several technical highlights though. - I use <a href="https://jax.readthedocs.io/en/latest/#">JAX</a> as a numerical optimization backend. This why all the <code>jnp</code>s instead of <code>np</code>s. - I take a very low-key approach to optimization over unitary matrices, parametrizing them by Hermitian matrices <img src="https://latex.codecogs.com/png.latex?U=e%5E%7Bi%20H%7D">. Basis in Hermitian matrices can be chosen to consist of <img src="https://latex.codecogs.com/png.latex?e_%7Bii%7D,%20e_%7Bij%7D+e_%7Bji%7D"> and <img src="https://latex.codecogs.com/png.latex?i(e_%7Bij%7D-e_%7Bji%7D)">, where <img src="https://latex.codecogs.com/png.latex?e_%7Bij%7D"> is a matrix with all elements zero except one at position <img src="https://latex.codecogs.com/png.latex?ij">. Matrix exponentiation is an expensive procedure and to scale the code to more qubits a better parametrization of the unitary group is required, e.g.&nbsp;as done here <a href="https://github.com/LuchnikovI/QGOpt">QGOPT</a>. - I choose the loss associated with an error correction process <img src="https://latex.codecogs.com/png.latex?U(E)"> in the following way. Let <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi_0%5Crangle"> be the image of <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi_1%5Crangle"> of <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle"> <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi_0%5Crangle=U(E)%7C0%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D,%5Cquad%20%7C%5CPsi_1%5Crangle=U(E)%7C1%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%5C%20%5C%20.%20"> The loss is <img src="https://latex.codecogs.com/png.latex?L(E)%20=%202-L_Z-L_X,%20%5Cqquad%20L_Z=%5Clangle%20%5CPsi_0%7CZ_1%7C%5CPsi_0%5Crangle,%20%5Cqquad%20L_X=%5Coperatorname%7BRe%7D%20%5Clangle%20%5CPsi_0%7CX_1%7C%5CPsi_1%5Crangle%20%5C%20."> The term <img src="https://latex.codecogs.com/png.latex?L_Z"> is maximal <img src="https://latex.codecogs.com/png.latex?L_Z=1"> when <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi_0%5Crangle=%7C0%5Crangle%20%5Cotimes%20%7Ce%5Crangle_%7Bn%7D">, i.e.&nbsp;when the <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> state of the first physical qubit is preserved by the error correction. If <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> is mapped to a mixed state or to a pure state different from <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle"> we have <img src="https://latex.codecogs.com/png.latex?L_Z%3C1">. The term <img src="https://latex.codecogs.com/png.latex?L_X"> is maximal when the <img src="https://latex.codecogs.com/png.latex?%7C%5CPsi_1%5Crangle=X_1%20%7C%5CPsi_0%5Crangle">. If <img src="https://latex.codecogs.com/png.latex?%7C0%5Crangle%5Cotimes%7C0%5Crangle%5E%7Bn-1%7D%5Cto%7C0%5Crangle%20%5Cotimes%20%7Ce%5Crangle_%7Bn%7D">, this condition implies that <img src="https://latex.codecogs.com/png.latex?%7C1%5Crangle%5Cotimes%7C0%5Crangle%5E%7Bn-1%7D%20%5Cto%20%7C1%5Crangle%20%5Cotimes%20%7Ce%5Crangle_%7Bn%7D">. By linearity, this is sufficient for an arbitray input state to be corrected when subject to this error. - The total loss is the sum of individual losses over all <img src="https://latex.codecogs.com/png.latex?X,%20Y,%20Z"> errors acting on each qubit <img src="https://latex.codecogs.com/png.latex?L(E)=%5Csum_%7Bi=1%7D%5E%7Bn%7D%5Cleft(L(X_i)+L(Y_i)+L(Z_i)%5Cright)%20%5C%20."> However, we may wish to correct only a subset of errors, say only <img src="https://latex.codecogs.com/png.latex?X"> errors. Then include only those in the loss function.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pauli matrices.</span></span>
<span id="cb2-3">x_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb2-4">                   [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb2-5"></span>
<span id="cb2-6">y_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>],</span>
<span id="cb2-7">                   [<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64)</span>
<span id="cb2-8"></span>
<span id="cb2-9">z_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-10">                   [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb2-11"></span>
<span id="cb2-12">pauli <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), x_mat, y_mat, z_mat)</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parametrized unitary matrices.</span></span>
<span id="cb2-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> UnitaryLayer:</span>
<span id="cb2-17">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_qubits):</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_qubits</span>
<span id="cb2-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb2-20">    </span>
<span id="cb2-21">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> hermitian_basis(num_qubits):</span>
<span id="cb2-23">        d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits</span>
<span id="cb2-24">        diag_basis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [jnp.zeros((d, d), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64).at[i, i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d)]</span>
<span id="cb2-25">        off_diag_real_basis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [jnp.zeros((d, d), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64).at[i, j].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).at[j, i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i)]</span>
<span id="cb2-26">        off_diag_im_basis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [jnp.zeros((d, d), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64).at[i, j].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>).at[j, i].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(d) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i)]</span>
<span id="cb2-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.array(diag_basis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>off_diag_real_basis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>off_diag_im_basis)</span>
<span id="cb2-28">    </span>
<span id="cb2-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params):</span>
<span id="cb2-30">        generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.tensordot(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.hermitian_basis(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits), params, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ), (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, )))</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> expm(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>generator)</span>
<span id="cb2-32">    </span>
<span id="cb2-33"></span>
<span id="cb2-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrices corresponding individual single-qubit errors.    </span></span>
<span id="cb2-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ErrorLayer:</span>
<span id="cb2-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_qubits, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pauli):</span>
<span id="cb2-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_qubits</span>
<span id="cb2-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> errors</span>
<span id="cb2-39">    </span>
<span id="cb2-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, q, e):</span>
<span id="cb2-41">        error_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.errors[e] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>q <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits)]</span>
<span id="cb2-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(jnp.kron, error_list)</span>
<span id="cb2-43">        </span>
<span id="cb2-44">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> all_error_unitaries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-45">        single_error_unitaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary(q, e) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.errors))]</span>
<span id="cb2-46">        id_error <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits)</span>
<span id="cb2-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.array([id_error]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>single_error_unitaries)</span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model parameters as a namedtuple.    </span></span>
<span id="cb2-50">ecc_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namedtuple(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ECCparams'</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'encoding_params'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'decoding_params'</span>])</span>
<span id="cb2-51"></span>
<span id="cb2-52"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ECCmodel:</span>
<span id="cb2-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_qubits, error_layer, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-54">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_qubits</span>
<span id="cb2-55">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.error_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error_layer</span>
<span id="cb2-56">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UnitaryLayer(num_qubits)</span>
<span id="cb2-57">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoding_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UnitaryLayer(num_qubits)</span>
<span id="cb2-58">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb2-59">    </span>
<span id="cb2-60">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> embed(initial_state, num_qubits):</span>
<span id="cb2-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Take |psi&gt; and output |psi&gt;|0,0,0, ...&gt; """</span></span>
<span id="cb2-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.kron(initial_state, jnp.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>(num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).at[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-64">    </span>
<span id="cb2-65">    </span>
<span id="cb2-66">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> final_state(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, initial_state, encoding_unitary, decoding_unitary, error_unitary):</span>
<span id="cb2-67">        s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoding_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> error_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> encoding_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> initial_state</span>
<span id="cb2-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> s</span>
<span id="cb2-69">    </span>
<span id="cb2-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, error_unitary):</span>
<span id="cb2-71">        encoding_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding_layer.unitary(params.encoding_params)</span>
<span id="cb2-72">        decoding_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoding_layer.unitary(params.decoding_params)</span>
<span id="cb2-73">        </span>
<span id="cb2-74">        final_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-75">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> initial_state_1q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]:</span>
<span id="cb2-76">            initial_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embed(jnp.array(initial_state_1q, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits)</span>
<span id="cb2-77">            final_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.final_state(initial_state, encoding_unitary, decoding_unitary, error_unitary)            </span>
<span id="cb2-78">            final_states.append(final_state)</span>
<span id="cb2-79">        </span>
<span id="cb2-80">        Psi_0, Psi_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_states</span>
<span id="cb2-81">        </span>
<span id="cb2-82">        X1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(jnp.kron, [x_mat]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-83">        Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(jnp.kron, [z_mat]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>[jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-84">        </span>
<span id="cb2-85">        Z_avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.real(Psi_0.conj() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Z1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Psi_0).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-86">        X_off_diag <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (Psi_0.conj() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> X1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> Psi_1).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>Z_avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>jnp.real(X_off_diag)</span>
<span id="cb2-88">    </span>
<span id="cb2-89">    </span>
<span id="cb2-90">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, opt_options<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>OptOptions(num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)):</span>
<span id="cb2-91"></span>
<span id="cb2-92">        error_unitaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.error_layer.all_error_unitaries()</span>
<span id="cb2-93">        </span>
<span id="cb2-94">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> loss(params):</span>
<span id="cb2-95">            losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vmap(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> error_u: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss(params, error_u))(error_unitaries)</span>
<span id="cb2-96">            </span>
<span id="cb2-97">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> losses.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(error_unitaries)</span>
<span id="cb2-98">        </span>
<span id="cb2-99">        initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(opt_options.random_seed), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding_layer.num_params))</span>
<span id="cb2-100">        initial_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [ecc_params(initial_params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], initial_params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])]</span>
<span id="cb2-101">        </span>
<span id="cb2-102">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `mynimize` is just my custom optimization routine with a JAX backend. </span></span>
<span id="cb2-103">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mynimize(loss, initial_params, opt_options)        </span>
<span id="cb2-104">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.best_result.best_params</span>
<span id="cb2-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results.best_result</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)</code></pre>
</div>
</div>
</section>
<section id="quantum-repetition-code" class="level1">
<h1>Quantum repetition code</h1>
<p>Now let us put the model to use. It is well known that with three physical qubits one can protect a logical qubit from <img src="https://latex.codecogs.com/png.latex?X"> erorrs. This is a generalization of the classical repetition code. Let’s see if our model can do that.</p>
<div class="cell" data-scrolled="true" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb4-2"></span>
<span id="cb4-3">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-4">error_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ErrorLayer(num_qubits, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[x_mat])</span>
<span id="cb4-5"></span>
<span id="cb4-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ECCmodel(num_qubits, error_layer)</span>
<span id="cb4-7">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.train(OptOptions(num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>))</span>
<span id="cb4-8"></span>
<span id="cb4-9">result.plot_loss_history()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iteration'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss history'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 15.6 s, sys: 62.7 ms, total: 15.7 s
Wall time: 15.6 s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Text(0.5, 1.0, 'Loss history')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/2022-06-16-Machine learning error correction codes_files/figure-html/cell-4-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>OK, the optimization is clearly successfull. Of course there is always a chance that there are mistakes in the code or in the definition of the loss function itself. I will give a more thorough verification for the 5-qubit code later. By modifying and re-running the cell above you can also do some simple sanity checks – see if the same results can be achieved with fewer qubits (<code>num_qubits</code> <img src="https://latex.codecogs.com/png.latex?%5Cto"> 2) or if more errors can be corrected (<code>errors</code><img src="https://latex.codecogs.com/png.latex?%5Cto"><code>[x_mat, y_mat]</code>). Neither works, of course.</p>
</section>
<section id="standard-description-of-the-quantum-repetition-code" class="level1">
<h1>Standard description of the quantum repetition code</h1>
<p>Now that we have seen that a black-box approach works it is instructive to revisit the usual construction of the error correcting codes. Here is how the quantum repetition code, which is able to correct <img src="https://latex.codecogs.com/png.latex?X"> errors, works. Encoding is done as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle=%5Calpha%7C0%5Crangle+%5Cbeta%7C1%5Crangle%5Cto%20%5Calpha%20%7C000%5Crangle+%5Cbeta%7C111%5Crangle%20%5C%20."></p>
<p>This does not violate the no-cloning theorem because the new state is not <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cotimes%7C%5Cpsi%5Crangle%5Cotimes%7C%5Cpsi%5Crangle">. Coefficients <img src="https://latex.codecogs.com/png.latex?%5Calpha"> and <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, which define the state, are not copied. This encoding can be done with the following circuit</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/ghz.png" alt="Drawing" style="width: 150px;"></p>
<p>Now say there was an <img src="https://latex.codecogs.com/png.latex?X"> error acting on the first qubit during the transmission <img src="https://latex.codecogs.com/png.latex?%5Calpha%20%7C000%5Crangle+%5Cbeta%7C111%5Crangle%5Cto%20X_1%20%5Cto%20%5Calpha%20%7C100%5Crangle+%5Cbeta%7C011%5Crangle"> Can we detect an correct it? The problem is that measuring any of the qubits individually destroys their coherent superposition. A workaround is to make collective measurements <img src="https://latex.codecogs.com/png.latex?Z_1Z_2"> and <img src="https://latex.codecogs.com/png.latex?Z_1Z_3">, known as parity checks. Both terms in the corrupted decomposition have the same eigenvalues and hence coherence is preserved. Parity checks allow to identify qubit 1 as corrupted, and correct the error by applying <img src="https://latex.codecogs.com/png.latex?X_1">.</p>
</section>
<section id="can-we-do-without-a-measurment" class="level1">
<h1>Can we do without a measurment?</h1>
<p>Measurements and post-selected correction operators were not part of our model, where the decoder is unitary. Is there something wrong with our approach, or measurements are not strictly necessary? I do think they aren’t, but you would not be able to tell from most of the introductory literature. To illustrate the situation for the repetition code, I came up with the following unitary circuit, which can correct/decode any single <img src="https://latex.codecogs.com/png.latex?X"> error in the repetition code</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/dec.png" alt="Drawing" style="width: 200px;"></p>
<p>It is straightforward to check that it transforms vectors with single <img src="https://latex.codecogs.com/png.latex?X"> errors as follows. <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AI_%7B%7D:%5Cquad%20%7C000%5Crangle%5Cto%20%7C000%5Crangle,%5Cquad%20%7C111%5Crangle%5Cto%20%7C100%5Crangle%5C%5C%0AX_1:%5Cquad%7C100%5Crangle%5Cto%20%7C011%5Crangle,%5Cquad%20%7C011%5Crangle%5Cto%20%7C111%5Crangle%5C%5C%0AX_2:%5Cquad%7C010%5Crangle%5Cto%20%7C101%5Crangle,%5Cquad%20%7C010%5Crangle%5Cto%20%7C110%5Crangle%5C%5C%0AX_3:%5Cquad%7C001%5Crangle%5Cto%20%7C001%5Crangle,%5Cquad%20%7C110%5Crangle%5Cto%20%7C101%5Crangle%5C%5C%0A%5Cend%7Balign*%7D"> Important things to note here are that the first qubit value becomes the majority vote, while two other qubit registers agree within the same line. I do not claim that our numerical optimization above discovered exactly this circuit and/or the repetition encoding, but it must be something equivalent.</p>
</section>
<section id="qubit-code" class="level1">
<h1>5 qubit code</h1>
<p>The smallest amount of physical qubits that can correct against arbitrary single-qubit errors is known to be 5. Let me sketch a proof. Please! No, it’s not needed to make my points, I just like it a lot. OK? Great!</p>
<p>If a code can correct an arbitrary single-qubit error, it can also recover from the loss of two qubits. If we’d have an ECC with just four qubits, we could separate them into two groups 4=2+2. Each group could recover the encoded state, which produces two copies of it. This violates the no-cloning theorem! Lowering the number of qubits does not help, of course.</p>
<p>Good, let us try to train the model with 5 physical qubits and the error operators that span all single-qubit errors.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb7-2"></span>
<span id="cb7-3">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb7-4">error_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ErrorLayer(num_qubits, errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[x_mat, y_mat, z_mat])</span>
<span id="cb7-5"></span>
<span id="cb7-6">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ECCmodel(num_qubits, error_layer)</span>
<span id="cb7-7">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.train(OptOptions(num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1500</span>))</span>
<span id="cb7-8"></span>
<span id="cb7-9">result.plot_loss_history()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-10">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iteration'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb7-11">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss history'</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 2min 55s, sys: 1.3 s, total: 2min 56s
Wall time: 2min 55s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Text(0.5, 1.0, 'Loss history')</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/2022-06-16-Machine learning error correction codes_files/figure-html/cell-5-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>The loss function indicates that our model learns a 5-qubit ECC. You may wish to check that it does not work with fewer qubits, e.g.&nbsp;<code>num_qubits</code>$$4. Another empirical observation is that if the model is trained on <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Z"> errors only, it will be able to correct <img src="https://latex.codecogs.com/png.latex?Y"> errors as well (passes verification below). This does not seem to be guarantied in general, as <a href="https://quantumcomputing.stackexchange.com/questions/26846/if-a-quantum-error-correcting-code-corrects-both-x-and-z-errors-will-it-be">counter-examples</a> exist.</p>
</section>
<section id="verification" class="level1">
<h1>Verification</h1>
<p>To convince you and myself that the loss plot above does reflect learning a genuine ECC here I will carry out an independent check. First let me note that the way errors enter in the model we trained is not completely general. The most general evolution of the initial state under an interaction with an environment is described by a quantum channel</p>
<p><img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle%5Cto%20%5Crho%20=%20%5Coperatorname%7BTr%7D_%7Bn-1%7D%5Csum%20%7BM_a%7D%7C%5CPsi%5Crangle%5Clangle%5CPsi%7CM_a%5E%5Cdagger,%5Cqquad%20%7C%5CPsi%5Crangle=%7C%5Cpsi%5Crangle%5Cotimes%20%7C0%5Crangle%5E%7Bn-1%7D%20."></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?%5Crho"> is the final density matrix of the first physical qubit, which by our assumption corresponds to the logical qubit after error correction process. The partial trace is taken with respect to the other physical qubits. Matrices <img src="https://latex.codecogs.com/png.latex?M_a"> are called Kraus operators and could be thought of as a combination <img src="https://latex.codecogs.com/png.latex?M_a%20=%20U_%7Bdecoding%7D%20E_a%20U_%7Bencoding%7D%20%5C%20."> We trained our model on cases where the error part <img src="https://latex.codecogs.com/png.latex?E_a"> in each Kraus operator <img src="https://latex.codecogs.com/png.latex?M_a"> is a single Pauli operator acting on some qubit, e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?E_a=X_2">. A general single-qubit error corresponds to each <img src="https://latex.codecogs.com/png.latex?E_a"> being a linear combination of single-qubit unitaries <img src="https://latex.codecogs.com/png.latex?E_a=%5Csum_%7Bi=1%7D%5E%7Bn%7D%20c_%7Bai%7D%20U_i."> For example, one of them could be something like <img src="https://latex.codecogs.com/png.latex?E_1%20=%20c_%7B11%7D(0.13%20X_1+2.7%20Y_1)+c_%7B12%7D%20Z_2%20+%20c_%7B13%7D%20(Y_1-0.55%20Z_1)">. Kraus operators are not required to be unitary, but only to satisfy the completeness relation <img src="https://latex.codecogs.com/png.latex?%5Csum%20M_a%5E%5Cdagger%20M_a=1">. Our model was trained so that <img src="https://latex.codecogs.com/png.latex?M_a%20%7C%5CPsi%5Crangle=%7C%5Cpsi%5Crangle%20%5Cotimes%20%7C%5Ctext%7Bsome%20state%7D%5Crangle"> when <img src="https://latex.codecogs.com/png.latex?M_a"> only contains Pauli errors acting on a single qubit. However, this equation extends to arbitrary single-qubit errors by linearity.</p>
<p>To perform an independent check I generate a bunch of initial states and generic single-qubit errors <img src="https://latex.codecogs.com/png.latex?E_a">. I will restrict to channels with single (non-normalized) Kraus operators for simplicity. If (normalized) density matrices <img src="https://latex.codecogs.com/png.latex?%20%5Crho_a=%5Cfrac%7BM_a%7C%5CPsi%5Crangle%5Clangle%5CPsi%7CM_a%5E%5Cdagger%7D%7B%5Clangle%20%5CPsi%7CM_a%5E%5Cdagger%20M_a%7C%5CPsi%5Crangle%7D%20"> reproduce the correlators of the original state for any <img src="https://latex.codecogs.com/png.latex?M_a">, they surely do for any sum over <img src="https://latex.codecogs.com/png.latex?M_a">. Thus, I will check that</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Clangle%5Cpsi%7CX%7C%5Cpsi%5Crangle=%5Coperatorname%7Btr%7D%5Crho_a%20X,%5Cquad%20%5Clangle%5Cpsi%7CY%7C%5Cpsi%5Crangle=%5Coperatorname%7Btr%7D%5Crho_a%20Y,%5Cquad%20%5Clangle%5Cpsi%7CZ%7C%5Cpsi%5Crangle=%5Coperatorname%7Btr%7D%5Crho_a%20Z%20."></p>
<p>Essentially, we’ll do the full state tomography of the first physical qubit. This of course should be equivalent to the loss function we used during training, but I think reformulation is useful as an additional consistency check.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random seed, JAX-style</span></span>
<span id="cb10-2">key, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>keys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.split(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample sizes.</span></span>
<span id="cb10-5">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.num_qubits</span>
<span id="cb10-6">num_initial_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb10-7">num_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial states, drawn at random and normalized.</span></span>
<span id="cb10-10"></span>
<span id="cb10-11">initial_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, num_initial_states, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2x real components</span></span>
<span id="cb10-12">initial_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initial_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>initial_states[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># combine into 1x complext components</span></span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> norm_state(s):</span>
<span id="cb10-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.sqrt(jnp.real(s.conj()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>s).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb10-16"></span>
<span id="cb10-17">norms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [norm_state(s) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> initial_states]</span>
<span id="cb10-18">initial_states <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>norm_state(s) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> initial_states]</span>
<span id="cb10-19"></span>
<span id="cb10-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### Defining random linear combinations of single-qubits errors is a bit cumbersome, but purely technical.</span></span>
<span id="cb10-21"></span>
<span id="cb10-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Random single-qubit errors.</span></span>
<span id="cb10-23">random_1q_unitaries <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_errors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits).reshape(num_errors, num_qubits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb10-24">random_coefficients <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(keys[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], (num_errors, num_qubits))</span>
<span id="cb10-25"></span>
<span id="cb10-26"></span>
<span id="cb10-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> error_at_position(error_u, i, num_qubits):</span>
<span id="cb10-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Takes U and returns tensor product 1 x 1 x ... U x 1 ... x 1 with U at position i."""</span></span>
<span id="cb10-29">    ops <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits</span>
<span id="cb10-30">    ops[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> error_u</span>
<span id="cb10-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(jnp.kron, ops)</span>
<span id="cb10-32"></span>
<span id="cb10-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_error_operator(errors, coeffs):   </span>
<span id="cb10-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Takes a list of 1q errors and puts error 1 on qubit 1, error 2 on qubit 2, etc, then takes their liner combination."""</span></span>
<span id="cb10-35">    num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(errors)</span>
<span id="cb10-36">    full_errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [error_at_position(u, i, num_qubits) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, u <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(errors)]</span>
<span id="cb10-37">    </span>
<span id="cb10-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([u<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u, c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(full_errors, coeffs)])</span>
<span id="cb10-39"></span>
<span id="cb10-40">errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [make_error_operator(errors, coeffs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> errors, coeffs <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(random_1q_unitaries, random_coefficients)]</span>
<span id="cb10-41">errors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array(errors)</span></code></pre></div>
</div>
<p>So finally we have a bunch of initial states and general (non-unitary) single-qubit error operators. Let’s see directly the the model is able to correct them.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.params</span>
<span id="cb11-2"></span>
<span id="cb11-3">u_encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.encoding_layer.unitary(params.encoding_params)</span>
<span id="cb11-4">u_decoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.decoding_layer.unitary(params.decoding_params)</span>
<span id="cb11-5"></span>
<span id="cb11-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> density_matrix(s):</span>
<span id="cb11-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Density matrix of the first qubit."""</span></span>
<span id="cb11-8">    num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(jnp.log2(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(s)))</span>
<span id="cb11-9">    s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> s.reshape([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits)</span>
<span id="cb11-10">    axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_qubits))</span>
<span id="cb11-11">    rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.tensordot(s, s.conj(), axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(axes, axes))</span>
<span id="cb11-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rho</span>
<span id="cb11-13">    </span>
<span id="cb11-14"></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> tomography_loss(initial_state, error_u):</span>
<span id="cb11-16">    final_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u_decoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> error_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> u_encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> ECCmodel.embed(initial_state, num_qubits)</span>
<span id="cb11-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For non-unitary errors the state should be normilized.</span></span>
<span id="cb11-18">    final_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> final_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>jnp.sqrt(jnp.real((final_state.conj()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>final_state).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()))</span>
<span id="cb11-19">    final_rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> density_matrix(final_state)</span>
<span id="cb11-20"></span>
<span id="cb11-21">    pauli_averages_initial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(initial_state.conj() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> initial_state).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [x_mat, y_mat, z_mat]]</span>
<span id="cb11-22">    pauli_averages_final <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [jnp.trace(final_rho <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> p) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [x_mat, y_mat, z_mat]]</span>
<span id="cb11-23">    </span>
<span id="cb11-24">    loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([(avg_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> avg_f)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> avg_i, avg_f <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(pauli_averages_initial, pauli_averages_final)])</span>
<span id="cb11-25"></span>
<span id="cb11-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.real(loss)</span>
<span id="cb11-27"></span>
<span id="cb11-28"></span>
<span id="cb11-29">losses <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tomography_loss(s, u) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> initial_states <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> u <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> errors]</span>
<span id="cb11-30">avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(losses)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(losses)</span>
<span id="cb11-31"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Average loss from tomography: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>(avg_loss)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Average loss from tomography: 2.6336230973811325e-09</code></pre>
</div>
</div>
<p>OK, the average tomographic loss is basically within the machine precision, which makes a strong case for the fact our simple model did learn a genuine ECC code on 5 qubits. This wraps up my experiment!</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>QML</category>
  <category>QEC</category>
  <guid>https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/2022-06-16-machine learning error correction codes.html</guid>
  <pubDate>Wed, 15 Jun 2022 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/machine_learning_quantum_ecc/black_box.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>Some analytic facts about variational quantum algorithms</title>
  <link>https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/2022-05-17-some analytic facts about variational algorithms.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.circuit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Parameter</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> math <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pi</span></code></pre></div>
</details>
</div>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Variational quantum algorithms (VQA) is a huge field by now with many prospective applications and a poll of advocates for their potential quantum advantage on the NISQ devices, see e.g.&nbsp;<a href="https://arxiv.org/abs/2012.09265">here</a> for a recent review. I usually think of variational quantum algorithms as analogues of the neural networks with a parametrized quantum circuit playing the role of a trainable model. Here is an example of a parametrized quantum circuit:</p>
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/pqc.png" alt="Drawing" style="width: 1000px;"></p>
<p>Despite certain similarities there are also crucial distinctions between the classical and quantum nets, manifesting both in their functional shapes and trainability properties. Here I will mostly talk about some functional properties of parametrized quantum circuits, and briefly touch on the trainability issues at the end. A whole slew of additional peculiarities arise when you want to run quantum circuits on real quantum hardware and have to deal with errors and stochastic nature of measurements. Here I will ignore these issues completely, effectively assuming that we can run a classical simulation of the quantum circuit.</p>
</section>
<section id="hi-cos-hi-sin" class="level1">
<h1>Hi <img src="https://latex.codecogs.com/png.latex?%5Ccos">, hi <img src="https://latex.codecogs.com/png.latex?%5Csin">!</h1>
<p>For a generic neural net the loss function is a highly non-linear function of each weight, due to non-linear activation functions that connect the layers. In contrast, dependence of the parametrized quantum circuits on each single parameter separately is extremely simple.</p>
<p>I will denote the unitary matrix of a parametrized quantum circuit by <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)">, with <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> standing for all the parameters collectively. A simple observation, and really the basis for all of the following discussion, is the following equation <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU(%5Ctheta_i)=U_0%20%5Ccos%20%5Cfrac%7B%5Ctheta_i%7D%7B2%7D+U_1%5Csin%5Cfrac%7B%5Ctheta_i%7D%7B2%7D%20%5Clabel%7Bu%20cos%20sin%7D%20%5C%20.%0A%5Cend%7Balign%7D"> Here <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i"> stands for any parameter of the circuit, other are assumed to be fixed. Matrix coefficients <img src="https://latex.codecogs.com/png.latex?U_0"> and <img src="https://latex.codecogs.com/png.latex?U_1"> are given by <img src="https://latex.codecogs.com/png.latex?U_0=U(0)"> and <img src="https://latex.codecogs.com/png.latex?U_1%20=%20U(%5Cpi)">. Relation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bu%20cos%20sin%7D"> follows from the simple fact that all gates typically considered in VQA are of the form <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AG(%5Ctheta)%20=%20e%5E%7B-i%5Ctheta%20%5CSigma%20/2%7D%0A%5Cend%7Balign*%7D"> with a generator <img src="https://latex.codecogs.com/png.latex?%5CSigma"> that satisfies <img src="https://latex.codecogs.com/png.latex?%5CSigma%5E2=1">. Hence, by a generalization of Euler’s formula <img src="https://latex.codecogs.com/png.latex?e%5E%7Bi%5Cphi%7D=%5Ccos%20%5Cphi+i%5Csin%5Cphi"> any gate can be alternatively written as <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AG(%5Ctheta)%20=%20%5Ccos%20%5Cfrac%7B%5Ctheta%7D%7B2%7D-i%5CSigma%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D%20%5C%20.%0A%5Cend%7Balign*%7D"> As an example one take any single-qubit Pauli rotation <a href="https://qiskit.org/documentation/stubs/qiskit.circuit.library.RXGate.html">ref</a>, say <img src="https://latex.codecogs.com/png.latex?R_X(%5Ctheta)=e%5E%7B-i%20%5Ctheta%20X/2%7D=%5Ccos%20%5Cfrac%7B%5Ctheta%7D%7B2%7D-iX%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D">. Parametric two-qubit gates, e.g.&nbsp;<a href="https://qiskit.org/documentation/stubs/qiskit.circuit.library.RZXGate.html"><img src="https://latex.codecogs.com/png.latex?R_%7BZX%7D"> gate</a>, usually conform to the same rule. Because of the trigonometric function here the parameters in VQA are often referred to as <em>angles</em>, the terminology which I will follow.</p>
</section>
<section id="a-typical-loss-function" class="level1">
<h1>A typical loss function</h1>
<p>A subset of the VQA are variational quantum eigensolvers (VQE). A typical loss function in VQE is <em>quadratic</em> in <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)">. For instance, one common goal in VQE is to prepare the ground state of some Hamiltonian <img src="https://latex.codecogs.com/png.latex?H"> using an ansatz <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi(%5Ctheta)%5Crangle%20=%20U(%5Ctheta)%7C0%5Crangle">. The relevant cost function to be minimized is</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AL(%5Ctheta)=%5Clangle%5Cpsi(%5Ctheta)%7CH%7C%5Cpsi(%5Ctheta)%5Crangle%20%5Clabel%7Bloss%20VQE%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>In the unitary synthesis problem, <a href="https://arxiv.org/abs/2205.01121">that I’ve been recently interested in</a>, the goal is to make the circuit <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)"> equivalent to some target unitary <img src="https://latex.codecogs.com/png.latex?V">. The relevant loss can be defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AL(%5Ctheta)=-%7C%5Coperatorname%7BTr%7D%20V%5E%5Cdagger%20U(%5Ctheta)%7C%5E2%0A%5Cend%7Balign*%7D"></p>
<p>You got the idea. Note that while the circuit <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)"> has only two terms <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bu%20cos%20sin%7D"> as a function of any angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i">, the quadratic loss function will have three terms (note also the period doubling)</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AL(%5Ctheta_i)=A%20%5Ccos%5Ctheta_i+B%20%5Csin%20%5Ctheta_i%20+%20C%20%5C%20.%0A%5Cend%7Balign*%7D"></p>
<p>Here <img src="https://latex.codecogs.com/png.latex?A,%20B,%20C"> are functions of all the other angles except for <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i">. They are the only unknowns that specify dependence on any particular angle and can be found with just three evaluations of the loss function, e.g.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AA+B%20=%20L(0),%5Cqquad%20A+C=L(%5Cpi/2),%5Cqquad%20A-C%20=%20L(-%5Cpi/2)%20%5CRightarrow%5C%5C%0AA%20=%20%5Cfrac%7BL(%5Cpi/2)+L(-%5Cpi/2)%7D%7B2%7D,%5Cqquad%20C=%5Cfrac%7BL(%5Cpi/2)-L(-%5Cpi/2)%7D%7B2%7D,%5Cqquad%20B%20=%20L(0)-A%20%5C%20.%0A%5Cend%7Balign*%7D"></p>
</section>
<section id="parameter-shift-rule" class="level1">
<h1>Parameter shift rule</h1>
<p>Perhaps the best known consequence of this property is the parameter shift rule for derivatives. First, a bit of a background. Let’s assume we need to estimate the derivative of some function <img src="https://latex.codecogs.com/png.latex?f(x)"> that we only have numerical access to. Then, there is nothing much better one can do than to use the finite difference approximations. For example, using two function evaluations it is possible to compute the first derivative up to the second approximation order</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0Af'(x)=%5Cfrac%7Bf(x+%5Cepsilon)-f(x-%5Cepsilon)%7D%7B2%5Cepsilon%7D+O(%5Cepsilon%5E2)%0A%5Cend%7Balign*%7D"> In general, adding one more evaluation point allows to improve the accuracy by one order. However, when you have additional knowledge about the function much more efficient strategy may exists. In particular, for VQE loss functions <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bloss%20VQE%7D">, which are basically simple sinusoidals, an <em>exact</em> derivative computation is possible with just two function evaluations</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AL'(%5Ctheta_i)=-A%20%5Csin(%5Ctheta_i)+B%5Ccos%7B%5Ctheta_i%7D=%5Cfrac%7BL(%5Ctheta_i+%5Cpi/2)-L(%5Ctheta_i-%5Cpi/2)%7D%7B2%7D%20%5C%20,%0A%5Cend%7Balign*%7D"> which follows from <img src="https://latex.codecogs.com/png.latex?%5Csin(x+%5Cpi/2)=%5Ccos%20x,%5C,%5C,%5Ccos(x+%5Cpi/2)=-%5Csin%20x">. Having access to exact derivatives generally enhances the performance of the gradient-based optimizers.</p>
</section>
<section id="sequential-optimization" class="level1">
<h1>Sequential optimization</h1>
<p>An interesting extension of this idea, that is apparently much less known than the parameter-shift rule itself, was proposed by several group at roughly the same time (<a href="http://arxiv.org/abs/1903.12166">[1]</a>, <a href="https://arxiv.org/abs/1904.03206">[2]</a>, <a href="https://arxiv.org/abs/1905.09692">[3]</a>, thanks to <a href="https://www.linkedin.com/in/v-vijendran/">Vijendran</a> for additional refs). Instead of using structural properties of <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bloss%20VQE%7D"> to just compute derivatives, one can find the exact minimum of <img src="https://latex.codecogs.com/png.latex?L(%5Ctheta_i)"> with respect to any angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i"> (assuming other angles are fixed). I.e. instead of a partial derivative one can compute “the partial minimum”.</p>
<p>Indeed, since just three three evaluations fix <img src="https://latex.codecogs.com/png.latex?L(%5Ctheta_i)"> completely, and the function itself is rather simple, there is no problem finding <img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bargmin%7D_%7B%5Ctheta_i%7DL(%5Ctheta_i)"> exactly. The explicit formula could be more transparent, but it is a simple trigonometry in the end (double check if you a going to use it!)</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Ctheta%5E*=%5Coperatorname%7Bargmin%7D_%7B%5Ctheta%7D%5Cleft(A%20%5Ccos%5Ctheta+B%5Csin%5Ctheta+C%5Cright)=%5Ccases%7B%5Carctan%20%5Cfrac%7BB%7D%7BA%7D+%5Cpi,&amp;A%3E0%5C%5C%5Carctan%20%5Cfrac%7BB%7D%7BA%7D,&amp;%20A%3C0%7D%0A%5Cend%7Balign*%7D"></p>
<p>With this trick one can bypass gradient-based optimization as follows. Starting from <img src="https://latex.codecogs.com/png.latex?L(%5Ctheta_1,%5Ctheta_2,%5Cdots)"> first optimize with respect to the first angle <img src="https://latex.codecogs.com/png.latex?L(%5Ctheta_1,%5Ctheta_2,%5Cdots)%5Cto%20L(%5Ctheta_1%5E*,%5Ctheta_2,%5Cdots)">. Then optimize with respect to the second <img src="https://latex.codecogs.com/png.latex?L(%5Ctheta_1%5E*,%5Ctheta_2,%5Cdots)%5Cto%20L(%5Ctheta_1%5E*,%5Ctheta_2%5E*,%5Cdots)">. Note that after this step the first angle in general no longer is the best choice, because the second angle has changed. Still, one can continue this procedure further until all angles are updated and then start anew. Each step is guaranteed to decrease the value of the loss function. If the loss landscape is nice overall, this sequential gradient-free optimization may in fact even outperform gradient-based methods. Unfortunately, to my understanding the sequential optimization is unlikely to help with the most crucial problems in the VQE loss landscapes: barren plateaus and local minimums.</p>
</section>
<section id="average-performance-of-the-vqe" class="level1">
<h1>Average performance of the VQE</h1>
<p>Here comes the original contribution of this blog post, I will show how to compute (semi-efficiently) the <em>average loss</em> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Coverline%7BL%7D=%5Cfrac%7B1%7D%7B(2%5Cpi)%5Ep%7D%5Cint%20%5Cprod_%7Bi=1%7D%5Ep%20d%5Ctheta_i%20%5Clangle%20%5Cpsi(%5Ctheta)%7CH%7C%5Cpsi(%5Ctheta)%5Crangle%20%5C%20.%0A%5Cend%7Balign%7D"> where <img src="https://latex.codecogs.com/png.latex?p"> is the total number of angles in the parametrized circuit. Why would one be interested in such a quantity? Honestly, I do not know, but hey, this is a blog post and not a paper, so I’ll take a recreational attitude. Seriously though, I’ll use this result in the following section, which however is not well justified either:)</p>
<p>To begin with, let’s make explicit dependence of the parametrized circuit on all of its angles <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU(%5Ctheta)=%5Csum_%7BI%7D%20U_%7BI%7D%5Cleft(%5Ccos%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5E%7B1-I%7D%5Cleft(%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5EI%20%5Clabel%7Bu%20exp%7D%20%5C%20.%0A%5Cend%7Balign%7D"> Here <img src="https://latex.codecogs.com/png.latex?I"> is a multi-index, a binary string of length <img src="https://latex.codecogs.com/png.latex?p">, and <img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Ccos%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5E%7BI%7D"> is an abbreviation for <img src="https://latex.codecogs.com/png.latex?%5Cprod_%7Bi=1%7D%5Ep%5Cleft(%5Ccos%20%5Cfrac%7B%5Ctheta_i%7D%7B2%7D%5Cright)%5E%7BI_i%7D">. For <img src="https://latex.codecogs.com/png.latex?p=1"> this reduces to <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bu%20cos%20sin%7D">. For <img src="https://latex.codecogs.com/png.latex?p=2"> we have <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AU(%5Ctheta)=U_%7B00%7D%5Ccos%5Cfrac%7B%5Ctheta_1%7D%7B2%7D%5Ccos%5Cfrac%7B%5Ctheta_2%7D%7B2%7D+U_%7B01%7D%5Ccos%5Cfrac%7B%5Ctheta_1%7D%7B2%7D%5Csin%5Cfrac%7B%5Ctheta_2%7D%7B2%7D+U_%7B10%7D%5Csin%5Cfrac%7B%5Ctheta_1%7D%7B2%7D%5Ccos%5Cfrac%7B%5Ctheta_2%7D%7B2%7D+U_%7B11%7D%5Csin%5Cfrac%7B%5Ctheta_1%7D%7B2%7D%5Csin%5Cfrac%7B%5Ctheta_2%7D%7B2%7D%20%5C%20,%0A%5Cend%7Balign*%7D"> I think you got the idea. There are exactly <img src="https://latex.codecogs.com/png.latex?2%5Ep"> terms in this sum. Now let us substitute this expression into the loss function <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bloss%20VQE%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AL(%5Ctheta)=%5Csum_%7BI,J%7D%5Cleft(%5Ccos%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5E%7B1-I%7D%5Cleft(%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5EI%5Cleft(%5Ccos%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5E%7B1-J%7D%5Cleft(%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Cright)%5EJ%5Clangle%200%7CU_I%5E%5Cdagger%20%20H%20U_J%20%7C0%5Crangle%20%5Clabel%7Bloss%20exp%7D%20%5C%20.%0A%5Cend%7Balign%7D"></p>
<p>When we average, all terms with <img src="https://latex.codecogs.com/png.latex?I%5Cneq%20J"> vanish since <img src="https://latex.codecogs.com/png.latex?%5Cint_0%5E%7B2%5Cpi%7D%20d%5Ctheta%20%5Csin%5Cfrac%7B%5Ctheta%7D%7B2%7D%5Ccos%5Cfrac%7B%5Ctheta%7D%7B2%7D=0">. At the same time, all terms with <img src="https://latex.codecogs.com/png.latex?I=J"> give equal angle integrals <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B1%7D%7B(2%5Cpi)%5Ep%7D%5Cint%20%5Cprod_%7Bi=1%7D%5Ep%20d%5Ctheta_i%20%5Cleft(%5Ccos%5Cfrac%7B%5Ctheta_i%7D%7B2%7D%5Cright)%5E%7B2%20I%7D%5Cleft(%5Csin%5Cfrac%7B%5Ctheta_i%7D%7B2%7D%5Cright)%5E%7B2-2%20I%7D=%5Cfrac%7B1%7D%7B2%5Ep%7D"> since <img src="https://latex.codecogs.com/png.latex?%5Cint%20d%5Ctheta%20%5Ccos%5E2%5Cfrac%7B%5Ctheta%7D%7B2%7D=%5Cint%20d%5Ctheta%20%5Csin%5E2%5Cfrac%7B%5Ctheta%7D%7B2%7D=%5Cpi">. The results is that <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Coverline%7BL%7D=%5Cfrac1%7B2%5Ep%7D%5Csum_%7BI%7D%5Clangle%200%7CU_I%5E%5Cdagger%20H%20U_I%20%7C0%5Crangle%20%5Clabel%7BL%20average%7D%20%5C%20.%0A%5Cend%7Balign%7D"> This expression looks simple, but it is a sum with <img src="https://latex.codecogs.com/png.latex?2%5Ep"> terms, so for any reasonable number of parameters its huuuge. A typical number of parameters is exponential in the number of qubits, so this is the double exponential, not good. I’ve spent multiple hours thinking about how to compute this average more efficiently, but for generic function of the type <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bu%20exp%7D"> with arbitrary matrix coefficients <img src="https://latex.codecogs.com/png.latex?U_I"> I didn’t find a way to compute the average loss in less than an exponential in <img src="https://latex.codecogs.com/png.latex?p"> number of function calls. However, taking into account that <img src="https://latex.codecogs.com/png.latex?U_I"> are not arbitrary for parametrized quantum circuits, a computation linear in <img src="https://latex.codecogs.com/png.latex?p"> is possible. The reason is that among exponentially many <img src="https://latex.codecogs.com/png.latex?U_I"> there is only polynomially many “independent ones”, in a sense that I will now make precise.</p>
<p>For concreteness consider the following toy circuit:</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">qc.rx(Parameter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta_1 $'</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-4">qc.rx(Parameter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta_2 $'</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-5">qc.rz(Parameter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta_3 $'</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-6">qc.rz(Parameter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'$ </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta_4 $'</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/2022-05-17-Some analytic facts about variational algorithms_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here the entangling gate is the <a href="https://qiskit.org/documentation/stubs/qiskit.circuit.library.CZGate.html">Controlled-Z</a>. This circuit has four parameters and <img src="https://latex.codecogs.com/png.latex?2%5E4=16"> associated matrix coefficients <img src="https://latex.codecogs.com/png.latex?U_I">. What are they, exactly? It is in fact rather simple to understand. If the binary index is <img src="https://latex.codecogs.com/png.latex?0"> the rotation gate is replaced by the identity, if it is <img src="https://latex.codecogs.com/png.latex?1"> we insert the generator instead. For example <img src="https://latex.codecogs.com/png.latex?U_%7B1110%7D"> is</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3">qc.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-4">qc.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5">qc.z(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-6">qc.global_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi</span>
<span id="cb3-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/2022-05-17-Some analytic facts about variational algorithms_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The global phase arises because <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta=%5Cpi)=-i%20%5CSigma"> for <img src="https://latex.codecogs.com/png.latex?U(%5Ctheta)=e%5E%7B-i%5Ctheta%5CSigma/2%7D">. Next, consider a more realistic circuit like the one below</p>
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/myimages/analytic_vqe/pqc_cz.png" alt="Drawing" style="width: 1000px;"></p>
<p>All coefficients <img src="https://latex.codecogs.com/png.latex?U_I"> arise as <img src="https://latex.codecogs.com/png.latex?2%5Ep"> different versions of this circuit where each rotation gate is replaced either by an identity or by a generator, just as at the figure above. Although these circuits might all look different, in fact there is just a handful of independent ones. This is due to the following commutation rules, which are easy to check:</p>
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/myimages/analytic_vqe/commutation.png" alt="Drawing" style="width: 400px;"></p>
<p>These commutation rules allow to move <em>all the pauli matrices</em> past CZ gates and to the beginning of the circuit. For example, the circuit <img src="https://latex.codecogs.com/png.latex?U_%7B1101%7D"> from above can be alternatively be rewritten as</p>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2">qc.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-3">qc.z(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-4">qc.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-5">qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-6">qc.global_phase<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pi</span>
<span id="cb4-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="4">
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/2022-05-17-Some analytic facts about variational algorithms_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Then, any string of Pauli matrices is equal to <img src="https://latex.codecogs.com/png.latex?I,%20X,%20Z"> or <img src="https://latex.codecogs.com/png.latex?Y%5Csimeq%20XZ"> up to a global phase. So in the end, up to phase factors there are only <img src="https://latex.codecogs.com/png.latex?4%5En"> linearly independent matrices <img src="https://latex.codecogs.com/png.latex?U_I"> where <img src="https://latex.codecogs.com/png.latex?n"> is the number of qubits. The counting <img src="https://latex.codecogs.com/png.latex?4%5En"> follows because after all the generators have been placed at the beginning of the circuit there can be only 4 different operators at each qubit thread. Note also that <img src="https://latex.codecogs.com/png.latex?4%5En"> is precisely the dimension of the unitary group on <img src="https://latex.codecogs.com/png.latex?n"> qubits. We thus see that all of <img src="https://latex.codecogs.com/png.latex?2%5Ep"> matrix coefficients can be divided into <img src="https://latex.codecogs.com/png.latex?4%5En"> distinct classes and within each class <img src="https://latex.codecogs.com/png.latex?U_I=e%5E%7Bi%5Cphi%7DU_%7BI'%7D">. This global phase makes no difference for the averages in <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BL%20average%7D"> which can therefore be rewritten as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Coverline%7BL%7D=%5Cfrac%7B1%7D%7B4%5En%7D%5Csum_%7Bc%7D%20%5Clangle%200%7CU_c%5E%5Cdagger%20H%20U_c%7C0%5Crangle%20%5C%20,%0A%5Cend%7Balign*%7D"> where now the sum is over representatives of distinct classes. So the sum is reduced from <img src="https://latex.codecogs.com/png.latex?2%5Ep"> to <img src="https://latex.codecogs.com/png.latex?4%5En"> terms. OK, so how does the number of parameters and the number of qubits compare? Is this really a reduction?</p>
<p>Yes it is! First, if you want your parametrized quantum circuit to cover any unitary transformation on <img src="https://latex.codecogs.com/png.latex?n"> qubits you need at least <img src="https://latex.codecogs.com/png.latex?p=4%5En"> parameters, because this is the dimension of the unitary group. So in this case we have and exponential reduction from <img src="https://latex.codecogs.com/png.latex?2%5E%7B4%5En%7D"> to <img src="https://latex.codecogs.com/png.latex?4%5En">. But even if you only put two rotation gates on each qubit you already got yourself <img src="https://latex.codecogs.com/png.latex?4%5En"> parameters. Adding anything beyond that, as you definitely wish to do, makes the reduction from <img src="https://latex.codecogs.com/png.latex?2%5Ep"> to <img src="https://latex.codecogs.com/png.latex?4%5En"> essential. Note though that it is still exponential in the number of qubits and would be unfeasible to compute exactly for a large system.</p>
</section>
<section id="loss-landscape-as-charge-density" class="level1">
<h1>Loss landscape as charge density</h1>
<p>OK, here is a brief justification for why I was interested in the average loss in the first place. Generic hamiltonian-agnostic VQE algorithms have in fact lots of trainability issues. One is the presence of the <a href="https://arxiv.org/abs/1803.11173">barren plateaus</a> in certain regimes, which means that large portions of the parameter space have vanishing gradients and are bad places for optimizer to be in. Another issue is the presence of local minimums which <a href="https://arxiv.org/abs/2205.05786">can be just as bad</a>. So I was wondering if it is possible to somehow use the analytic properties of the VQE loss functions to help mitigate these problems. Here is an idea that probably does not work, but I think still is sort of fun.</p>
<p>Here is an example of a bad loss landscape, sketched in black:</p>
<p><img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/loss.png" alt="Drawing" style="width: 700px;"></p>
<p>It has many local minimums and flat parts, and only a single narrow global minimum. If we are only allowed to probe this loss landscape one value at a time we will have really hard time reaching the global minimum. However, if we have additional information we might be able to do better.</p>
<p>Let’s assume that we know <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7D%20L(%5Ctheta)"> where <img src="https://latex.codecogs.com/png.latex?%5CDelta"> is the Laplace operator. <a href="https://en.wikipedia.org/wiki/Poisson%27s_equation">Physics interpretation</a> is the following. If we view the loss landscape as the charge density <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7DL(%5Ctheta)"> is the corresponding electric potential, sketched in red. Minimizing the electric potential instead of the charge density might be a much nicer problem because the electric field (the gradient of the potential field) typically stretches far away from localized charges and can attract the probe. Extreme example is the charge density of the point particle, which is impossible to find unless you trip over it. However, if you can probe the electric field of this charge you have an easy way discovering where it comes from. Sounds good, right? Well, not so fast. First, we do not know <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7DL(%5Ctheta)"> for a typical VQE loss. Second, my examples were specifically crafted to sell the idea. It is easy to imagine a loss landscape where this does not help.</p>
<p>But we are not boring nitpickers, are we? Of course not, we are imaginative and brave, so we are going to assume even more. Let’s pretend that each successive application of <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7D"> makes our loss landscape better, so we are really interested in <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Cmathcal%7BL%7D(%5Ctheta)=%5CDelta%5E%7B-%5Cinfty%7D%20L(%5Ctheta)%20%5C%20.%0A%5Cend%7Balign*%7D"> Turns out this limiting landscape is very simple and can be found in a similar way to the average considered in the previous section. Indeed, the loss function <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bloss%20exp%7D"> can be represented in the following form <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AL(%5Ctheta)=const+A_1%5Ccos(%5Ctheta_1)+B_1%5Csin(%5Ctheta_1)+A_2%5Ccos(%5Ctheta_2)+B_2%5Csin(%5Ctheta_2)+%5C%5CA_%7B12%7D%5Ccos(%5Ctheta_1)%5Ccos(%5Ctheta_2)+B_%7B12%7D%5Ccos(%5Ctheta_1)%5Csin(%5Ctheta_2)+%5Cdots%0A%5Cend%7Balign*%7D"> This is an example with two parameters and several cross-terms are omitted. Here is the key point – each cross-term gets smaller under application of <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7D">, e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7D%20%5Ccos%5Ctheta_1=%5Ccos%5Ctheta_1">, <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-1%7D%20%5Ccos%5Ctheta_1%5Ccos%5Ctheta_2=%5Cfrac12%20%5Ccos%5Ctheta_1%5Ccos%5Ctheta_2"> etc. This means, that under the application of <img src="https://latex.codecogs.com/png.latex?%5CDelta%5E%7B-%5Cinfty%7D"> only the single-variable terms will survive (we ignore the constant term) <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bmultline*%7D%0A%5Cmathcal%7BL%7D(%5Ctheta)=%5CDelta%5E%7B-%5Cinfty%7DL(%5Ctheta)=%5Csum_%7Bi=1%7D%5E%7Bp%7D%5Cleft(A_i%5Ccos%5Ctheta_i+B_i%5Csin%5Ctheta_i%5Cright)%5Csubstack%7Bp=2%5C%5C=%7D%5C%5C%5C,%5C,A_1%5Ccos(%5Ctheta_1)+B_1%5Csin(%5Ctheta_1)+A_2%5Ccos(%5Ctheta_2)+B_2%5Csin(%5Ctheta_2)%0A%5Cend%7Bmultline*%7D"></p>
<p>These terms are easy to compute if we can compute averages. For example, averaging over all <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i"> except theta <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> will only leave the monomials with <img src="https://latex.codecogs.com/png.latex?%5Ctheta_1"> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0AA_1%5Ccos%7B%5Ctheta_1%7D+B_1%5Csin%7B%5Ctheta_1%7D=%5Cfrac%7B1%7D%7B(2%5Cpi)%5E%7Bp-1%7D%7D%5Cint_0%5E%7B2%5Cpi%7D%20%5Cprod_%7Bi=2%7D%5Epd%5Ctheta_i%5C,%5C,%20L(%5Ctheta)%20%5C%20.%0A%5Cend%7Balign*%7D"> How to perform the average on the rhs was shown in the previous section. Since the limiting loss function <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D(%5Ctheta)"> is a sum of single-variable terms it is extremely simple to optimize, and the minumimum is unique</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign*%7D%0A%5Ctheta%5E*%20=%20(%5Ctheta_1%5E*,%20%5Ctheta_2%5E*,%5Cdots)%20=%20%5Coperatorname%7Bargmin%7D_%5Ctheta%20%5Cmathcal%7BL%7D(%5Ctheta)%20%5C%20.%0A%5Cend%7Balign*%7D"> The derivation above also gives a different, less exotic, interpretation of <img src="https://latex.codecogs.com/png.latex?%5Ctheta%5E*">. Each angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta_i%5E*"> is the angle that minimizes the average loss function, where average is taken with respect to all other angles. Knowing how to find parameter value that optimizes an average performance does not seem like a completely useless information, does it? Could it help to alleviate the problems with barren plateaus or local minimums? I do not know, but I’m planning on making some numerical experiments along these lines.</p>
</section>
<section id="beyond-simple-trigonometry" class="level1">
<h1>Beyond simple trigonometry</h1>
<p>I was really impressed with a recent paper <a href="http://arxiv.org/abs/2205.05786/">Beyond Barren Plateaus: Quantum Variational Algorithms Are Swamped With Traps</a>. Adopting some techniques from the study of neural networks the authors provide a random matrix theory description of a generic loss landscape for Hamiltonian-agnostic VQE. They show that for underparametrized circuits (when the number of parameters <img src="https://latex.codecogs.com/png.latex?p"> is smaller than the dimension of the unitary group <img src="https://latex.codecogs.com/png.latex?4%5En">, which is basically the only reasonable setup) the loss landscape is really bad, with exponentially many local minimums being located far away (energy-wise) from the global minimum. They even provide an analytic distribution for the expected number of local minimums, which seems to match my numerical experiments rather well: <img src="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/myimages/analytic_vqe/theorypractice.png" alt="Drawing" style="width: 800px;"></p>
<p>This is yet another piece of evidence showing that complexity of the classical optimization loop in variational algorithms can not be ignored, as if the problems posed by getting a real quantum device to work were not enough. One possible way to alleviate the issues is to use specifically designed parametrized circuits, which are aware of the symmetries or additional properties of the Hamiltonian. I have a feeling though, that even performance of a generic Hamiltonian-agnostic VQE could be improved by exploiting some structural properties of the loss landscapes. In this blog post I speculated about what could such an approach look like.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>QML</category>
  <category>VQA</category>
  <category>VQE</category>
  <guid>https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/2022-05-17-some analytic facts about variational algorithms.html</guid>
  <pubDate>Mon, 16 May 2022 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/some_analytic_facts_about_vqa/slide.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Machine learning compilation of quantum circuits – experiments</title>
  <link>https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-machine learning compilation of quantum circuits -- experiments.html</link>
  <description><![CDATA[ 




<div class="cell" data-tags="[]" data-execution_count="46">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you are running this notebook in Colab, you might need to restart</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the environment after the installations.</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> partial</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> jax.numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> jnp</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jax <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random, value_and_grad, jit, vmap, grad, lax</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> unitary_group</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-15">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optax</span>
<span id="cb1-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-17">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install optax</span>
<span id="cb1-18">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> optax</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb1-21">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> qiskit</span>
<span id="cb1-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ImportError</span>:</span>
<span id="cb1-23">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install qiskit</span>
<span id="cb1-24">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pylatexenc <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># required for circuit drawing.</span></span>
<span id="cb1-25">  <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> qiskit</span>
<span id="cb1-26">    </span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit, transpile</span>
<span id="cb1-29"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.quantum_info <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Operator, Statevector</span>
<span id="cb1-30"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.circuit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Parameter</span>
<span id="cb1-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.transpiler.passes.synthesis <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UnitarySynthesis</span>
<span id="cb1-32"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.transpiler <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PassManager</span>
<span id="cb1-33"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.converters <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> circuit_to_gate</span></code></pre></div>
</details>
</div>
<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/machine_learning_compilation_experiments/2021-12-13-Machine%20learning%20compilation%20of%20quantum%20circuits%20--%20experiments.ipynb"> <img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<section id="motivation" class="level2">
<h2 class="anchored" data-anchor-id="motivation">Motivation</h2>
<p>Ever since I read the paper by L.Madden and A.Simonetto (<a href="http://arxiv.org/abs/2106.05649">original preprint</a>, <a href="https://idnm.github.io/blog/machine%20learning/compilation/qiskit/paper%20review/2021/07/22/Machine-learning-compilation-of-quantum-circuits.html">my review</a>) I knew I want to do this kind of experiments myself. At first I hoped that there is a well-developed software framework where I can easily build quantum circuits and then optimize them efficiently. However, <a href="https://quantumcomputing.stackexchange.com/questions/20718/software-tools-to-train-quantum-circuits-with-parameters">I was not able to find a good fit for my problem</a>. For example, to the best of my knowledge <code>qiskit</code> currently only provides acess to zero-order optimization routines. I later found <a href="https://quimb.readthedocs.io/en/latest/index.html">quimb</a> which <a href="https://quimb.readthedocs.io/en/latest/examples/ex_tn_train_circuit.html">might do what I want</a>, but in the end I’m glad I worked things out from scratch. Eventually I went for <code>numpy</code>+<code>JAX</code> combination which while being quite low-level was not a big problem to get working and shows a decent speed. I owe a ton to <a href="https://github.com/LuchnikovI">Ilia Luchnikov</a> for introducing me to the framework and helping throught.</p>
<p>In this post I will give a walk thorough this implementation and show experiments with compilation of random unitaries. However, in my opinion truly interesting stuff is concerned with the compilation of special gates, say multi-controlled Toffolis on restricted connectivity. I intend to look at this kind problems in detail in a future blog post. You may wish to take a look at <a href="http://arxiv.org/abs/2109.13223">this preprint</a> for advances in that direction.</p>
<blockquote class="blockquote">
<p><em>NOTE</em>: While I was working on my experiments another <a href="http://arxiv.org/abs/2109.06770">preprint appeared</a>, by P.Rakyta and Z.Zimborás, which is very similar to the work of M&amp;S in terms of numerical results. Despite the striking similarities these works are independent. As a bonus R&amp;Z also provide a numerical package <a href="https://zenodo.org/record/4508680#.YVw-uYBBxNi">SQUANDER</a> that allows to play with their framework for compilation of unitaries. You might want to check that out if you are interested in doing some experiments yourself.</p>
</blockquote>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>OK, so first a brief recap of what is the compilation problem. Given a quantum circuit we need to find an equivalent one, which satisfies certain requirements. A typical restrictions are to use only some specific two-qubits gates and to be compatible with limited connectivity. I gave a more detailed intro <a href="https://idnm.github.io/blog/machine%20learning/compilation/qiskit/paper%20review/2021/07/22/Machine-learning-compilation-of-quantum-circuits.html">here</a>. Here is a nearly-trivial example: a simple <img src="https://latex.codecogs.com/png.latex?CNOT"> gate</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-3">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>can be decomposed in terms of the entangling <img src="https://latex.codecogs.com/png.latex?cz"> gate and single-qubit gates <img src="https://latex.codecogs.com/png.latex?rx,%20ry,%20rz"> as follows</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">qc_compiled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transpile(qc, basis_gates<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ry'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rz'</span>], optimization_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-2">qc_compiled.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Now, for generic <img src="https://latex.codecogs.com/png.latex?n">-qubit unitaries one needs exponentially many entangling gates for the compilation. More precisely, there is a <a href="https://dl.acm.org/doi/10.5555/968879.969163">theoretical lower bound</a> <img src="https://latex.codecogs.com/png.latex?%5C#CNOTs%5Cge%20%5Cfrac14%20%5Cleft(4%5En-3n-1%5Cright)"> on the amount of <img src="https://latex.codecogs.com/png.latex?CNOT">s required for compilation of any <img src="https://latex.codecogs.com/png.latex?n-">qubit unitary outside a measure zero set. Crucially, this measure zero set might in fact be of principal interest to quantum computing as it includes many operators featuring in most algorithms (such as multi-controlled gates). In this post I will only adress compilation of random unitaries and discuss compilation of special cases in a future post. For later reference here is the function computing the theoretical lower bound.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> TLB(n):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>):</span>
<span id="cb4-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'TLB for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">-qubit unitary is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(n, TLB(n)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>TLB for 1-qubit unitary is 1
TLB for 2-qubit unitary is 3
TLB for 3-qubit unitary is 14
TLB for 4-qubit unitary is 61
TLB for 5-qubit unitary is 253
TLB for 6-qubit unitary is 1020</code></pre>
</div>
</div>
<p>Now, there is an algorithm called <a href="https://arxiv.org/abs/quant-ph/0406176">quantum Shannon decomposition</a> to decompose an arbitary <img src="https://latex.codecogs.com/png.latex?n">-qubit unitary into a sequence of <img src="https://latex.codecogs.com/png.latex?CNOT">s and single-qubit rotations which requires roughly twice as many <img src="https://latex.codecogs.com/png.latex?CNOT">s as the theoretical lower bound implies. In complexity-theoretic terms this is definitely good enoough, the overhead is just a small constant factor. However, for NISQ devices doubling the amount of gates is not a trivial matter. Is it possible to do better?</p>
</section>
<section id="qubit-example" class="level2">
<h2 class="anchored" data-anchor-id="qubit-example">3-qubit example</h2>
<p>As papers <a href="http://arxiv.org/abs/2106.05649">M&amp;S</a> and <a href="http://arxiv.org/abs/2109.06770">R&amp;Z</a> show, one can do better and eliminate the 2x overhead, at least numerically. Namely, it seems that precisely at the theoretical lower bound the exact or nearly-exact compilation of any unitary is possible. Here is a real-life example. Consider the following 3-qubit circuit with <img src="https://latex.codecogs.com/png.latex?TLB(3)=14"> <img src="https://latex.codecogs.com/png.latex?CNOT"> gates</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/3qubitsequ.png" alt="Drawing" style="width: 800px;"></p>
<p>The claim is that with the appropriate choice of angles in rotation gates it can morhp into <em>any</em> 3-qubit unitary (and in fact at least this many <img src="https://latex.codecogs.com/png.latex?CNOT">s are needed for almost all 3-qubit unitaries). To find the corresponding angles it is sufficient to run a numerical optimization minimizing the fidelity between this circuit’s unitary and the target unitary. To me this is rather imressive, but raises several questions. Why choose <img src="https://latex.codecogs.com/png.latex?CNOT"> gates of all entangling gates? Why place them in that exact order as shown at the figure? It appears to be an empirical fact that precise location of entangling gates as well as their choice (<img src="https://latex.codecogs.com/png.latex?CNOT">, <img src="https://latex.codecogs.com/png.latex?cz">, etc) makes little difference. Moreover, even restricted connectivity does not seem to force an overhead for compilation. It is my main goal to back up these claims with numerical experiments in an interactive way. In particular, I will illustrate the following points.</p>
<ol type="1">
<li>Exactly at the theoretical lower bound a nearly-exact compilation seems to always be possible (at least for up to 6 qubits). This is a 2x improvement over the best theoretical decomposition.</li>
<li>Both <img src="https://latex.codecogs.com/png.latex?cz"> and <img src="https://latex.codecogs.com/png.latex?CNOT"> gates perform equally well. It is tempting to guess that any entangling gate will perform similarly.</li>
<li>The maximum fidelity is a monotonic function of the number of entangling gates. This implies that simply counting 2-qubit gates gives a good measure of circuits expressivity.</li>
<li>The most remarkable for me is the fact that even a restricted topology seems to cause no overhead on compilation cost. I will show that even on a chain topology the same amount of <img src="https://latex.codecogs.com/png.latex?CNOT">s is sufficient to reach good fidelity.</li>
</ol>
</section>
<section id="what-youll-find-if-you-keep-reading" class="level2">
<h2 class="anchored" data-anchor-id="what-youll-find-if-you-keep-reading">What you’ll find if you keep reading</h2>
<p>The rest of this post is divided into two parts. In the first I write some <code>numpy</code>/<code>JAX</code>/<code>qiskit</code> code that allows to construct and efficiently optimize parametrized circuits. I try to give some explanations of the underlying numerical framework, but please take into account that my own understanding is rather limited. Still, the resulting performance seems to be good enough to reproduce results of the existing preprints. I advise to skip this part if you are only interested in the results.</p>
<p>In the second part of the post I will do a number of experiments compiling random unitaries with varying numbers of qubits, different types of entangling gates, restricted connectivity and try to draw some general lessons from them. I tried to make this part independent of the first, although I didn’t stop all the implementation details from sinking trough.</p>
<blockquote class="blockquote">
<p><em>NOTE</em>: This blog post is also a fully functional jupyter notebook. You can open it in Colab or download locally and perform more experiments yourself!</p>
</blockquote>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/pisa.svg" alt="Drawing" style="width: 400px;"></p>
</section>
</section>
<section id="numerical-framework" class="level1">
<h1>Numerical framework</h1>
<section id="entangling-blocks" class="level2">
<h2 class="anchored" data-anchor-id="entangling-blocks">Entangling blocks</h2>
<p>First let us define the basic 1- and 2-qubit gates in matrix form. For now you can safely ignore the use <code>jnp</code> arrays instead of <code>np</code> arrays.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Matrix represntations of CNOT, CZ and single-qubit rotations</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Controlled-NOT (or controlled-X gate)</span></span>
<span id="cb6-4">cx_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-5">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-6">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb6-7">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb6-8"></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Controlled-Z gate</span></span>
<span id="cb6-10">cz_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-11">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-12">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-13">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pauli matrices</span></span>
<span id="cb6-16">x_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb6-17">                   [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb6-18"></span>
<span id="cb6-19">y_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>],</span>
<span id="cb6-20">                   [<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>jnp.complex64)</span>
<span id="cb6-21"></span>
<span id="cb6-22">z_mat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb6-23">                   [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotation gates</span></span>
<span id="cb6-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rx_mat(a):</span>
<span id="cb6-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.cos(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x_mat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.sin(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-28"></span>
<span id="cb6-29"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ry_mat(a):</span>
<span id="cb6-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.cos(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y_mat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.sin(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-31"></span>
<span id="cb6-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> rz_mat(a):</span>
<span id="cb6-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.cos(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_mat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.sin(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)</code></pre>
</div>
</div>
<p>The circuits that we are going to train will be built out of two types of 2-qubit blocks, the controlled-Z and the controlled-NOT. Here are the definitions:</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> block():</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Two-qubit entangling block.</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        circuit: gives equivalent `qiskit` circuit.</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        unitary: gives `jax.numpy` unitary matrix of the circuit.</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-8">    </span>
<span id="cb8-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, gate_name, angles):</span>
<span id="cb8-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gate_name</span>
<span id="cb8-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles</span>
<span id="cb8-12">    </span>
<span id="cb8-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> circuit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Quantum circuit in `qiskit` corresponding to our block."""</span></span>
<span id="cb8-15">        </span>
<span id="cb8-16">        qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>:</span>
<span id="cb8-18">            qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>:</span>
<span id="cb8-20">            qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb8-22">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gate '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' not yet supported'"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name))</span>
<span id="cb8-23">        </span>
<span id="cb8-24">        angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert from JAX array to numpy array if applicable.</span></span>
<span id="cb8-25">        </span>
<span id="cb8-26">        qc.ry(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-27">        qc.rx(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-28">        qc.ry(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-29">        qc.rx(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-30">        </span>
<span id="cb8-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> qc</span>
<span id="cb8-32">    </span>
<span id="cb8-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""JAX-compatible unitary corresponding to our block."""</span></span>
<span id="cb8-35">        </span>
<span id="cb8-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>:</span>
<span id="cb8-37">            entangling_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cx_mat</span>
<span id="cb8-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>:</span>
<span id="cb8-39">            entangling_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cz_mat</span>
<span id="cb8-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb8-41">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gate '</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' not yet supported'"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gate_name))</span>
<span id="cb8-42">        </span>
<span id="cb8-43">        x_rotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.kron(rx_mat(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), rx_mat(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]))</span>
<span id="cb8-44">        y_rotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.kron(ry_mat(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), ry_mat(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]))</span>
<span id="cb8-45">        </span>
<span id="cb8-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_rotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> y_rotations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> entangling_matrix</span></code></pre></div>
</div>
<p>Here is how they look: <code>cz</code> block</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">a0, a1, a2, a3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a0'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a3'</span>]]</span>
<span id="cb9-2">block(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>, [a0, a1, a2, a3]).circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>and <code>cx</code> block</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">block(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, [a0, a1, a2, a3]).circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Our <code>block</code> class can return a <code>qiskit</code> circuit and the corresponding unitary matrix. Of course we could have extracted the unitary from the circuit itself via <code>qiskit</code> API, but this would make the matrix representation incompatible with <code>JAX</code> which will be our workhorse for optimization. To the best of my knowledge currently it is only possible to use zero-order methods directly from <code>qiskit</code> which is a serious limitation. So at this point we needed a bit of wheel reinvention. Let’s check that our implementation is consistent with <code>qiskit</code>:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># That's how you use random numbers with JAX. Don't worry if this is not familiar, not essential for our purposes.</span></span>
<span id="cb11-2">angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> gate <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>]:</span>
<span id="cb11-5">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(gate, angles)</span>
<span id="cb11-6">    qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.circuit()</span>
<span id="cb11-7">    qs_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc.reverse_bits()).data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Yes, we need to reverse bits in qiskit to match our conventions.</span></span>
<span id="cb11-8">    our_unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.unitary()</span>
<span id="cb11-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qiskit unitary is the same as our unitary for block with gate </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(gate, jnp.allclose(qs_unitary, our_unitary)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>qiskit unitary is the same as our unitary for block with gate cx: True
qiskit unitary is the same as our unitary for block with gate cz: True</code></pre>
</div>
</div>
<p>To match matrix representations of quantum circuits might be a headache as I discussed in <a href="https://idnm.github.io/blog/qiskit/tensor%20networks/quantum%20concepts/2021/08/18/Matrix-representation-of-quantum-circuits.html">another post</a>, so this was a necessary check to do.</p>
<p>Our two building blocks (<code>cz</code> and <code>cx</code>) only differ by the type of the two-qubit gate. The circuits that we are going to build seem to do equally well for any choice of two-qubit gate. I will mostly use <code>cz</code> gate because it is symmetric under the swap of qubits, but I will also occasionally bring up the <code>cx</code> gate to illustrate that it has the same performance. Angles <img src="https://latex.codecogs.com/png.latex?a_0">-<img src="https://latex.codecogs.com/png.latex?a_3"> are going to be optimized.</p>
</section>
<section id="optimization-with-jax" class="level2">
<h2 class="anchored" data-anchor-id="optimization-with-jax">Optimization with <code>JAX</code></h2>
<section id="a-word-about-jax" class="level3">
<h3 class="anchored" data-anchor-id="a-word-about-jax">A word about <code>JAX</code></h3>
<p>What is <code>JAX</code>? Well, I personally think of it as <code>numpy</code> on steroids. You can check out <a href="https://jax.readthedocs.io/en/latest/notebooks/quickstart.html">the official documentation</a> or numerous nice overwievs on the web. For our purposes two key features of <code>JAX</code> are 1. Autograd.<br>
2. JIT or just-in-time compilation.</p>
<p>Autograd allows to define functions the same way you do in <code>numpy</code> and have analytic derivatives available with no extra coding on your side. At the moment <code>grad</code> function can only be applied to real scalars. For example, let us define the absolute value of the trace of <code>cx</code> block as function of rotations gate angles</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> block_tr_abs(angles):</span>
<span id="cb13-2">    b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, angles)</span>
<span id="cb13-3">    tr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.trace(b.unitary())</span>
<span id="cb13-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(tr)</span></code></pre></div>
</div>
<p>Since everything so far has been defined using <code>jax.numpy</code> we have immediate access to the gradient of this function</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">grad(block_tr_abs)([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>,<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>[DeviceArray(0.03655498, dtype=float32),
 DeviceArray(-0.25903472, dtype=float32),
 DeviceArray(-0.7384602, dtype=float32),
 DeviceArray(-7.450581e-09, dtype=float32)]</code></pre>
</div>
</div>
<p>Autograd feature of <code>JAX</code> allows us to just define the loss function associated with our circuit in plain <code>numpy</code> terms and use advanced first-order optimizers such as Adam out of the box.</p>
<p>The next crucial ingredient is <code>jit</code>-compilation. When used with a bit of care, it allows to speed up evaluation of similar expression by orders of magnitude. For example let us compare runtimes of the <code>jit</code>ted and un<code>jit</code>ted versions of our trace function. Let’s first define a sample of random angles</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">test_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span></code></pre></div>
</div>
<p>and now time evaluation of un<code>jit</code>ted trace function</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb17-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> angles <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_angles:</span>
<span id="cb17-3">    block_tr_abs(angles)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 12.3 s, sys: 1.02 s, total: 13.3 s
Wall time: 11.4 s</code></pre>
</div>
</div>
<p>Now awe to the power of <code>jit</code>!</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb19-2">jit_block_tr_abs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jit(block_tr_abs)</span>
<span id="cb19-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> angles <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_angles:</span>
<span id="cb19-4">    jit_block_tr_abs(angles)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 156 ms, sys: 7.94 ms, total: 164 ms
Wall time: 145 ms</code></pre>
</div>
</div>
<p>What happened here is that during the first call to the <code>jit</code>ted function it’s efficient <code>XLA</code> version was compiled and then used to evaluate all subsequent calls.</p>
</section>
<section id="gradient-descent" class="level3">
<h3 class="anchored" data-anchor-id="gradient-descent">Gradient descent</h3>
<p>We will use the following measure of discrepancy between two unitaries <img src="https://latex.codecogs.com/png.latex?disc(U,%20V)%20=%201-%5Cfrac1%7BN%7D%5Coperatorname%7BTr%7D%5Cleft(%20U%5E%5Cdagger%20V%5Cright)"> where <img src="https://latex.codecogs.com/png.latex?U,V"> are <img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20N"> matrices. It is normalized so that <img src="https://latex.codecogs.com/png.latex?disc(U,U)=0"> and <img src="https://latex.codecogs.com/png.latex?disc(U,V)=0"> when <img src="https://latex.codecogs.com/png.latex?U"> and <img src="https://latex.codecogs.com/png.latex?V"> are orthogonal. Note that this measure is insensitive to global phases.</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> disc(U, U_target):</span>
<span id="cb21-2">    n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> U_target.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>jnp.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>((U.conj() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> U_target).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>n</span></code></pre></div>
</div>
<p>Here is the optimization routine that we are going to use. It is pretty straightforward and I will not give much explanations, but illustrate with an example.</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@partial</span>(jit, static_argnums<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, )) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;--- Here is where the magic happens! </span></span>
<span id="cb22-2">                                       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove this line and everything will run 1000 times slower:)</span></span>
<span id="cb22-3">    </span>
<span id="cb22-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary_update(loss_and_grad, opt, opt_state, angles):</span>
<span id="cb22-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Single update step."""</span></span>
<span id="cb22-6">    </span>
<span id="cb22-7">    loss, grads <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_and_grad(angles)</span>
<span id="cb22-8">    updates, opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.update(grads, opt_state)</span>
<span id="cb22-9">    angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optax.apply_updates(angles, updates)</span>
<span id="cb22-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> angles, opt_state, loss</span>
<span id="cb22-11"></span>
<span id="cb22-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unitary_learn(U_func, U_target, n_angles, </span>
<span id="cb22-13">                  init_angles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb22-14">                  learning_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>, num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>, </span>
<span id="cb22-15">                  target_disc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-10</span>):</span>
<span id="cb22-16">    </span>
<span id="cb22-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Use Adam optimizer to minimize discrepancy between pamaterzied unitary and targe unitary.</span></span>
<span id="cb22-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb22-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb22-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        U_func: function of angles returning univary matrix.</span></span>
<span id="cb22-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        U_target: unitary matrix to approximate.</span></span>
<span id="cb22-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n_angles: total number of angles (parameters) in U_func.</span></span>
<span id="cb22-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        init_angles: intial angles for gradient descent. If not provided chosen at random.</span></span>
<span id="cb22-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        key: random seed to use for inizialization of initial angles.</span></span>
<span id="cb22-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        learning_rate: learning rate in Adam optimizer.</span></span>
<span id="cb22-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_iterations: maximum number of iterations.</span></span>
<span id="cb22-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        target_disc: stop optimization if discrepancy drops below target_disc.</span></span>
<span id="cb22-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb22-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: tuple (angles_history, loss_history) where</span></span>
<span id="cb22-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        angles_history: list of angles (parameters) at each iteration step.</span></span>
<span id="cb22-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_history: values of loss_function at each iteration step.</span></span>
<span id="cb22-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb22-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb22-34">    </span>
<span id="cb22-35">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If initial angles are not provided generate them at random.</span></span>
<span id="cb22-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> init_angles <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb22-37">        key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb22-38">        angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(key, shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_angles,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span>
<span id="cb22-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb22-40">        angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_angles</span>
<span id="cb22-41">    </span>
<span id="cb22-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loss function to minimize is dicrepancy defined above.</span></span>
<span id="cb22-43">    loss_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> angles: disc(U_func(angles), U_target)</span>
<span id="cb22-44">    loss_and_grad <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> value_and_grad(loss_func)</span>
<span id="cb22-45"></span>
<span id="cb22-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimizer is taken from the `optax` library and its use is self-explanotory.</span></span>
<span id="cb22-47">    opt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optax.adam(learning_rate)</span>
<span id="cb22-48">    opt_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> opt.init(angles)</span>
<span id="cb22-49">    </span>
<span id="cb22-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Optimization cycle</span></span>
<span id="cb22-51">    angles_history<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb22-52">    loss_history<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]</span>
<span id="cb22-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_iterations):</span>
<span id="cb22-54">        angles, opt_state, loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_update(loss_and_grad, opt, opt_state, angles)</span>
<span id="cb22-55">        angles_history.append(angles)</span>
<span id="cb22-56">        loss_history.append(loss)</span>
<span id="cb22-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> target_disc:</span>
<span id="cb22-58">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb22-59">    </span>
<span id="cb22-60">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> angles_history, loss_history</span></code></pre></div>
</div>
<p>OK, now a very simple example. Say we want to find a <img src="https://latex.codecogs.com/png.latex?ZXZ"> decomposition of <img src="https://latex.codecogs.com/png.latex?Y">-gate. Define:</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> zxz_ansatz(angles):</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> rz_mat(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rx_mat(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rz_mat(angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
</div>
<p>Learning is now very simple: we give <code>unitary_learn</code> the ansatz unitary as function of angles, the target unitary and also explicitly the number of parameters to be trained:</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">angles_history, loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_learn(zxz_ansatz, y_mat, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<p>We can visualize the learning progress as follows:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">plt.plot(loss_history)</span>
<span id="cb25-2">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-20-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The learned angles in <img src="https://latex.codecogs.com/png.latex?ZXZ"> decomposition are</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">angles_history[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>DeviceArray([6.59216  , 3.1411407, 3.4505684], dtype=float32)</code></pre>
</div>
</div>
<p>It is not difficult to check directly that the result is equal to the <img src="https://latex.codecogs.com/png.latex?Y"> matrix up to a global phase with reasonable accuracy, indeed</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">jnp.around(<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>zxz_ansatz(angles_history[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>DeviceArray([[0.+0.j, 0.-1.j],
             [0.+1.j, 0.+0.j]], dtype=complex64)</code></pre>
</div>
</div>
</section>
</section>
<section id="quantum-circuits-with-numpy" class="level2">
<h2 class="anchored" data-anchor-id="quantum-circuits-with-numpy">Quantum circuits with <code>numpy</code></h2>
<p>Now it’s time to build full quantum circuits. We will think of a quantum circuit on <img src="https://latex.codecogs.com/png.latex?n"> qubits as a tensor with <img src="https://latex.codecogs.com/png.latex?2*n"> legs. First <img src="https://latex.codecogs.com/png.latex?n"> legs correspond to <em>output</em> and last to <img src="https://latex.codecogs.com/png.latex?n"> <em>input</em>. This is illustrated at the picture.</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/tensor.svg" alt="Drawing" style="width: 540px;"></p>
<p>It is natural for input legs to be on the left because in matrix notation a unitary <img src="https://latex.codecogs.com/png.latex?U"> acts on a state <img src="https://latex.codecogs.com/png.latex?%5Cpsi"> by left multiplication <img src="https://latex.codecogs.com/png.latex?U%5Cpsi">. On the other hand note that quantum circuits are usually drawn left-to-right and to compare the two descriptions a left-right reflection must be made.</p>
<p>Suppose now that given an <img src="https://latex.codecogs.com/png.latex?n-">qubit circuit <img src="https://latex.codecogs.com/png.latex?U"> we want to append an additional <img src="https://latex.codecogs.com/png.latex?m-">qubit gate <img src="https://latex.codecogs.com/png.latex?V"> at the end. Here is a concrete example (a picture is worth a thousand words!)</p>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/tensor_contraction.svg" alt="Drawing" style="width: 540px;"> Several things to keep in mind:</p>
<ol type="1">
<li>To append gate <img src="https://latex.codecogs.com/png.latex?V"> at the end in quantum circuit notation, we need to draw it on the left here.</li>
<li>Tensor legs are joined by <code>numpy</code>’s <code>tensordot</code> operation. Which axes to contract is clear from the picture – we need to join axes 2, 3 of <img src="https://latex.codecogs.com/png.latex?V"> to 1, 3 of <img src="https://latex.codecogs.com/png.latex?U">.</li>
<li>In the resulting tensor the output legs are not in the correct order. Instead of being numbered from top to bottom after <code>tensordot</code> first several axes are those of <img src="https://latex.codecogs.com/png.latex?V"> and the remaining are uncontracted output axes of <img src="https://latex.codecogs.com/png.latex?U"> (take a look at the leftmost column of numbers). This needs to be corrected by explicit transposition of output axes.</li>
<li>The final caveat is that if some of the legs connecting gate to the circuit are twisted the output legs needs to be transposed accordingly. Here is an example</li>
</ol>
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/tensor_contraction_twisted.svg" alt="Drawing" style="width: 640px;"></p>
<p>Here is the code that implements this program.</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gate_transposition(placement):</span>
<span id="cb30-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Determine transposition associated with initial placement of gate."""</span></span>
<span id="cb30-3">    </span>
<span id="cb30-4">    position_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(placement[i], i) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(placement))]</span>
<span id="cb30-5">    position_index.sort()</span>
<span id="cb30-6">    transposition <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _,i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> position_index]</span>
<span id="cb30-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transposition</span>
<span id="cb30-8"></span>
<span id="cb30-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> transposition(n_qubits, placement):</span>
<span id="cb30-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a transposition that relabels tensor axes correctly.</span></span>
<span id="cb30-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Example (from the figure above): n=6, placement=[1, 3] gives [2, 0, 3, 1, 4, 5].</span></span>
<span id="cb30-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Twiseted: n=6, placement=[3, 1] gives [2, 1, 3, 0, 4, 5]."""</span></span>
<span id="cb30-13">    </span>
<span id="cb30-14">    gate_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(placement)</span>
<span id="cb30-15">    </span>
<span id="cb30-16">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(gate_width, n_qubits))</span>
<span id="cb30-17">    </span>
<span id="cb30-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> position, insertion <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(placement), gate_transposition(placement)):</span>
<span id="cb30-19">        t.insert(position, insertion)</span>
<span id="cb30-20"></span>
<span id="cb30-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> t</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_gate_to_tensor(gate, tensor, placement):</span>
<span id="cb30-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Append `gate` to `tensor` along legs specified by `placement`. Transpose the output axes properly."""</span></span>
<span id="cb30-25">    </span>
<span id="cb30-26">    gate_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gate.shape)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-27">    tensor_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tensor.shape)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb30-28">    </span>
<span id="cb30-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contraction axes for `tensor` are input axes (=last half of all axes)</span></span>
<span id="cb30-30">    gate_contraction_axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(gate_width, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>gate_width)) </span>
<span id="cb30-31"></span>
<span id="cb30-32">    contraction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.tensordot(gate, tensor, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gate_contraction_axes, placement])</span>
<span id="cb30-33">    </span>
<span id="cb30-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input(=last half) indices are intact</span></span>
<span id="cb30-35">    t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transposition(tensor_width, placement) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(tensor_width, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>tensor_width)) </span>
<span id="cb30-36"></span>
<span id="cb30-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> jnp.transpose(contraction, axes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>t)</span></code></pre></div>
</div>
<p>Now, using this tensor language we will construct unitary matrices corresponding to our ansatz circuits. To specify the ansatz we must supply the number of qubits in the circuit, type of entangling blocks to use and arrangement of these blocks.</p>
<p>The simplest way to specify arrangement would be to just give a list like <code>[[0,1], [1, 3], [2, 1]]</code> etc of pairs of qubits to put entangling blocks on to. However for performance reasons I need to make it more complicated. To construct a matrix for our quantum circuit we basically need to loop over all entangling gates and append them one by one. When using <code>JAX</code> plain python loops are simply unrolled and then compiled. For large loops this leads to very large compilation times. If there is no structure in how we place our gates in the circuit this is probably the best one can do. However, we can be more efficient than that if there is a structure. Take a look at this picture</p>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-2">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb31-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>):</span>
<span id="cb31-4">    qc.cx(i,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-5">    i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb31-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb31-7">        qc.barrier()</span>
<span id="cb31-8">    </span>
<span id="cb31-9">qc.draw()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre style="word-wrap: normal;white-space: pre;background: #fff0;line-height: 1.1;font-family: &quot;Courier New&quot;,Courier,monospace">                     ░                 ░                 ░           
q_0: ──■─────────────░───■─────────────░───■─────────────░───■───────
     ┌─┴─┐           ░ ┌─┴─┐           ░ ┌─┴─┐           ░ ┌─┴─┐     
q_1: ┤ X ├──■────────░─┤ X ├──■────────░─┤ X ├──■────────░─┤ X ├──■──
     └───┘┌─┴─┐      ░ └───┘┌─┴─┐      ░ └───┘┌─┴─┐      ░ └───┘┌─┴─┐
q_2: ─────┤ X ├──■───░──────┤ X ├──■───░──────┤ X ├──■───░──────┤ X ├
          └───┘┌─┴─┐ ░      └───┘┌─┴─┐ ░      └───┘┌─┴─┐ ░      └───┘
q_3: ──────────┤ X ├─░───────────┤ X ├─░───────────┤ X ├─░───────────
               └───┘ ░           └───┘ ░           └───┘ ░           </pre>
</div>
</div>
<p>Here <img src="https://latex.codecogs.com/png.latex?CNOT">s are just placeholders for any entangling block of our interest. There is a regular pattern. Most of the circuit consists of identical layers up to a couple of final gates. Construction and optimization of such circuits with <code>JAX</code> can be made way more efficient by using <code>lax.fori_loop</code> (<a href="https://jax.readthedocs.io/en/latest/_autosummary/jax.lax.fori_loop.html">see here for docs</a>) or a similar construct. This allows to exploit the regularity and reduce the compilation time dramatically.</p>
<p>The price to pay is a bit of a hassle in separating all gates into regular ones and the remainder. My core function <code>build_unitary</code> accepts the regular layers as an argument <code>layer_placements=[layer, number_of_repetitions]</code> and the remainder gates are described by <code>free_placements</code>. Also, we need some way to access all parameters (angles) in our circuit. I chose the simplest approach here, to supply angles as a 1d array, but internally they play a bit different roles so there is also a function <code>split_angles</code> to separate a 1d array of all angles into several logical blocks.</p>
<p>OK, so here is the code. Examples are found in the end of this section.</p>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> split_angles(angles, num_qubits, layer_len, num_layers, free_placements_len):</span>
<span id="cb32-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Splits 1d array of all angles in a circuit into four groups.</span></span>
<span id="cb32-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb32-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        angles: all angles in a circuit as 1d array.</span></span>
<span id="cb32-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_qubits: number of qubits in a circuit.</span></span>
<span id="cb32-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        layer_len: length (depth) of a single layer in a circuit.</span></span>
<span id="cb32-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_layers: number of repeated layers.</span></span>
<span id="cb32-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        free_placements_len: number of entanglig blocks not in layers.</span></span>
<span id="cb32-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb32-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:  a tuple (surface_angles, layers_angles, free_block_angles) where</span></span>
<span id="cb32-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        surface_angles: angles in initial single-qubit blocks.</span></span>
<span id="cb32-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        block_angles: angles of all entangling blocks.</span></span>
<span id="cb32-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        layers_angles: angles for entangling blocks that are parts of complete layers.</span></span>
<span id="cb32-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        free_block_angles: angles of remaining entangling blocks.</span></span>
<span id="cb32-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span> </span>
<span id="cb32-17">    </span>
<span id="cb32-18">    surface_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits].reshape(num_qubits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb32-19">    block_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits:].reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb32-20">    layers_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_angles[:layer_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_layers].reshape(num_layers, layer_len, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb32-21">    free_block_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_angles[layer_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_layers:]</span>
<span id="cb32-22">    </span>
<span id="cb32-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> surface_angles, block_angles, layers_angles, free_block_angles</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build_unitary(num_qubits, block_type, angles, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>((), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>()):</span>
<span id="cb32-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Builds `JAX`-compatible unitary matrix of a quantum circuit.</span></span>
<span id="cb32-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">   </span></span>
<span id="cb32-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Arguments specify structure of the circuit and values of parameters.</span></span>
<span id="cb32-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb32-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb32-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_qubits: number of qubits.</span></span>
<span id="cb32-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        block_type: type of entangling block to use. Currently only 'cx' and 'cz' are supported.</span></span>
<span id="cb32-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        angles: 1d array of all angle parameters in the circuit.</span></span>
<span id="cb32-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        layer_placements: a tuple (single_layer, n) where `single_layer` specifies </span></span>
<span id="cb32-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            positions of several entangling blocks and `n` how many time to repeat each layer.</span></span>
<span id="cb32-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        free_placements: Positions of entangling blocks that do no belong to layers.</span></span>
<span id="cb32-38"></span>
<span id="cb32-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb32-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        A `jax.numpy` unitary matrix of the quantum circuit.</span></span>
<span id="cb32-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-42">    </span>
<span id="cb32-43">    layer, num_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer_placements</span>
<span id="cb32-44">    </span>
<span id="cb32-45">    layer_depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layer)    </span>
<span id="cb32-46">    num_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layer)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(free_placements) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Count all entangling blocks.</span></span>
<span id="cb32-47">    </span>
<span id="cb32-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divides 1d array of all angles into three logically distinct groups.</span></span>
<span id="cb32-49">    </span>
<span id="cb32-50">    surface_angles, _, layers_angles, free_block_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_angles(angles, num_qubits, </span>
<span id="cb32-51">                                                                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layer), num_layers, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(free_placements))</span>
<span id="cb32-52">    </span>
<span id="cb32-53">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initizlizes identity matrix of the proper size.</span></span>
<span id="cb32-54">    </span>
<span id="cb32-55">    u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> jnp.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits).reshape([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-56">    </span>
<span id="cb32-57">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unitary matrix is built in three steps. </span></span>
<span id="cb32-58">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First, 3 single-qubit gates are applied to each qubit.</span></span>
<span id="cb32-59">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second, all entangling blocks that are parts of layers are applied.</span></span>
<span id="cb32-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Finally, remainder blocks that a not parts any layer are applied.</span></span>
<span id="cb32-61">    </span>
<span id="cb32-62">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial round of single-qubit gates</span></span>
<span id="cb32-63">    </span>
<span id="cb32-64">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(surface_angles):</span>
<span id="cb32-65">        gate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rz_mat(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rx_mat(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> rz_mat(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb32-66">        u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apply_gate_to_tensor(gate, u, [i])</span>
<span id="cb32-67">    </span>
<span id="cb32-68">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sequence of layers wrapped in `fori_loop`.</span></span>
<span id="cb32-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using `fori_loop` instead of plain `for` loop reduces the compilation time significantly.</span></span>
<span id="cb32-70">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To use `fori_loop` it is convenient to define a separate function that applies a whole layer of gates.</span></span>
<span id="cb32-71">    </span>
<span id="cb32-72"></span>
<span id="cb32-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_layer(i, u, layer, layers_angles):</span>
<span id="cb32-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply several gates to a given quantum circuit.</span></span>
<span id="cb32-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb32-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Supplying the totality of `layers_angles` makes </span></span>
<span id="cb32-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        the function compatible with `fori_loop`.</span></span>
<span id="cb32-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb32-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb32-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            i: index of the layer.</span></span>
<span id="cb32-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            u: matrix to apply gates to.</span></span>
<span id="cb32-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            layer: positions of all gates to be applied.</span></span>
<span id="cb32-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            layers_angles: angles of all layers.        </span></span>
<span id="cb32-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb32-85">        </span>
<span id="cb32-86">        layer_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers_angles[i]</span>
<span id="cb32-87">    </span>
<span id="cb32-88">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> block_angles, position <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(layer_angles, layer):</span>
<span id="cb32-89">            gate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(block_type, block_angles).unitary().reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) </span>
<span id="cb32-90">            u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apply_gate_to_tensor(gate, u, position)</span>
<span id="cb32-91">            </span>
<span id="cb32-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> u</span>
<span id="cb32-93"></span>
<span id="cb32-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb32-95">        u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lax.fori_loop(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, num_layers, <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> i, u: apply_layer(i, u, layer, layers_angles), u)</span>
<span id="cb32-96">    </span>
<span id="cb32-97">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adds the remainding (free) entangling blocks.</span></span>
<span id="cb32-98">    </span>
<span id="cb32-99">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> angles, position <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(free_block_angles, free_placements):</span>
<span id="cb32-100">        gate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(block_type, angles).unitary().reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb32-101">        u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> apply_gate_to_tensor(gate, u, position)</span>
<span id="cb32-102"></span>
<span id="cb32-103">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> u.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits)</span></code></pre></div>
</div>
</section>
<section id="layers" class="level2">
<h2 class="anchored" data-anchor-id="layers">Layers</h2>
<p>Here are a couple of simple functions to help define gate arrangements. The basic layer is <code>sequ_layer</code> which consists of entangling gates applied to each possible pair of two qubit gates enumerated by pairs <img src="https://latex.codecogs.com/png.latex?(i,j)"> with <img src="https://latex.codecogs.com/png.latex?i%3Cj">.</p>
<div class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> sequ_layer(num_qubits):</span>
<span id="cb33-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [[i,j] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_qubits) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_qubits)]</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fill_layers(layer, depth):</span>
<span id="cb33-5">    num_complete_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layer)</span>
<span id="cb33-6">    complete_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [layer, num_complete_layers]</span>
<span id="cb33-7">    incomplete_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer[:depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(layer)]</span>
<span id="cb33-8">    </span>
<span id="cb33-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> complete_layers, incomplete_layer</span></code></pre></div>
</div>
<p>Function <code>fill_layers</code> allows to specify how much entangling gates we want in total and splits them into complete layers (to be used as <code>layer_placements</code>) and possible remainder gates (that become <code>free_placements</code>). For example, a <code>sequ_layer</code> on three qubits consists of three gates at positions</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">sequ_layer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>[[0, 1], [0, 2], [1, 2]]</code></pre>
</div>
</div>
<p>If we want to have the sequ pattern and 10 entangling gates in total we can put three complete layers and a final single gate. <code>fill_layers</code> does just that</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">layer_placements, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(sequ_layer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb36-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(layer_placements)</span>
<span id="cb36-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(free_placements)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[[0, 1], [0, 2], [1, 2]], 3]
[[0, 1]]</code></pre>
</div>
</div>
</section>
<section id="packing-everything-together-ansatz-circuits" class="level2">
<h2 class="anchored" data-anchor-id="packing-everything-together-ansatz-circuits">Packing everything together: ansatz circuits</h2>
<p>Now that we have defined our building blocks and convenience functions to assemble them it is time to pack everything together and reap the harvest.</p>
<p>I will define <code>ansatz</code> class that assembles our building blocks according to a predefined pattern. It’s <code>circuit</code> method gives a <code>qiskit</code> circuit which can be used for visualization and cross-checks. It’s <code>unitary</code> attribute returns fully <code>jax</code>-compatible matrix representation of the same circuit. Finally, its <code>learn</code> method uses our optimization routine to approximate a target unitary. First the code, then an example.</p>
<div class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Ansatz():</span>
<span id="cb38-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Parametric quantum circuit.</span></span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Ansatz/parametric circuit is defined by tupes of entangling blocks and their arrangement.</span></span>
<span id="cb38-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Concrete values of parameters are not considered part of the ansatz. Class provides access</span></span>
<span id="cb38-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    to both `qiskit` version of the circuit and `jax.numpy` unitary matrix.</span></span>
<span id="cb38-7"></span>
<span id="cb38-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb38-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_qubits: number of qubits</span></span>
<span id="cb38-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        block_type: type of entangling blocks</span></span>
<span id="cb38-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_angles: total number of angles (parameters) in the circuit.</span></span>
<span id="cb38-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        unitary: `jax.numpy` unitary matrix of the circuit as function of angles.</span></span>
<span id="cb38-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb38-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Methods:</span></span>
<span id="cb38-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        circuit: `qiskit` version of the circuit.</span></span>
<span id="cb38-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        learn: numerical approximation of the target unitary.</span></span>
<span id="cb38-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb38-18">    </span>
<span id="cb38-19">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, num_qubits, block_type, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[[], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb38-20">        </span>
<span id="cb38-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_qubits</span>
<span id="cb38-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block_type</span>
<span id="cb38-23">        </span>
<span id="cb38-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layer_placements</span>
<span id="cb38-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> free_placements</span>
<span id="cb38-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_layers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>free_placements</span>
<span id="cb38-27">        </span>
<span id="cb38-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_placements)</span>
<span id="cb38-29">        </span>
<span id="cb38-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> angles: build_unitary(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block_type, angles, </span>
<span id="cb38-31">                                                     layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_layers], </span>
<span id="cb38-32">                                                     free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.free_placements)</span>
<span id="cb38-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> circuit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, angles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>): </span>
<span id="cb38-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""qiskit version circuit. If angles not specified a parametric circuit is constructed."""</span></span>
<span id="cb38-35">        </span>
<span id="cb38-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> angles <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb38-37">            angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([Parameter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(i)) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_angles)])</span>
<span id="cb38-38">            </span>
<span id="cb38-39">        surface_angles, block_angles, _, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> split_angles(angles, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits, </span>
<span id="cb38-40">                                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.layer), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_layers, </span>
<span id="cb38-41">                                                          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.free_placements))        </span>
<span id="cb38-42">        </span>
<span id="cb38-43">        qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_qubits)</span>
<span id="cb38-44">        </span>
<span id="cb38-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initial round of single-qubit gates.</span></span>
<span id="cb38-46">        </span>
<span id="cb38-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n, a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(surface_angles):</span>
<span id="cb38-48">            qc.rz(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], n)</span>
<span id="cb38-49">            qc.rx(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], n)</span>
<span id="cb38-50">            qc.rz(a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], n)</span>
<span id="cb38-51">        </span>
<span id="cb38-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Entangling gates accoring to placements</span></span>
<span id="cb38-53">        </span>
<span id="cb38-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a, p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(block_angles, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.all_placements):</span>
<span id="cb38-55">            qc_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> block(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.block_type, a).circuit() </span>
<span id="cb38-56">            qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.compose(qc_block, p)</span>
<span id="cb38-57">            </span>
<span id="cb38-58">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> qc</span>
<span id="cb38-59">        </span>
<span id="cb38-60">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> learn(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, u_target, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs): </span>
<span id="cb38-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Use numerical optimization to approximate u_target."""</span></span>
<span id="cb38-62">        </span>
<span id="cb38-63">        u_func <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unitary</span>
<span id="cb38-64">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> unitary_learn(u_func, u_target, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_angles, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span></code></pre></div>
</div>
<p>Here is an example that should illustrate how all this can be used.</p>
<div class="cell" data-tags="[]" data-execution_count="29">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">n_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb39-2">block_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span></span>
<span id="cb39-3"></span>
<span id="cb39-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For technical reasons all entangling gates are divided into 'layers' and 'free' gates. </span></span>
<span id="cb39-5"></span>
<span id="cb39-6">single_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We make single layer consisting of 'cx' block on qubits [0,1]</span></span>
<span id="cb39-7">                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># followed by reversed 'cx' block on qubits [1,2].</span></span>
<span id="cb39-8">    </span>
<span id="cb39-9">layers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [single_layer, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The layer is repeated 3 times.</span></span>
<span id="cb39-10"></span>
<span id="cb39-11">free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apeend remaining `free placements` a.</span></span>
<span id="cb39-12"></span>
<span id="cb39-13">anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(n_qubits, block_type, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layers, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>free_placements)</span></code></pre></div>
</div>
<p>Here is what resulting circuit looks like.</p>
<div class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">anz.circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-31-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Just to make sure let us check that the unitary matrix of this circuit extracted from qiskit agrees with our own implementation for a random set of angles.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> random.uniform(random.PRNGKey(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(anz.num_angles,), minval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,maxval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>jnp.pi)</span>
<span id="cb41-2"></span>
<span id="cb41-3">qs_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(anz.circuit(angles).reverse_bits()).data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># qiskit matrix representation</span></span>
<span id="cb41-4">our_u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.unitary(angles) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our matrix representation</span></span>
<span id="cb41-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(jnp.allclose(qs_u, our_u, rtol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span>, atol<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-7</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>True</code></pre>
</div>
</div>
</section>
</section>
<section id="experiments" class="level1">
<h1>Experiments</h1>
<p>Now that the hard work is behind we can sit back and reap the benefits. I will go through a series of examples. Primary goal is to back up the claims from the introduction about reaching the theoretical lower bound, agile performance on restricted topology etc. But I will also try to make clear how my code can be used if you wish to do a little experimenting with it yourself.</p>
<section id="learning-2-qubit-random-unitary" class="level2">
<h2 class="anchored" data-anchor-id="learning-2-qubit-random-unitary">Learning 2-qubit random unitary</h2>
<p>Let’s start by learning a random 2-qubits unitary. First, define one.</p>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1">u_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<p>Here is the parametrized circuit we are going to use. <code>cz</code> means that the entangling gate is controlled-Z while <code>free_placements</code> are just positions where to put these entangling gates. There isn’t much choice for 2 qubits as you could guess. I will explain why I call these <code>free_placements</code> a bit later.</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb44-2">anz.circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># anz.circuit() is a fully-functional `qiskit` version of our ansatz.</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="33">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-34-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The learning process is easy as pie:</p>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb45-2"></span>
<span id="cb45-3">angles_history, loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.learn(u_target)</span>
<span id="cb45-4">plt.plot(loss_history)</span>
<span id="cb45-5">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 2.45 s, sys: 21.4 ms, total: 2.48 s
Wall time: 2.43 s</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-35-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>The graph shows that we achieve great fidelity in under 500 iterations.</p>
<p>Don’t believe me? Is there a way to tell if this plot indeed reflects a successful compilation without looking under the hood? OK OK, since you’re asking, I will double-check using pure <code>qiskit</code>:</p>
<div class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">angles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> angles_history[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Last(=best) angles in the optimization process.</span></span>
<span id="cb47-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.circuit(angles) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># genuine qiskit circuit. </span></span>
<span id="cb47-3">u_qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc.reverse_bits()).data <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># qiskit API to extract the unitary matrix.</span></span>
<span id="cb47-4">disc(u_qs, u_target) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OK, I guess here you have believe I've implemented the cost function properly.</span></span>
<span id="cb47-5">                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you want to compare the matrices component-wise, fine with me.</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<pre><code>DeviceArray(2.3841858e-07, dtype=float32)</code></pre>
</div>
</div>
<p>Similar checks can be done in more complicated scenarios below.</p>
<p>You can move forward to other examples or try some experiments here. Some ideas: 1. Changing gate type from <code>cz</code> to <code>cx</code> (should not affect the result). 1. Decreasing the number of layers (fidelity won’t be nearly as good). 1. Increasing the number of layers (same fidelity with less iterations).</p>
</section>
<section id="learning-3-qubit-random-unitary" class="level2">
<h2 class="anchored" data-anchor-id="learning-3-qubit-random-unitary">Learning 3-qubit random unitary</h2>
<p>I advertised in the introduction that with just 14 entangling gates any 3-qubit unitary can be nearly perfectly approximated. Let me back up this claim. Here is how we can construct the corresponding ansatz.</p>
<div class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb49-2">block_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span></span>
<span id="cb49-3">depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span></span>
<span id="cb49-4">layer_placemets, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(sequ_layer(num_qubits), depth)</span>
<span id="cb49-5"></span>
<span id="cb49-6">anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(num_qubits, block_type, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layer_placements, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>free_placements)</span>
<span id="cb49-7">anz.circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="36">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-37-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The way gate placements are passes to <code>Ansatz</code> here require a bit of unpacking. This is an implementation detail I didn’t take enough care to hide. For technical reasons I explained in the numerical section optimization is much faster when gates are arranged in a regular pattern. The pattern we use here is called <code>sequ_layer</code> and for three qubits it is simply</p>
<div class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1">sequ_layer(num_qubits)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>[[0, 1], [0, 2], [1, 2]]</code></pre>
</div>
</div>
<p>i.e.&nbsp;it just lists all possible pairs of three qubits. However, since 14 % 3 = 2 the two last gates do not fit into the regular pattern and require a bit of a special treatment. This is what the function <code>fill_layers</code> does for us. Indeed</p>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb52" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb52-1">layer_placements, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(sequ_layer(num_qubits), depth)</span>
<span id="cb52-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'basic layer is repeated four times:'</span>, layer_placements)</span>
<span id="cb52-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'remaining blocks reside at positions:'</span>, free_placements)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>basic layer is repeated four times: [[[0, 1], [0, 2], [1, 2]], 4]
remaining blocks reside at positions: [[0, 1], [0, 2]]</code></pre>
</div>
</div>
<p>I hope that did explain the way that gate positions are passed to the <code>Ansatz</code>. Instead of <code>sequ_layer</code> you can pass any arrangment of gates to be periodically repeated. We will do just that when considering a restricted topology.</p>
<p>Now let’s run the optimization.</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb54-2"></span>
<span id="cb54-3">u_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb54-4">angles_history, loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.learn(u_target)</span>
<span id="cb54-5"></span>
<span id="cb54-6">plt.plot(loss_history)</span>
<span id="cb54-7">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 9.75 s, sys: 177 ms, total: 9.92 s
Wall time: 9.18 s</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-40-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>OK, I hope this does convince you that our ansatz was indeed good enough! Another interesting thing to do is to make a sweep to see how the fidelity increases (error drops) with the number of layers.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb56-2"></span>
<span id="cb56-3">best_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[], []]</span>
<span id="cb56-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> depth <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># TLB(3)=14</span></span>
<span id="cb56-5">    layer_placemets, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(sequ_layer(n_qubits), depth)</span>
<span id="cb56-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, block_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>]):</span>
<span id="cb56-7">        anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(num_qubits, block_type, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layer_placemets, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>free_placements)</span>
<span id="cb56-8">        angles, loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.learn(u_target, target_disc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10e-4</span>)</span>
<span id="cb56-9">        best_loss[i].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(loss_history))</span>
<span id="cb56-10"></span>
<span id="cb56-11">plt.plot(best_loss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx loss'</span>)</span>
<span id="cb56-12">plt.plot(best_loss[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz loss'</span>)</span>
<span id="cb56-13">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>)</span>
<span id="cb56-14">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of entangling gates'</span>)</span>
<span id="cb56-15">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 3min 49s, sys: 6.68 s, total: 3min 55s
Wall time: 3min 35s</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="40">
<pre><code>&lt;matplotlib.legend.Legend at 0x7f39d2950a60&gt;</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-41-output-3.png" class="img-fluid"></p>
</div>
</div>
<p>One lesson here is that both types of two-qubits gate perform similarly well at all depths. This is not surprising for because <code>cx</code> and <code>cz</code> gates can be related by single-qubit Hadamard transformations. It would be interesting to see if other two-qubit gates perform differently.</p>
<p>Another important observation is that the best fidelity is a monotonic function of the the amount of two-qubit gates. There is some work on variational algorithms testing various metrics that would adequately reflect expressivity of the ansatz. I think that plain number of <img src="https://latex.codecogs.com/png.latex?CNOT"> gates should in fact be a fantastic and simple metric for this.</p>
</section>
<section id="learning-6-qubit-random-unitary" class="level2">
<h2 class="anchored" data-anchor-id="learning-6-qubit-random-unitary">Learning 6-qubit random unitary</h2>
<p>I do know that 3 is followed by 4, but shall we perhaps get more ambitious? Let’s try to compile a 6-qubit random unitary (you can try to go higher if your machine allows):</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb59" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb59-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb59-2"></span>
<span id="cb59-3">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb59-4">depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TLB(num_qubits) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1020 for 6 qubits</span></span>
<span id="cb59-5">layer_placements, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(sequ_layer(num_qubits), depth)</span>
<span id="cb59-6"></span>
<span id="cb59-7">u_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb59-8">anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(num_qubits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cz'</span>, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layer_placements, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>free_placements)</span>
<span id="cb59-9"></span>
<span id="cb59-10">angles_history, loss_history <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.learn(u_target, num_iterations<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)</span>
<span id="cb59-11"></span>
<span id="cb59-12">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of qubits: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(num_qubits))</span>
<span id="cb59-13">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of iterations'</span>)</span>
<span id="cb59-14">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>)</span>
<span id="cb59-15">plt.plot(loss_history)</span>
<span id="cb59-16">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 5min 33s, sys: 1min 1s, total: 6min 34s
Wall time: 6min 28s</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-42-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Note that depth of the theoretical lower bound for 6 qubits is <img src="https://latex.codecogs.com/png.latex?TLB(6)=1020"> which implies that there are <img src="https://latex.codecogs.com/png.latex?%5Capprox%204000"> parameters in our ansatz. On my modest laptop the training completes in about 10 minutes. Of course I would not claim this to be the cutting edge, but our <code>JAX</code> setup seems to be competitive at the scale (3-6 qubits) addressed in the literature so far.</p>
</section>
<section id="restricted-topology" class="level2">
<h2 class="anchored" data-anchor-id="restricted-topology">Restricted topology</h2>
<p>One of the most remarkable features of this approach is that topology restrictions do not seem to bring any overhead to compilation of random unitaries. To make the point and illustrate this claim I will consider the least connected topology I can think of, the chain topology. The corresponding layer consists of all pairs of adjacent qubits.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb61" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb61-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> chain_layer(num_qubits):</span>
<span id="cb61-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [(i,i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span></code></pre></div>
</div>
<p>Here is a 6-qubit illustration.</p>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb62" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb62-1">Ansatz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[chain_layer(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]).circuit().draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="43">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-44-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here I drew a single layer consisting of 5 blocks. To reach the theoretical lower bound requires to stack together 1020/5=204 layers. Let’s do that and see how the learning goes.</p>
<div class="cell" data-execution_count="44">
<div class="sourceCode cell-code" id="cb63" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb63-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb63-2"></span>
<span id="cb63-3">num_qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb63-4">depth <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TLB(num_qubits)</span>
<span id="cb63-5">layer_placements, free_placements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fill_layers(chain_layer(num_qubits), depth)</span>
<span id="cb63-6"></span>
<span id="cb63-7">u_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> unitary_group.rvs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>num_qubits, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb63-8">anz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Ansatz(num_qubits, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cx'</span>, layer_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>layer_placements, free_placements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>free_placements)</span>
<span id="cb63-9"></span>
<span id="cb63-10">angles_history_chain, loss_history_chain <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> anz.learn(u_target)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 5min 9s, sys: 1min 3s, total: 6min 13s
Wall time: 6min</code></pre>
</div>
</div>
<p>Let’s compare the results with the previously considered fully connected topology.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb65" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb65-1">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of qubits: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(num_qubits))</span>
<span id="cb65-2">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number of iterations'</span>)</span>
<span id="cb65-3">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'error'</span>)</span>
<span id="cb65-4">plt.plot(loss_history, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fully connected'</span>)</span>
<span id="cb65-5">plt.plot(loss_history_chain, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'chain'</span>)</span>
<span id="cb65-6">plt.legend()</span>
<span id="cb65-7">plt.yscale(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-Machine learning compilation of quantum circuits -- experiments_files/figure-html/cell-46-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As you can see, the chain topology performs only slightly worse than the fully connected topology which seems truly remarkable.</p>
</section>
</section>
<section id="final-remarks" class="level1">
<h1>Final remarks</h1>
<p>The main goal was to illustrate that numerical compilation of small-scale random unitaries can be very efficient in terms of gate count, and seems to reach the theoretical lower bound in all cases considered, regardless of topological restrictions.</p>
<p>It is interesting to note that a variety of optimization procedures are used in the literature. In <a href="http://arxiv.org/abs/2106.05649">M&amp;S</a> a simple version of the gradient descent is used, in <a href="http://arxiv.org/abs/2109.06770">R&amp;Z</a> an interesting procedure of one-qubit gate decoupling is used (I must admit I do not understand exactly what it does), and in <a href="http://arxiv.org/abs/2109.13223">KTS preprint</a> a funny optimization one-angle-at a time is used (because as a function of each angle the circuit is a simple triginometric function, it is trivial to optimize one parameter at a time). Here we used a slightly more advanced version of the gradient descent, the Adam algorithm. All approaches seem to work well on random unitaries.</p>
<p>My preliminary investigations show that for special gates things get much more complicated than for generic random unitaries. But this is where the most intersting stuff is found, e.g.&nbsp;compilation of multi-component Toffoli gates on restricted connectivity. I hope to address these cases in a future blog post!</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>qiskit</category>
  <category>JAX</category>
  <category>machine learning</category>
  <category>compilation</category>
  <guid>https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/2021-12-13-machine learning compilation of quantum circuits -- experiments.html</guid>
  <pubDate>Sun, 12 Dec 2021 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/machine_learning_compilation_experiments/pisa.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Matrix representation of quantum circuits - notations and gotchas</title>
  <link>https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-matrix representation of quantum circuits.html</link>
  <description><![CDATA[ 




<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix%20representation%20of%20quantum%20circuits.ipynb"> <img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/https:/colab.research.google.com/assets/colab-badge.svg" align="right" alt="Open In Colab"> </a></p>
<section id="intro" class="level1">
<h1>Intro</h1>
<p>Usually, for experimenting with quantum circuits I use <code>qiskit</code>. As any higher level environment it is very convenient for common tasks, but may turn out too inflexible for unusual use cases. A somewhat opposite approach is to use much lower level tools to gain in flexibility at the expense of convenience. Currently I want to use Google’s <code>tensornetwork</code> <a href="https://tensornetwork.readthedocs.io/en/latest/">package</a> for simulations and training of quantum circuits, but this requires building many things that are for free in <code>qiskit</code> from scratch. It is also necessary to become explicit about conventions for matrix representation of quantum circuits. As long as you stay within a single framework this may not be an issue. However for debugging purposes as well as for comparison between different frameworks this may become unavoidable. Thus, I always anticipated, that a day will come when I need to face my fears and order all terms in a tensor product by hands. Now it seems I’m past the difficult part and I’m better writing this down in case I would need to do something similar in the future.</p>
<section id="defining-the-problem" class="level2">
<h2 class="anchored" data-anchor-id="defining-the-problem">Defining the problem</h2>
<p>OK, so what is the problem? Consider the following simple circuit built with <code>qiskit</code>:</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.quantum_info <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Operator, Statevector</span>
<span id="cb1-4"></span>
<span id="cb1-5">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-6">qc.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-7">qc.y(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-8">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-9">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="1">
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix representation of quantum circuits_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>It is not hard or ambiguous to interpret what this circuit does by inspecting the diagram. Say the input state is <img src="https://latex.codecogs.com/png.latex?q_0=%7C0%5Crangle">, <img src="https://latex.codecogs.com/png.latex?q_1=%7C1%5Crangle">. After <img src="https://latex.codecogs.com/png.latex?X"> acts on <img src="https://latex.codecogs.com/png.latex?q_0"> it becomes <img src="https://latex.codecogs.com/png.latex?q_0%5Cto%20X%20%7C0%5Crangle=%7C1%5Crangle">. Similarly, <img src="https://latex.codecogs.com/png.latex?q_1"> after <img src="https://latex.codecogs.com/png.latex?Y"> becomes <img src="https://latex.codecogs.com/png.latex?q_1%5Cto%20Y%7C1%5Crangle=-i%20%7C0%5Crangle">. Since now <img src="https://latex.codecogs.com/png.latex?q_0"> is “on” the CNOT gate switches the state of <img src="https://latex.codecogs.com/png.latex?q_1"> further to <img src="https://latex.codecogs.com/png.latex?q_0%20%5Cto%20-i%7C1%5Crangle">. So the end result is that <img src="https://latex.codecogs.com/png.latex?q_0=%7C0%5Crangle,%20q_1=%7C1%5Crangle"> is transformed to <img src="https://latex.codecogs.com/png.latex?q_0=%7C1%5Crangle,%20q_1=-i%7C1%5Crangle">. Or perhaps a picture says it better</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/myimages/xycnot01.png" class="img-fluid"></p>
<p>Similarly, we can work out what the circuit does for other computational basis states which by linearity fully fixes the action of the circuit. Although quite explicit, this is a clumsy description. This is why the matrix notation is usually used. And indeed, we can obtain the matrix corresponding to our quantum circuit quite easily in <code>qiskit</code>:</p>
<div class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">U_qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc).data</span>
<span id="cb2-2">U_qs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([[0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j],
       [0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j],
       [0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j, 0.-1.j, 0.+0.j]])</code></pre>
</div>
</div>
<p>It is important to realize that a number of conventions must be chosen before such explicit matrix representation can be written down. In particular, I will emphasize two points I tripped over while studying this: ordering of the qubit states in the tensor product or “vertical ordering” and ordering of operators or “horizontal ordering”.</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/upsidedown.jpg" alt="Drawing" style="width: 400px;"></p>
<p>In the rest of the post I will clarify what are the conventions used in <code>qiskit</code> and how to reproduce the circuit with the <code>tensornetwork</code> library.</p>
</section>
</section>
<section id="states-vertical-ordering" class="level1">
<h1>States: vertical ordering</h1>
<section id="single-qubit-states" class="level2">
<h2 class="anchored" data-anchor-id="single-qubit-states">Single qubit states</h2>
<p>First we need to give matrix representations to two basis states of a single qubit. Here I think it is quite uncontroversial to choose <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C0%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%5Cend%7Bpmatrix%7D,%5Cqquad%20%7C1%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%5Cend%7Bpmatrix%7D%20%5Clabel%7Bkets%7D%0A%5Cend%7Balign%7D"></p>
<p>These are the “ket” vectors. Their “bra” counterparts are <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Clangle%200%7C%20=%20%5Cbegin%7Bpmatrix%7D1%20&amp;%200%5Cend%7Bpmatrix%7D,%20%5Cqquad%20%5Clangle%201%7C%20=%20%5Cbegin%7Bpmatrix%7D0%20&amp;%201%5Cend%7Bpmatrix%7D%20%5Clabel%7Bbras%7D%0A%5Cend%7Balign%7D"></p>
<p>With these, the following operators can be computed <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C0%5Crangle%5Clangle%200%7C%20=%20%5Cbegin%7Bpmatrix%7D1%20&amp;%200%20%5C%5C%200%20&amp;%200%5Cend%7Bpmatrix%7D,%5Cqquad%20%7C0%5Crangle%5Clangle%201%7C%20=%20%5Cbegin%7Bpmatrix%7D0%20&amp;%201%20%5C%5C%200%20&amp;%200%5Cend%7Bpmatrix%7D%20%5Cnonumber%5C%5C%20%7C1%5Crangle%5Clangle%200%7C%20=%20%5Cbegin%7Bpmatrix%7D0%20&amp;%200%20%5C%5C%201%20&amp;%200%5Cend%7Bpmatrix%7D,%5Cqquad%20%7C1%5Crangle%5Clangle%201%7C%20=%20%5Cbegin%7Bpmatrix%7D0%20&amp;%200%20%5C%5C%200%20&amp;%201%5Cend%7Bpmatrix%7D%20%5Clabel%7Bketbras%7D%0A%5Cend%7Balign%7D"> ## Multiple qubit states When there is more than a single qubit things become a bit more interesting and potentially confusing. For example, the combined Hilbert space of two qubits <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D_2"> is a tensor product of single-qubit Hilbert spaces <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D_2%20=%20%5Cmathcal%7BH%7D_1%20%5Cotimes%20%5Cmathcal%7BH%7D_1"> but we need to decide which qubit goes first and which goes second. In <code>qiskit</code> a convention is adopted that additional qubits join from the <em>left</em>, i.e.&nbsp;when we have two qubits as here</p>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">qc01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-2">qc01.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix representation of quantum circuits_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The state of the system is <img src="https://latex.codecogs.com/png.latex?%7Cq_1%5Crangle%5Cotimes%20%7Cq_0%5Crangle"> (this is of course only true literally for <a href="https://idnm.github.io/blog/quantum%20concepts/qiskit/2021/07/12/Entanglement.html">non-entangled states</a> but we can define everything only on the computational basis states ). OK, but how do we translate this into the matrix representation? The states in the tensor product of vector spaces can be represented by the <a href="https://en.wikipedia.org/wiki/Kronecker_product">Kronecker product</a> which is not symmetric with respect to permutation arguments. Best way to explain how Kronecker product works is, as usual, through examples:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cbegin%7Bpmatrix%7D%201%20%5C%5C%200%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%20%5C%5C%200%20%5C%5C%200%20%5Cend%7Bpmatrix%7D,%5Cqquad%20%5Cbegin%7Bpmatrix%7D%200%20%5C%5C%201%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D%200%5C%5C%200%5C%5C%20a%20%5C%5C%20b%20%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"> Result for generic left vector can be obtained by linearity <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cbegin%7Bpmatrix%7D%20x%20%5C%5C%20y%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%20%5Cend%7Bpmatrix%7D%20=%20x%20%5Cbegin%7Bpmatrix%7D%201%20%5C%5C%200%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%5Cend%7Bpmatrix%7D%20+y%5Cbegin%7Bpmatrix%7D%200%20%5C%5C%201%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20b%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D%20x%20a%5C%5C%20x%20b%5C%5C%20y%20a%20%5C%5C%20y%20b%20%5Cend%7Bpmatrix%7D%20%20=%20%5Cbegin%7Bpmatrix%7D%20x%20%5Cbegin%7Bpmatrix%7D%20a%5C%5C%20b%5Cend%7Bpmatrix%7D%20%5C%5C%20y%20%20%5Cbegin%7Bpmatrix%7D%20a%20%5C%5C%20%20b%5Cend%7Bpmatrix%7D%20%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"></p>
<p>The last notation here is a bit informal but it shows what happens. One just substitutes the right vector into all elements of the left vector, multiplied by the corresponding components of the left vector. The Kronecker product is defined in the same way for matrices of arbitrary size, not just for two vectors.</p>
<p>So, now we can compute matrix representations of states in the computation basis of two-qubit system</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C00%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%5C%5C0%5C%5C0%5Cend%7Bpmatrix%7D,%5Cquad%20%7C01%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%20%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%5C%5C0%5C%5C0%5Cend%7Bpmatrix%7D%20%5Clabel%7B01%7D%5C%5C%0A%7C10%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D1%5C%5C0%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C0%5C%5C1%5C%5C0%5Cend%7Bpmatrix%7D,%5Cquad%20%7C11%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D0%5C%5C1%20%5Cend%7Bpmatrix%7D%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C0%5C%5C0%5C%5C1%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"></p>
<p>There is a useful relation between the index of the non-zero element <img src="https://latex.codecogs.com/png.latex?n"> in the four-dimensional representation and the computational basis bitstring <img src="https://latex.codecogs.com/png.latex?q_1q_0">, namely <img src="https://latex.codecogs.com/png.latex?n=2q_1+q_0">. I.e. the bitstring <img src="https://latex.codecogs.com/png.latex?q_1q_0"> is the binary representation of the index <img src="https://latex.codecogs.com/png.latex?n">. This extends to arbitrary number of qubits, for example since <img src="https://latex.codecogs.com/png.latex?101"> is <img src="https://latex.codecogs.com/png.latex?5"> in binary representation it follows <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C101%5Crangle%20=%20%5Cbegin%7Bpmatrix%7D0%5C%5C0%5C%5C0%5C%5C0%5C%5C0%5C%5C1%5C%5C0%5C%5C0%20%5Cend%7Bpmatrix%7D%20%5Clabel%7B101%7D%0A%5Cend%7Balign%7D"> (try to obtain this from the two tensor products!)</p>
<p>Don’t believe me? OK, let’s check! In <code>qiskit</code> there is a convenient function to construct a vector representation from a bit string which we will take advantage of. First start with a two-qubit example:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">s01 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Statevector.from_label(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'01'</span>)</span>
<span id="cb5-2">s01.data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j])</code></pre>
</div>
</div>
<p>Comparing to <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7B01%7D"> we find agreement. Similarly,</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">s101 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Statevector.from_label(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'101'</span>)</span>
<span id="cb7-2">s101.data</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>array([0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 1.+0.j, 0.+0.j, 0.+0.j])</code></pre>
</div>
</div>
<p>Again, this is in agreement with <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7B101%7D">.</p>
<p>However, I am not sure that this relation is sufficient to justify the ordering of the tensor products. To me it is much more natural to read the circuit from top to bottom and construct the Hilbert spaces accordingly, say <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BH%7D_0%5Cotimes%20%5Cmathcal%7BH%7D_1%20%5Cotimes%20%5Cmathcal%7BH%7D_2%20%5Cdots"> instead of <img src="https://latex.codecogs.com/png.latex?%5Ccdots%20%5Cmathcal%7BH%7D_2%5Cotimes%20%5Cmathcal%7BH%7D_1%5Cotimes%20%5Cmathcal%7BH%7D_0">. Later I will change the ordering of the tensor product to my liking, but for now we stick with the <code>qiskit</code> one. Now, with conventions for states in place we can proceed to operators.</p>
</section>
</section>
<section id="operators-horizontal-ordering" class="level1">
<h1>Operators: horizontal ordering</h1>
<p>One can say that convention for states representation and ordering of tensor products is a “vertical” convention. There is also a “horizontal” convention which might be potentially confusing. Consider the following circuit</p>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">qc123 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-2">qc123.rx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-3">qc123.ry(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-4">qc123.rz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-5">qc123.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="6">
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix representation of quantum circuits_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>Here, the operator <img src="https://latex.codecogs.com/png.latex?R_x"> is appplied first, the operator <img src="https://latex.codecogs.com/png.latex?R_y"> second and <img src="https://latex.codecogs.com/png.latex?R_z"> last. So in mathematical notation the circuit corresponds to <img src="https://latex.codecogs.com/png.latex?R_z%20R_y%20R_x"> and <em>not</em> to <img src="https://latex.codecogs.com/png.latex?R_x%20R_y%20R_z">. I think that the circuit notation is actually better. We think and write from left to right, this is also a direction that time flows on paper. When another thing happens, we write it to the right and it would be convenient to apply the corresponding operator also to the right. I heard real mathematicians complain about that issue, but I guess we are stuck with it for now.</p>
</section>
<section id="paper-and-pencil-computation" class="level1">
<h1>Paper-and-pencil computation</h1>
<p>With the set up in place we can compute the circuit of interest by hands. For convenience I plot it here once again:</p>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="7">
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix representation of quantum circuits_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>OK, so what is the unitary matrix corresponding to this circuit? It is <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU%20=%20CNOT_%7B01%7D%20%5Ccdot%20(Y%5Cotimes%20X)%0A%5Cend%7Balign%7D"> Here <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bmultline%7D%0ACNOT_%7B01%7D%20=%20%5Cmathbb%7B1%7D%5Cotimes%20%7C0%5Crangle%5Clangle%200%7C+X%5Cotimes%20%7C1%5Crangle%5Clangle%201%7C=%5C%5C%5Cbegin%7Bpmatrix%7D1&amp;0%5C%5C0&amp;1%5Cend%7Bpmatrix%7D%5Cotimes%20%5Cbegin%7Bpmatrix%7D1&amp;0%5C%5C0&amp;0%5Cend%7Bpmatrix%7D+%5Cbegin%7Bpmatrix%7D0&amp;1%5C%5C1&amp;0%5Cend%7Bpmatrix%7D%5Cotimes%20%5Cbegin%7Bpmatrix%7D0&amp;0%5C%5C0&amp;1%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7D1&amp;0&amp;0&amp;0%5C%5C0&amp;0&amp;0&amp;1%5C%5C0&amp;0&amp;1&amp;0%5C%5C0&amp;1&amp;0&amp;0%5Cend%7Bpmatrix%7D%0A%5Cend%7Bmultline%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AY%5Cotimes%20X%20=%20%5Cbegin%7Bpmatrix%7D%200&amp;%20-i%5C%5Ci&amp;0%5Cend%7Bpmatrix%7D%20%5Cotimes%20%5Cbegin%7Bpmatrix%7D%200&amp;%201%5C%5C1&amp;0%5Cend%7Bpmatrix%7D=%5Cbegin%7Bpmatrix%7D0&amp;0&amp;0&amp;-i%5C%5C0&amp;0&amp;-i&amp;0%5C%5C0&amp;i&amp;0&amp;0%5C%5Ci&amp;0&amp;0&amp;0%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"> Multiplying them together gives <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AU%20=%20%5Cbegin%7Bpmatrix%7D0%20&amp;%200%20&amp;%200%20&amp;%20-i%20%5C%5C%20i&amp;0&amp;0&amp;0%20%5C%5C%200%20&amp;%20i%20&amp;%200%20&amp;%200%20%5C%5C%200%20&amp;%200%20&amp;%20-i%20&amp;%200%5Cend%7Bpmatrix%7D%0A%5Cend%7Balign%7D"> Alright, so this is indeed the matrix that <code>qiskit</code> computes:</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">U_qs</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>array([[0.+0.j, 0.+0.j, 0.+0.j, 0.-1.j],
       [0.+1.j, 0.+0.j, 0.+0.j, 0.+0.j],
       [0.+0.j, 0.+1.j, 0.+0.j, 0.+0.j],
       [0.+0.j, 0.+0.j, 0.-1.j, 0.+0.j]])</code></pre>
</div>
</div>
<p>We can now also check that that the states evolve as we expected. For example recall that we computed that our quantum circuit maps <img src="https://latex.codecogs.com/png.latex?q_0%20=%7C0%5Crangle,%20q_1%20=%7C1%5Crangle"> to <img src="https://latex.codecogs.com/png.latex?q_0%20=%7C1%5Crangle,%20q_1%20=%7C1%5Crangle"> with an overall phase <img src="https://latex.codecogs.com/png.latex?-i">. Agreement with <code>qiskit</code> can be checked as follows:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">qs_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Statevector.from_label(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'10'</span>).evolve(qc).data </span>
<span id="cb13-2">our_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Statevector.from_label(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'11'</span>).data</span>
<span id="cb13-3"></span>
<span id="cb13-4">np.allclose(qs_state, our_state)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="implementation-with-tensornetworks" class="level1">
<h1>Implementation with <code>tensornetworks</code></h1>
<p>I will not give a proper introduction to tensor networks but just make some digressions I think should be helpful as we go along.</p>
<p>First thing we will need are the matrices defining <img src="https://latex.codecogs.com/png.latex?X,%20Y"> and <img src="https://latex.codecogs.com/png.latex?CNOT"> gates. Let us introduce them.</p>
<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb15-2">Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>], [<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1j</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]])</span>
<span id="cb15-3">CNOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb15-4">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb15-5">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb15-6">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<section id="an-aside-about-reshaping" class="level2">
<h2 class="anchored" data-anchor-id="an-aside-about-reshaping">An aside about reshaping</h2>
<p>Note that as usually written, <img src="https://latex.codecogs.com/png.latex?CNOT"> is a <img src="https://latex.codecogs.com/png.latex?4%5Ctimes4"> matrix. Since as a quantum gate it acts on two qubits, so it should rather be a four-legged tensor. This is the purpose of the reshaping operation. At first the reshaping might be a bit tricky, so let me illustrate it with an example. Introduce two <img src="https://latex.codecogs.com/png.latex?4%5Ctimes4"> matrices and define their product:</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb16-2">B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.rand(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb16-3"></span>
<span id="cb16-4">AB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> B</span></code></pre></div>
</div>
<p>Now define the corresponding four-legged tensors.</p>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensornetwork <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tn</span>
<span id="cb17-2"></span>
<span id="cb17-3">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.Node(A.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb17-4">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.Node(B.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
</div>
<p>By contracting the legs (or “edges” in terminology of <code>tensornetworks</code>) appropriately, we can reproduce the matrix multiplication. First the code:</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-2">a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb18-3"></span>
<span id="cb18-4">ab <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.contractors.greedy([a, b], output_edge_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], a[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], b[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]]).tensor</span></code></pre></div>
</div>
<p>We can check that the contraction performed in this way exactly reproduces the matrix multiplication of original <img src="https://latex.codecogs.com/png.latex?4%5Ctimes4"> matrices:</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">np.allclose(AB, ab.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>True</code></pre>
</div>
</div>
<p>This can be interpreted graphically as follows. First, the reshaping procedure can be thought of as splitting each of two four-dimensional legs of the original matrix into two two-dimensional ones</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/abtensors.jpg" class="img-fluid"></p>
<p>The labels on the legs have nothing to do with qubit states, these are just indices of edges as assigned by <code>tn.Node</code> operation on our matrices. The matrix multiplication of the original matrices in terms of four-legged tensors then can be drawn as follows</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/abtensorproduct.jpg" class="img-fluid"></p>
<p>The index arrangements in the last part explain why we connected the edges in our code the way we did. This is something to watch out for. For example, connecting edges of two identity tensors in the wrong way may produce a <img src="https://latex.codecogs.com/png.latex?SWAP"> gate.</p>
</section>
<section id="tensor-product-ordering" class="level2">
<h2 class="anchored" data-anchor-id="tensor-product-ordering">Tensor product ordering</h2>
<p>The matrix representation of a tensor diagram like this</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/kroneckertensor.jpg" class="img-fluid"></p>
<p>also comes with a convention for the ordering of tensor products. In <code>tensornetwork</code> as well as in my opinion it is natural to order top-down, i.e.&nbsp;the above diagram is <img src="https://latex.codecogs.com/png.latex?U%5Cotimes%20%5Cmathbb%7B1%7D"> instead of <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7B1%7D%5Cotimes%20U"> as is adopted in <code>qiskit</code>.</p>
</section>
<section id="circuit-from-tensor-network" class="level2">
<h2 class="anchored" data-anchor-id="circuit-from-tensor-network">Circuit from tensor network</h2>
<p>Alright, not we are in a position to reproduce the circuit unitary from the tensor network with nodes <code>x</code>, <code>y</code> and <code>cnot</code>:</p>
<div class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"></span>
<span id="cb21-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make tensors from matrices</span></span>
<span id="cb21-3">x, y, cnot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(tn.Node, [X, Y, CNOT]))</span>
<span id="cb21-4"></span>
<span id="cb21-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect edges properly</span></span>
<span id="cb21-6">cnot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-7">cnot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb21-8"></span>
<span id="cb21-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Perform the contraction ~ matrix multiplication</span></span>
<span id="cb21-10">U_tn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.contractors.greedy([cnot, x, y], output_edge_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[cnot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cnot[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]).tensor</span></code></pre></div>
</div>
<p>This way of contracting the edges corresponds to the following diagram:</p>
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/cnotxy.jpg" class="img-fluid"></p>
<p>Note that this is basically the original circuit with both the vertical and the horizontal directions reversed. The horizontal reversal is due to mathematical vs circuit notation (circuit is better!) and the vertical reversal is due to the mismatch between <code>qiskit</code> and <code>tensornetwork</code> ordering of tensor product (<code>tensornetwork</code>’s is better!). We can check that the unitary we obtain from this tensor network agrees with <code>qiskit</code>’s</p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">np.allclose(U_tn.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), U_qs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="a-better-way" class="level2">
<h2 class="anchored" data-anchor-id="a-better-way">A better way</h2>
<p>I find all this misalignment very inconvenient and hard to debug. Ideally I want to look at the quantum circuit and construct the corresponding tensor network just as I read a text: from left to right and from top to bottom. Here I propose a solution which seems much more satisfactory to me. We will deal with horizontal reversal by first defining edges and then applying gates to them. This way we can read the circuit from left to right and simply add new gates, just as in <code>qiskit</code>. I will not try to revert the vertical direction directly, because I find it hard to think upside down. Instead, for comparison with <code>qiskit</code> I will use a built-in <code>reverse_bits</code> method.</p>
<p>So let’s start by defining a function that applies a given gate to the collection of qubits (this is a slight modification of an <a href="https://tensornetwork.readthedocs.io/en/latest/quantum_circuit.html">example</a> from <code>tensornetwork</code> docs) :</p>
<div class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> apply_gate(qubits, gate_tensor, positions):</span>
<span id="cb24-2">    </span>
<span id="cb24-3">    gate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.Node(gate_tensor)</span>
<span id="cb24-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(gate.edges) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(positions), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gate size does not match positions provided.'</span></span>
<span id="cb24-5">    </span>
<span id="cb24-6"></span>
<span id="cb24-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i, p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(positions):</span>
<span id="cb24-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connect RIGHT legs of the gate to the active qubits</span></span>
<span id="cb24-9">        gate[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(positions)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span> qubits[p] </span>
<span id="cb24-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reassing active qubits to the corresponding LEFT legs of the gate </span></span>
<span id="cb24-11">        qubits[p] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gate[i]</span></code></pre></div>
</div>
<p>Importantly, here, in contrast to the official docs, we append the gate from the <em>left</em>, so that a sequence of application of some <img src="https://latex.codecogs.com/png.latex?G_1"> followed by <img src="https://latex.codecogs.com/png.latex?G_2"> is equivalent to the application of <img src="https://latex.codecogs.com/png.latex?G_2%5Ccdot%20G_1">. Now there is one more subtlety. Previously we used matrix representation of <img src="https://latex.codecogs.com/png.latex?CNOT"> assuming that the uppermost qubit comes last in the tensor product. Now that we decided to turn this convention upside down our matrix representation of <img src="https://latex.codecogs.com/png.latex?CNOT"> must be <img src="https://latex.codecogs.com/png.latex?CNOT%20=%7C0%5Crangle%5Clangle%200%7C%5Cotimes%20%5Cmathbb%7B1%7D+%7C1%5Crangle%5Clangle%201%7C%5Cotimes%20X"> or explicitly</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">CNOT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb25-2">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb25-3">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb25-4">                 [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<p>With that we are ready to reconstruct our original circuit in a convenient way:</p>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"></span>
<span id="cb26-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The context manager  `NodeCollection` is a bit of a magic trick</span></span>
<span id="cb26-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which keeps track of all tensors in the network automatically.</span></span>
<span id="cb26-4"></span>
<span id="cb26-5">all_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb26-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tn.NodeCollection(all_nodes): </span>
<span id="cb26-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I do not know how to create 'abstract' edges in `tensornetworks`.</span></span>
<span id="cb26-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Instead, I create an identity tensor and use its edges to apply new gates to.</span></span>
<span id="cb26-9">    id0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.Node(np.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb26-10">    qubits0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id0.edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb26-11">    qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id0.edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb26-12"></span>
<span id="cb26-13">    apply_gate(qubits, X, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb26-14">    apply_gate(qubits, Y, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb26-15">    apply_gate(qubits, CNOT, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span></code></pre></div>
</div>
<p>Now let us check!</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">U_tn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.contractors.greedy(all_nodes, output_edge_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>qubits0).tensor.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb27-2">U_reversed_qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc.reverse_bits()).data</span>
<span id="cb27-3"></span>
<span id="cb27-4">np.allclose(U_tn, U_reversed_qs)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>True</code></pre>
</div>
</div>
<p>Wohoo, it worked! If that looked simple to you I’m happy. It took me several hours of debugging to finally match the two matrices. Just to make sure, let me conclude with a more complicated example.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">qc3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb29-2">qc3.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb29-3">qc3.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-4">qc3.y(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-5">qc3.x(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb29-6">qc3.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-7">qc3.y(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb29-8"></span>
<span id="cb29-9">qc3.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<p><img src="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-Matrix representation of quantum circuits_files/figure-html/cell-22-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>As you can see, constructing the tensor network analog now works more or less identically:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">all_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> tn.NodeCollection(all_nodes):</span>
<span id="cb30-3">    id0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.Node(np.identity(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb30-4">    qubits0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id0.edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span>
<span id="cb30-5">    qubits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id0.edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb30-6">    </span>
<span id="cb30-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The essential part</span></span>
<span id="cb30-8">    apply_gate(qubits, X, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb30-9">    apply_gate(qubits, CNOT, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-10">    apply_gate(qubits, Y, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-11">    apply_gate(qubits, X, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb30-12">    apply_gate(qubits, CNOT, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb30-13">    apply_gate(qubits, Y, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span></code></pre></div>
</div>
<p>And now we compare:</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">U3_tn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tn.contractors.greedy(all_nodes, output_edge_order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>qubits0).tensor.reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb31-2">U3_qs_reversed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Operator(qc3.reverse_bits()).data</span>
<span id="cb31-3"></span>
<span id="cb31-4">np.allclose(U3_tn, U3_qs_reversed)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>True</code></pre>
</div>
</div>
<p>Alright, this resounding <strong>True</strong> is the best way to conclude that comes to mind. I own many thanks to <a href="https://github.com/LuchnikovI">Ilia Luchnikov</a> for the help with <code>tensornetwork</code> library. Any questions are welcome in the comments!</p>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>qiskit</category>
  <category>tensor networks</category>
  <category>quantum concepts</category>
  <guid>https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/2021-08-18-matrix representation of quantum circuits.html</guid>
  <pubDate>Tue, 17 Aug 2021 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/matrix_representation_of_quantum_circuits/upsidedown.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Machine learning compilation of quantum circuits</title>
  <link>https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-machine learning compilation of quantum circuits.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I am going to review a recent <a href="http://arxiv.org/abs/2106.05649">preprint</a> by Liam Madden and Andrea Simonetto that uses techniques from machine learning to tackle the problem of quantum circuits compilation. I find the approach suggested in the paper very interesting and the preliminary results quite promising.</p>
<section id="what-is-compilation" class="level2">
<h2 class="anchored" data-anchor-id="what-is-compilation">What is compilation?</h2>
<blockquote class="blockquote">
<p>Note that a variety of terms are floating around the literature and used more or less interchangibly. Among those are <strong>synthesis</strong>, <strong>compilation</strong>, <strong>transpilation</strong> and <strong>decomposition</strong> of quantum circuits. I will not make a distinction and try to stick to <strong>compilation</strong>.</p>
</blockquote>
<p>But first things first, what is a compilation of a quantum circuit? The best motivation and illustration for the problem is the following. Say you need to run a textbook quantum circuit on a real hardware. The real hardware usually allows only for a few basic one and two qubit gates. In contrast, your typical textbook quantum circuit may feature (1) complex many-qubit gates, for example multi-controlled gates and (2) one and two qubit gates which are not supported by the hardware. As a simple example take this 3-qubit Grover’s circuit (from <a href="https://qiskit.org/textbook/ch-algorithms/grover.html">qiskit textbook</a>):</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#initialization</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing Qiskit</span></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IBMQ, Aer, assemble, transpile</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit, ClassicalRegister, QuantumRegister</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.providers.ibmq <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> least_busy</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># import basic plot tools</span></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.visualization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_histogram</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> initialize_s(qc, qubits):</span>
<span id="cb1-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Apply a H-gate to 'qubits' in qc"""</span></span>
<span id="cb1-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> q <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> qubits:</span>
<span id="cb1-16">        qc.h(q)</span>
<span id="cb1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> qc</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> diffuser(nqubits):</span>
<span id="cb1-20">    qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(nqubits)</span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformation |s&gt; -&gt; |00..0&gt; (H-gates)</span></span>
<span id="cb1-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> qubit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nqubits):</span>
<span id="cb1-23">        qc.h(qubit)</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformation |00..0&gt; -&gt; |11..1&gt; (X-gates)</span></span>
<span id="cb1-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> qubit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nqubits):</span>
<span id="cb1-26">        qc.x(qubit)</span>
<span id="cb1-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do multi-controlled-Z gate</span></span>
<span id="cb1-28">    qc.h(nqubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-29">    qc.mct(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nqubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), nqubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multi-controlled-toffoli</span></span>
<span id="cb1-30">    qc.h(nqubits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformation |11..1&gt; -&gt; |00..0&gt;</span></span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> qubit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nqubits):</span>
<span id="cb1-33">        qc.x(qubit)</span>
<span id="cb1-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Apply transformation |00..0&gt; -&gt; |s&gt;</span></span>
<span id="cb1-35">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> qubit <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(nqubits):</span>
<span id="cb1-36">        qc.h(qubit)</span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We will return the diffuser as a gate</span></span>
<span id="cb1-38">    U_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_gate()</span>
<span id="cb1-39">    U_s.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U$_s$"</span></span>
<span id="cb1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> U_s</span>
<span id="cb1-41"></span>
<span id="cb1-42">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb1-43">qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-44">qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-45">oracle_ex3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qc.to_gate()</span>
<span id="cb1-46">oracle_ex3.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"U$_\omega$"</span></span>
<span id="cb1-47"></span>
<span id="cb1-48">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-49">grover_circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(n)</span>
<span id="cb1-50">grover_circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> initialize_s(grover_circuit, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-51">grover_circuit.append(oracle_ex3, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-52">grover_circuit.append(diffuser(n), [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb1-53">grover_circuit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grover_circuit.decompose()</span>
<span id="cb1-54">grover_circuit.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="1">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The three qubit gates like Toffoli are not generally available on a hardware and one and two qubit gates my be different from those in the textbook algorithm. For example ion quantum computers are good with <a href="https://en.wikipedia.org/wiki/M%C3%B8lmer%E2%80%93S%C3%B8rensen_gate">Mølmer–Sørensen gates</a> and may need several native one qubit gates to implement the Hadamard gate.</p>
<p>Additional important problem is to take into account qubit connectivity. Usually textbook algorithms assume full connectivity, meaning that two-qubit gates can act on any pair of qubits. On most hardware platforms however a qubit can only interact with its neighbors. Assuming that one and two qubits gates available on the hardware can implement a SWAP gate between adjacent qubits, to solve the connectivity problem one can insert as many SWAPs as necessary to connect topologically disjoint qubits. Using SWAPs however leads to a huge overhead in the number of total gates in the compiled circuit, and it is of much importance use them as economically as possible. In fact, the problem of optimal SWAPping alone in generic situation is <a href="https://scholar.google.com/scholar?hl=en&amp;as_sdt=0%2C5&amp;q=on+the+complexity+of+quantum+circuit+compilation&amp;btnG=">NP-complete</a>.</p>
</section>
<section id="simplified-problem" class="level2">
<h2 class="anchored" data-anchor-id="simplified-problem">Simplified problem</h2>
<p>When compiling a quantum circuit one has to decide which resulting circuits are considered to be efficient. Ideally, one should optimize for the total fidelity of the circuit. Let us imagine running the algorithm on a real device. Probably my theorist’s image of a real device is still way too platonic, but I will try my best. Many details need to be taken into account. For example, gates acting on different qubits or pairs of qubits may have different fidelities. Decoherence of qubits with time can make circuits where many operations can be executed in parallel more favorable. Cross-talk (unwanted interactions) between neighboring qubits may lead to exotic patterns for optimal circuits. A simple proxy for the resulting fidelity that is often adopted is the number of two-qubit gates (which are generically much less accurate than a single-qubit gates). So the problem that is often studied, and that is addressed in the preprint we are going to discuss, is the problem of optimal compilation into a gate set consisting of arbitrary single-qubit gates and CNOTs, the only two qubits gate. The compiled circuit must</p>
<ol type="1">
<li>Respect hardware connectivity.</li>
<li>Have as few CNOTs as possible.</li>
<li>Exceed a given fidelity threshold.</li>
</ol>
<p>Last item here means that we also allow for an approximate compilation. By increasing the number of CNOTs one can always achieve an exact compilation, but since in reality each additional CNOT comes with its own fidelity cost this might not be a good trade-off. Note also that a specific choice for two-qubit gate is made, a CNOT gate. Any two-qubit gate can be decomposed into at most 3 CNOTs <a href="https://arxiv.org/pdf/quant-ph/0308006.pdf">see e.g.&nbsp;here</a>, so in terms of computational complexity this is of course inconsequential. However in the following discussion we will care a lot about constant factors and may wish to revisit this choice at the end.</p>
</section>
<section id="existing-results" class="level2">
<h2 class="anchored" data-anchor-id="existing-results">Existing results</h2>
<p>Since finding the exact optimal solution to the compilation problem is intractable, as with many things in life one needs to resort to heuristic methods. A combination of many heuristic methods, in fact. As an example one can check out the <a href="https://qiskit.org/documentation/apidoc/transpiler.html">transpilation workflow</a> in <code>qiskit</code>. Among others, there is a step that compiles &gt;2 qubit gates into one and two qubit gates; the one that tries to find a good initial placement of the logical qubits onto physical hardware; the one that ‘routes’ the desired circuit to match a given topology being as greedy on SWAPs as possible. Each of these steps can use several different heuristic optimization algorithms, which are continuously refined and extended (for example this <a href="https://arxiv.org/abs/2106.06446">recent preprint</a> improves on the default rounting procedure in <code>qiskit</code>). In my opinion it would be waay better to have one unified heuristic for all steps of the process, especially taking into account that they are not completely independent. Although this might be too much to ask for, some advances are definitely possible and machine learning tools might prove very useful. The paper we are going to discuss is an excellent demonstration.</p>
</section>
<section id="theoretical-lower-bound-and-quantum-shannon-decomposition" class="level2">
<h2 class="anchored" data-anchor-id="theoretical-lower-bound-and-quantum-shannon-decomposition">Theoretical lower bound and quantum Shannon decomposition</h2>
<p>There is a couple of very nice theoretical results about the compilation problem that I need to mention. But first, let us agree that we will compile unitaries, not circuits. What is the difference? Of course, any quantum circuit (without measurements and neglecting losses) corresponds to a unitary matrix. However, to compute that unitary matrix for a large quantum circuit explicitly is generally an intractable problem, precisely for the same reasons that quantum computation is assumed to be more powerful than classical. Still, taking as the input a unitary matrix (which is in general hard to compute from the circuit) is very useful both theoretically and practically. I will discuss pros and cons of this approach later on.</p>
<p>OK, now the fun fact. Generically, one needs at least this many CNOTs</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AL:=%5C#%20%5Ctext%7BCNOTs%7D%20%5Cgeq%20%5Cfrac14%5Cleft(4%5En-3n-1%5Cright)%20%5Clabel%7BTLB%7D%0A%5Cend%7Balign%7D"></p>
<p>to exactly compile an <img src="https://latex.codecogs.com/png.latex?n">-qubit unitary. ‘Generically’ means that the set of <img src="https://latex.codecogs.com/png.latex?n">-qubit unitaries that can be compiled exactly with smaller amount of CNOTs has measure zero. Keep in mind though, that there are important unitaries in this class like multi-controlled gates or qubit permutations. We will discuss compilation of some gates from the ‘measure-zero’ later on.</p>
<p>The authors of the preprint (I hope you and me still remember that there is some actual results to discuss, not just my overly long introduction to read) refer to <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BTLB%7D"> as the theoretical lower bound or TLB for short. The proof of this <a href="https://dl.acm.org/doi/10.5555/968879.969163">fact</a> is actually rather simple and I will sketch it. A general <img src="https://latex.codecogs.com/png.latex?d%5Ctimes%20d"> unitary has <img src="https://latex.codecogs.com/png.latex?d%5E2"> real parameters. For <img src="https://latex.codecogs.com/png.latex?n"> qubits <img src="https://latex.codecogs.com/png.latex?d=2%5En">. Single one-qubit gate has 3 real parameters. Any sequence of one-qubit gates applied to the same qubit can be reduced to a single one-qubit gate and hence can have no more than 3 parameters. That means, that without CNOTs we can only have 3n parameters in our circuit, 3 for each one-qubit gate. This is definitely not enough to describe an arbitrary unitary on <img src="https://latex.codecogs.com/png.latex?n"> qubits which has <img src="https://latex.codecogs.com/png.latex?d%5E2=4%5En"> parameters.</p>
<p>Now, adding a single CNOT allows to insert two more 1-qubit unitaries after it, like that</p>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.circuit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Parameter</span>
<span id="cb2-2"></span>
<span id="cb2-3">a1, a2, a3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a3'</span>]]</span>
<span id="cb2-4">b1, b2, b3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b2'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b3'</span>]]</span>
<span id="cb2-5"></span>
<span id="cb2-6">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-7">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-8">qc.u(a1, a2, a3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)              </span>
<span id="cb2-9">qc.u(b1, b2, b3, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-10">              </span>
<span id="cb2-11">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>At the first glance this allows to add 6 more parameters. However, each single-qubit unitary can be represented via the Euler angles as a product of only <img src="https://latex.codecogs.com/png.latex?R_z"> and <img src="https://latex.codecogs.com/png.latex?R_x"> rotations either as <img src="https://latex.codecogs.com/png.latex?U=R_z%20R_x%20R_z"> or <img src="https://latex.codecogs.com/png.latex?U=R_x%20R_y%20R_z"> (I do not specify angles). Now, CNOT can be represented as <img src="https://latex.codecogs.com/png.latex?CNOT=%7C0%5Crangle%5Clangle%200%7C%5Cotimes%20I+%7C1%5Crangle%5Clangle%201%7C%5Cotimes%20X">. It follows that <img src="https://latex.codecogs.com/png.latex?R_z"> commutes with the control of CNOT and <img src="https://latex.codecogs.com/png.latex?R_x"> commutes with the target of CNOT, hence they can be dragged to the left and joined with preceding one-qubit gates. So in fact each new CNOT gate allows to add only 4 real parameters:</p>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">a1, a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a2'</span>]]</span>
<span id="cb3-2">b1, b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b2'</span>]]</span>
<span id="cb3-3"></span>
<span id="cb3-4">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-6">qc.rx(a1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)              </span>
<span id="cb3-7">qc.rz(a2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-8">qc.rz(b1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-9">qc.rx(b2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-10">              </span>
<span id="cb3-11">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="12">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>That’s it, there are no more caveats. Thus, the total number of parameters we can get with <img src="https://latex.codecogs.com/png.latex?L"> CNOTs is <img src="https://latex.codecogs.com/png.latex?3n+4L"> and we need to describe a <img src="https://latex.codecogs.com/png.latex?d%5Ctimes%20d"> unitary which has <img src="https://latex.codecogs.com/png.latex?4%5En"> parameters. In fact, the global phase of the unitary is irrelevant so we only need <img src="https://latex.codecogs.com/png.latex?3n+4L%20%5Cgeq%204%5En-1">. Solving for <img src="https://latex.codecogs.com/png.latex?L"> gives the TLB <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BTLB%7D">. That’s pretty cool, isn’t it?</p>
<p>Now there is an algorithm, called <em>quantum Shannon decomposition</em> (see <a href="https://arxiv.org/abs/quant-ph/0406176">ref</a>), which gives an exact compilation of any unitary with the number of CNOTs twice as much as the TLB requires. In complexity-theoretic terms an overall factor of two is of course inessential, but for current NISQ devices we want to get as efficient as possible. Moreover, to my understanding the quantum Shannon decomposition is not easily extendable to restricted topology while inefficient generalizations lead to a much bigger overhead (roughly an order of magnitude).</p>
</section>
</section>
<section id="whats-in-the-preprint" class="level1">
<h1>What’s in the preprint?</h1>
<section id="templates" class="level2">
<h2 class="anchored" data-anchor-id="templates">Templates</h2>
<p>I’ve already wrote an introduction way longer than intended so from now on I will try to be brief and to the point. The authors of the preprint propose two templates inspired by the quantum Shannon decomposition. The building block for each template is a ‘CNOT unit’</p>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">a1, a2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(a) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a2'</span>]]</span>
<span id="cb4-2">b1, b2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [Parameter(b) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b1'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b2'</span>]]</span>
<span id="cb4-3"></span>
<span id="cb4-4">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-5">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-6">qc.ry(a1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)              </span>
<span id="cb4-7">qc.rz(a2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-8">qc.ry(b1, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-9">qc.rx(b2, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-10">              </span>
<span id="cb4-11">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="13">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>First template is called <strong>sequ</strong> in the paper and is obtained as follows. There are <img src="https://latex.codecogs.com/png.latex?n(n-1)/2"> different CNOTs on <img src="https://latex.codecogs.com/png.latex?n">-qubit gates. We enumerate them somehow and simply stack sequentially. Here is a 3-qubut example with two layers (I use <code>qiskit</code> gates <code>cz</code> instead of our ‘CNOT units’ for the ease of graphical representation)</p>
<div class="cell" data-execution_count="24">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb5-3">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-4">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-5">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-6">    qc.barrier()</span>
<span id="cb5-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="24">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-6-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The second template is called <strong>spin</strong> and for 4 qubits looks as follows</p>
<div class="cell" data-execution_count="25">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb6-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb6-3">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-4">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-5">    qc.cz(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-6">    qc.barrier()</span>
<span id="cb6-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="25">
<p><img src="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-Machine learning compilation of quantum circuits_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>I’m sure you get the idea. That’s it! The templates fix the pattern of CNOTs while angles of single-qubit gates are adjustable parameters which are collectively denoted by <img src="https://latex.codecogs.com/png.latex?%5Ctheta">.</p>
<p>The idea now is simple. Try to optimize these parameters to achieve the highest possible fidelity for a given target unitary to compile. I am not at all an expert on the optimization methods, so I might miss many subtleties, but on the surface the problem looks rather straightforward. You can choose your favorite flavor of the gradient descent and hope for convergence. The problem appears to be non-convex but the gradient descent seems to work well in practice. One technical point that I do not fully understand is that the authors choose to work with fidelity defined by the Frobenius norm <img src="https://latex.codecogs.com/png.latex?%7C%7CU-V%7C%7C_F%5E2"> which is sensitive to the global phase of each unitary. To my understanding they often find that local minima of this fidelity coincides with the global minimum up to a global phase. OK, so in the rest of the post I refer to the ‘gradient descent’ as the magic numerical method which does good job of finding physically sound minimums.</p>
</section>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<section id="compiling-random-unitaries" class="level3">
<h3 class="anchored" data-anchor-id="compiling-random-unitaries">Compiling random unitaries</h3>
<p>OK, finally, for the surprising results. The authors find experimentally that both <strong>sequ</strong> and <strong>spin</strong> perform surprisingly well on random unitaries always coming very close to the TLB <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BTLB%7D"> with good fidelity. More precisely, the tests proceed as follows. First, one generates a random unitary. Next, for each number <img src="https://latex.codecogs.com/png.latex?L"> of CNOTs below the TLB one runs the gradient descent to see how much fidelity can be achieved with this amount of CNOTs. Finally, one plots the fidelity as a function of <img src="https://latex.codecogs.com/png.latex?L">. Impressively, on the sample of hundred unitaries the fidelity always approaches 100% when the number of CNOTs reaches the TLB. For the <img src="https://latex.codecogs.com/png.latex?n=3"> qubits TLB is <img src="https://latex.codecogs.com/png.latex?L=14">, for <img src="https://latex.codecogs.com/png.latex?n=5"> <img src="https://latex.codecogs.com/png.latex?L=252"> (these are the two cases studied). So, in all cases studied, the gradient descent lead by the provided templates seems to always find the optimal compilation circuit! Recall that this is two times better than quantum Shannon decomposition. Please see the original paper for nice plots that I do not reproduce here.</p>
</section>
<section id="compiling-on-restricted-topology" class="level3">
<h3 class="anchored" data-anchor-id="compiling-on-restricted-topology">Compiling on restricted topology</h3>
<p>These tests were performed on the fully connected circuits. The next remarkable discovery is that restricting the connectivity does not to seem to harm the performance of the compilation! More precisely, the authors considered two restricted topologies in the paper, ‘star’ where all qubits are connected to single central one and ‘line’ where well, they are connected by links on a line. The <strong>spin</strong> template can not be applied to star topology, but it can be applied to line topology. The <strong>sequ</strong> template can be generalized to any topology by simply omitting CNOTs that are not allowed. Again, as examining a hundred of random unitaries on <img src="https://latex.codecogs.com/png.latex?n=3"> and <img src="https://latex.codecogs.com/png.latex?n=5"> qubits shows, the fidelity nearing 100% can be achieved right at the TLB in all cases, which hints that topology restriction may not be a problem in this approach at all! To appreciate the achievement, imagine decomposing each unitary via the quantum Shannon decomposition and then routing on restricted topology with swarms of SWAPs, a terrifying picture indeed. It would be interesting to compare the results against the performance of <code>qiskit</code> transpiler which is unfortunately not done in the paper to my understanding.</p>
</section>
<section id="compiling-specific-measure-zero-gates" class="level3">
<h3 class="anchored" data-anchor-id="compiling-specific-measure-zero-gates">Compiling specific ‘measure zero’ gates</h3>
<p>Some important multi-qubit gates fall into the ‘measure zero’ set which can be compiled with a smaller amount of CNOTs than is implied by the TLB <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7BTLB%7D">. For example, 4-qubit Toffoli gate can be compiled with 14 CNOTs while the TLB requires 61 gates. Numerical tests show that the plain version of the algorithm presented above does not generically obtain the optimal compilation for special gates. However, with some tweaking and increasing the amount of attempts the authors were able to find optimal decompositions for a number of known gates such as 3- and 4-qubit Toffoli, 3-qubit Fredkin and 1-bit full adder on 4 qubits. The tweaking included randomly changing the orientation of some CNOTs (note that in both <strong>sequ</strong> and <strong>spin</strong> the control qubit is always at the top) and running many optimization cycles with random initial conditions. The best performing method appeared to be <strong>sequ</strong> with random flips of CNOTs. The whole strategy might look a bit fishy, but I would argue that it is not. My argument is simple: you only need to find a good compilation of the 4-qubit Toffoli <em>once</em>. After that you pat yourself on the back and use the result in all your algorithms. So it does not really matter how hard it was to find the compilation as long as you did not forget to write it down.</p>
</section>
<section id="compressing-the-quantum-shannon-decomposition" class="level3">
<h3 class="anchored" data-anchor-id="compressing-the-quantum-shannon-decomposition">Compressing the quantum Shannon decomposition</h3>
<p>Finally, as a new twist on the plot the authors propose a method to compress the standard quantum Shannon decomposition (which is twice the TLB, remember?). The idea seems simple and works surprisingly well. The algorithm works as follows. 1. Compile a unitary exactly using the quantum Shannon decomposition. 1. Promote parameters in single-qubit gates variables (they have fixed values in quantum Shannon decomposition). 2. Add [LASSO](https://en.wikipedia.org/wiki/Lasso_(statistics)-type regularization term, which forces one-qubit gates to have small parameters, ideally zero (which makes the corresponding gates into identities). 3. Run a gradient descent on the regularized cost function (fidelity+LASSO term). Some one-qubit gates will become identity after that (one might need to tune the regularization parameter here). 4. After eliminating identity one-qubit gates one can end up in the situation where there is a bunch of CNOTs with no single-qubit gates in between. There are efficient algorithms for reducing the amount of CNOTs in this case.<br>
5. Recall that the fidelity was compromised by adding regularization terms. Run the gradient descent once more, this time without regularization, to squeeze out these last percents of fidelity.</p>
<p>From the description of this algorithm it does not appear obvious that the required cancellations (elimination of single-qubit gates and cancellations in resulting CNOT clusters) is bound to happen, but the experimental tests show that they do. Again, from a bunch of random unitaries it seems that the <img src="https://latex.codecogs.com/png.latex?%5Ctimes%202"> reduction to the TLB is almost sure to happen! Please see the preprint for plots.</p>
</section>
</section>
<section id="weak-spots" class="level2">
<h2 class="anchored" data-anchor-id="weak-spots">Weak spots</h2>
<p>Although I find results of the paper largely impressive, a couple of weak spots deserve a mention. ### Limited scope of experiments The numerical experiments were only carried out for <img src="https://latex.codecogs.com/png.latex?n=3"> and <img src="https://latex.codecogs.com/png.latex?n=5"> qubits which of course is not much. To see if the method keeps working as the number of qubits is scaled is sure very important. There may be two promblems. First, the templates can fail to be expressive enough for larger circuits. The authors hope to attack this problem from the theoretical side and show that the templates do fill the space of unitaries. Well, best of luck with that! Another potential problem is that although the templates work fine for higher <img src="https://latex.codecogs.com/png.latex?n">, the learning part might become way more challenging. Well, I guess we should wait and see. ### Unitary as the input As I discussed somewhere way above, for a realistic quantum computation we can not know the unitary matrix that we need to compile. If we did, there would no need in the quantum computer in the first place. I can make two objects here. First, we are still in the NISQ era and pushing the existing quantum computers to their edge is a very important task. Even if an algorithm can be simulated classically, running it on a real device might be invaluable. Second, even quantum circuits on 1000 qubits do not usually feature 100-qubit unitaries. So it could be possible to separate a realistic quantum circuit into pieces, each containing only a few qubits, and compile them separately.</p>
</section>
</section>
<section id="final-remarks" class="level1">
<h1>Final remarks</h1>
<p>To me, the algorithms presented in the preprint seem to be refreshingly efficient and universal. At some level it appears to be irrelevant which exact template do we use. Near the theoretical lower bound they all perform similarly well, even on restricted topology. This might be a justification for choosing CNOT as the two-qubit gate, as this probably does not matter in the end! I’m really cheering for a universal algorithm like that to win the compilation challenge over a complicated web of isolated heuristics, which are currently state of the art.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>machine learning</category>
  <category>compilation</category>
  <category>qiskit</category>
  <category>paper review</category>
  <guid>https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/2021-07-22-machine learning compilation of quantum circuits.html</guid>
  <pubDate>Wed, 21 Jul 2021 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/machine_learning_compilation_of_qunatum_circuits/grovercirc.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>What is entanglement?</title>
  <link>https://idnm.github.io/blog/posts/entanglement/2021-07-12-entanglement.html</link>
  <description><![CDATA[ 




<p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/entanglement/2021-07-12-Entanglement.ipynb"> <img src="https://idnm.github.io/blog/posts/entanglement/https:/colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab" align="right"></a></p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/entanglement/2021-07-12-Entanglement.ipynb">
</a><p><a target="_blank" href="https://colab.research.google.com/github/idnm/blog/blob/master/posts/entanglement/2021-07-12-Entanglement.ipynb"></a></p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I’ve known the formal definition of entanglement for years, but I am only now appreciating many of its profound implications. In this post I would like to share two aspects that put entangled states into sharp contrast with unentangled (separable pure) states and classical random variables. Instead of proofs I provide references and simple experiments in <code>qiskit</code>.</p>
<center>
<img src="https://idnm.github.io/blog/posts/entanglement/entangled_spins.svg" alt="Drawing" style="width: 300px;">
</center>
</section>
<section id="entanglement-is-the-failure-of-states-to-factorize" class="level1">
<h1>Entanglement is the failure of states to factorize</h1>
<p>So what is entanglement? Entanglement is what entangled states have. What are those? Take two spins. The state</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5CBig(%7C%5Cuparrow%5Cuparrow%5Crangle+%7C%5Cdownarrow%5Cdownarrow%5Crangle%5CBig)%20%5Clabel%7Bbell%7D%0A%5Cend%7Balign%7D"> is your canonical example of an entangled stated. In contrast, all the states below are <em>unentangled</em> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C%5Cuparrow%5Cuparrow%5Crangle,%5Cqquad%20%7C%5Cdownarrow%5Cuparrow%5Crangle,%5Cqquad%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%7C%5Cuparrow%5Crangle%5CBig(%7C%5Cuparrow%5Crangle-%7C%5Cdownarrow%5Crangle%5CBig),%5Cqquad%20%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5CBig(%7C%5Cuparrow%5Crangle-%7C%5Cdownarrow%5Crangle%5CBig)%5CBig(%7C%5Cuparrow%5Crangle+%7C%5Cdownarrow%5Crangle%5CBig)%20%20%5Clabel%7Bunen%7D%0A%5Cend%7Balign%7D"></p>
<p>The difference between <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bunen%7D"> is the following. All latter states are actually <em>products</em> of the form <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_1%5Crangle%20%7C%5Cpsi_2%5Crangle"> where <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_1%5Crangle"> is the state of the first system and <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi_2%5Crangle"> of the second. In contrast, state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> <em>can not</em> be represented in as a product. It is instead a linear combination of factorized states which is not reducible to a single product. You can <em>define</em> entangled states by this property of not being factorizible into states of consistuent spins.</p>
<p>Now that we know what entangled states are it is perfectly reasonable to ask: “<em>so what?</em>”. Why are entangled states special? I am going to give two angles on this questions, out of many possible.</p>
<hr>
<p>Note for the sake of concreteness and simplicity I talk about “spins”. In the context of discrete-variable quantum computation “spin”<img src="https://latex.codecogs.com/png.latex?%5Cequiv">“qubit”, but I prefer spins, because they come with a useful geometrical intuition. The abstract <a href="https://en.wikipedia.org/wiki/Bloch_sphere">Bloch sphere</a> associated to a qubit describes an actual orientation of a spin in <img src="https://latex.codecogs.com/png.latex?3d"> space.</p>
</section>
<section id="entangled-spin-behaves-very-differently-from-unentangled" class="level1">
<h1>Entangled spin behaves very differently from unentangled</h1>
<p>A spin which is not entangled can always be described by a direction <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n"> along which it is pointing <img src="https://latex.codecogs.com/png.latex?%7C%5Cuparrow_%7B%5Cbf%20n%7D%5Crangle">. If one measures the component of the spin along this direction, the result is always <img src="https://latex.codecogs.com/png.latex?%5Cfrac12">. Such a measurement corresponds to a projector <img src="https://latex.codecogs.com/png.latex?P(%7B%5Cbf%20n%7D)=%7B%5Cbf%20n%7D%5Ccdot%20%7B%5Cbf%20%5Csigma%7D=n_x%20%5Csigma_x+n_y%5Csigma_y+n_z%5Csigma_z">. If state <img src="https://latex.codecogs.com/png.latex?%7C%5Cuparrow_%7B%5Cbf%20n%7D%5Crangle"> is measured along a different axis <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n'"> the result depends on the angle <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> between <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n"> and <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n'">. With probability <img src="https://latex.codecogs.com/png.latex?%5Ccos%5E2%5Cfrac%5Ctheta2"> one gets projection <img src="https://latex.codecogs.com/png.latex?+%5Cfrac12"> and with probability <img src="https://latex.codecogs.com/png.latex?%5Csin%5E2%5Cfrac%5Ctheta2"> one gets <img src="https://latex.codecogs.com/png.latex?-%5Cfrac12">. However, for <strong>any</strong> state of the spin <img src="https://latex.codecogs.com/png.latex?%7C%5Cpsi%5Crangle"> <strong>there is</strong> an axis <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n">, such that measuring the spin along this axis gives <img src="https://latex.codecogs.com/png.latex?%5Cfrac12"> with <strong>probability one</strong>.</p>
<p>This is also true for any of the unentangled states <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bunen%7D">. For example, measuring the projection of the first spin in the state <img src="https://latex.codecogs.com/png.latex?%7C%5Cuparrow%5Cuparrow%5Crangle%5Cequiv%20%7C%5Cuparrow_%7B%5Cbf%20z%7D%5Cuparrow_%7B%5Cbf%20z%7D%5Crangle"> along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z"> always gives <img src="https://latex.codecogs.com/png.latex?+%5Cfrac12">. As another example, since <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%7C%5Cdownarrow_%7B%5Cbf%20x%7D%5Crangle=%5Cfrac12%5CBig(%7C%5Cuparrow_%7B%5Cbf%20z%7D%5Crangle-%7C%5Cdownarrow_%7B%5Cbf%20z%7D%5Crangle%5CBig)%20%5Clabel%7Bxdown%7D%0A%5Cend%7Balign%7D"> the state <img src="https://latex.codecogs.com/png.latex?%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5CBig(%7C%5Cuparrow%5Crangle-%7C%5Cdownarrow%5Crangle%5CBig)%5CBig(%5Cuparrow%5Crangle+%7C%5Cdownarrow%5Crangle%5CBig)"> always registers <img src="https://latex.codecogs.com/png.latex?-%5Cfrac12"> when the projection of the first spin along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20x"> axis is measured.</p>
<p>In contrast, for the maximally entangled state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> the axis with a definite projection of the first spin <strong>does not exist</strong>. In fact, for all intents and purposes, if you only look at observables associated with the first qubit, state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> behaves as a statistical ensemble of states <img src="https://latex.codecogs.com/png.latex?%7C%5Cuparrow%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?%7C%5Cdownarrow%5Crangle">, i.e.</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5CBig(%7C%5Cuparrow%5Cuparrow%5Crangle+%7C%5Cdownarrow%5Cdownarrow%5Crangle%5CBig)%5Capprox%20%5Ccases%7B%7C%5Cuparrow%5Crangle%20%5Ctext%7B%20with%20probability%20$%5Cfrac12$%7D%5C%5C%20%7C%5Cdownarrow%5Crangle%20%5Ctext%7B%20with%20probability%20$%5Cfrac12$%7D%7D%20%5Clabel%7Bbellapprox%7D%0A%5Cend%7Balign%7D"></p>
<p>This means, for example, that projection onto <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z"> axis of the first spin is <em>completely</em> random: with probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac12"> it behaves as <img src="https://latex.codecogs.com/png.latex?%7C%5Cuparrow%5Crangle"> and gives projection <img src="https://latex.codecogs.com/png.latex?+%5Cfrac12">, with probability <img src="https://latex.codecogs.com/png.latex?%5Cfrac12"> it behaves as <img src="https://latex.codecogs.com/png.latex?%7C%5Cdownarrow%5Crangle"> and gives projection <img src="https://latex.codecogs.com/png.latex?-%5Cfrac12">. This is different from a coherent superposition of the up and down states, such as <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bxdown%7D">. Although state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bxdown%7D"> gives random results when measured along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z">, it gives certain results when measured along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20x">. There is no such axis for state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbellapprox%7D">. In fact, the spin projection along <em>any</em> axis is completely random.</p>
<p>To prove this fact I would need to go into some details of how one does construct an ensemble from an entangled state. This is not at all difficult but I won’t do it here. I encourage an interested reader to consult John Preskill’s notes (<a href="http://www.theory.caltech.edu/~preskill/ph219/chap2_15.pdf">chapter 2.3</a>).</p>
<p>Instead, let me do a quick experimental check using <code>qiskit</code>. A Hadamard gate followed by a CNOT creates our state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D">:</p>
<div class="cell" data-scrolled="true" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QuantumCircuit, BasicAer, execute</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qiskit.visualization <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> plot_histogram</span>
<span id="cb1-3"></span>
<span id="cb1-4">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-5">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb1-6">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-7">qc.draw(output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mpl'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<p><img src="https://idnm.github.io/blog/posts/entanglement/2021-07-12-Entanglement_files/figure-html/cell-2-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>To my knowledge, one can only measure in the computational basis in <code>qiskit</code>, i.e.&nbsp;only along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z"> axis in our terminology. To measure a spin along some axis <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n"> we can instead rotate the spin itself, and then measure along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z"> axis. Mathematically, if <img src="https://latex.codecogs.com/png.latex?%7B%5Cbf%20n%7D%20=%20R%5E%7B-1%7D%20%7B%5Cbf%20z%7D"> for some rotation <img src="https://latex.codecogs.com/png.latex?R"> then <img src="https://latex.codecogs.com/png.latex?%5Clangle%20%5Cuparrow_%7B%5Cbf%20z%7D%7CP(%7B%5Cbf%20n%7D)%7C%20%5Cuparrow_%7B%5Cbf%20z%7D%5Crangle=%5Clangle%20%5Cuparrow_%7BR%7B%5Cbf%20z%7D%7D%7CP(%7B%5Cbf%20z%7D)%7C%20%5Cuparrow_%7BR%7B%5Cbf%20z%7D%7D%5Crangle">.</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># These parameters define an axis along which we will measure.</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Feel free to change them and see if the outcome distribution changes.</span></span>
<span id="cb2-3">theta, pi, lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.13</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37</span> </span>
<span id="cb2-4"></span>
<span id="cb2-5">qc.u(theta, pi, lam, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotate the qubit.</span></span>
<span id="cb2-6">qc.measure(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute on a simulator and plot a histogram of the result.</span></span>
<span id="cb2-9">backend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicAer.get_backend(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qasm_simulator'</span>)</span>
<span id="cb2-10">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> execute(qc, backend, shots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>).result()</span>
<span id="cb2-11">counts  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.get_counts(qc)</span>
<span id="cb2-12">plot_histogram(counts)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<p><img src="https://idnm.github.io/blog/posts/entanglement/2021-07-12-Entanglement_files/figure-html/cell-3-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The result looks like a fair sample from the uniform probability distribution. This means that projection on the axis we have specified is indeed random. You can try to change the axis and see if you can get a biased distribution (spoiler: you can not).</p>
</section>
<section id="entanglement-correlations-are-stronger-than-classical" class="level1">
<h1>Entanglement correlations are stronger than classical</h1>
<p>First let me note that although we talked about the first spin before, the state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> is symmetric and everything equally applies to the second spin. Although the behavior of each of these spins is completely random, there are strong correlations between the them. If we can make local measurements on both spins the state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D"> behaves as</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5Cfrac1%7B%5Csqrt%7B2%7D%7D%5CBig(%7C%5Cuparrow%5Cuparrow%5Crangle+%7C%5Cdownarrow%5Cdownarrow%5Crangle%5CBig)%5Capprox%20%5Ccases%7B%7C%5Cuparrow%5Cuparrow%5Crangle%20%5Ctext%7B%20with%20probability%20$%5Cfrac12$%7D%5C%5C%20%7C%5Cdownarrow%5Cdownarrow%5Crangle%20%5Ctext%7B%20with%20probability%20$%5Cfrac12$%7D%7D%20%5Clabel%7Bbellapprox2%7D%0A%5Cend%7Balign%7D"></p>
<p>So for example projections onto <img src="https://latex.codecogs.com/png.latex?%5Cbf%20z"> axis of both spins are <em>always</em> the same, although random. Again, this in fact holds for <em>any</em> axis. Here is an experimental verification.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Building Bell's state.</span></span>
<span id="cb3-2">qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-3">qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-4">qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Rotation of each qubit to simulate measurement along arbitary axis.</span></span>
<span id="cb3-7">theta, pi, lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.13</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.37</span> </span>
<span id="cb3-8"></span>
<span id="cb3-9">qc.u(theta, pi, lam, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-10">qc.u(theta, pi, lam, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-11">qc.measure([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Simulate and plot results.</span></span>
<span id="cb3-14">backend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicAer.get_backend(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qasm_simulator'</span>)</span>
<span id="cb3-15">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> execute(qc, backend, shots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span>).result()</span>
<span id="cb3-16">counts  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.get_counts(qc)</span>
<span id="cb3-17">plot_histogram(counts)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<p><img src="https://idnm.github.io/blog/posts/entanglement/2021-07-12-Entanglement_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>The result I get is almost certainly a uniform distribution of over <img src="https://latex.codecogs.com/png.latex?00=%7C%5Cuparrow_%7B%5Cbf%20n%7D%5Cuparrow_%7B%5Cbf%20n%7D%5Crangle"> and <img src="https://latex.codecogs.com/png.latex?11=%7C%5Cdownarrow_%7B%5Cbf%20n%7D%5Cdownarrow_%7B%5Cbf%20n%7D%5Crangle"> (you can change <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n"> by changing angles in the code), however I also get a tiny number of spurious counts for <img src="https://latex.codecogs.com/png.latex?01"> and <img src="https://latex.codecogs.com/png.latex?10">, which is probably a bug, hm.</p>
<p>When seeing this for the first time there is definitely something to contemplate, like say an <a href="https://en.wikipedia.org/wiki/EPR_paradox#:~:text=The%20Einstein%E2%80%93Podolsky%E2%80%93Rosen%20paradox,by%20quantum%20mechanics%20was%20incomplete.">EPR paradox</a>. Spoiler: it is not possible to use these correlations for superluminal transmission of information, but they are still a valuable resource. I will discuss just one manifestation of these quantum correlations which has a very concrete operational interpretation – it allows a quantum team to play a certain probabilistic game better than any classical team could! Note that this is also basically <a href="https://en.wikipedia.org/wiki/Bell%27s_theorem">Bell’s theorem</a> in disguise.</p>
<p>So here is the setup. Alice and Bob are playing together against Charlie. Charlie sends random uncorrelated bits <img src="https://latex.codecogs.com/png.latex?x"> to Alice and <img src="https://latex.codecogs.com/png.latex?y"> to Bob. Admittedly, Charlie’s job is not very creative and nothing in his strategy can be changed. Now, in response to the obtained bits Alice produces her output bit <img src="https://latex.codecogs.com/png.latex?a"> and Bob his <img src="https://latex.codecogs.com/png.latex?b">. Team A&amp;B wins if <img src="https://latex.codecogs.com/png.latex?a%5Coplus%20b=x%5Cland%20y"> where <img src="https://latex.codecogs.com/png.latex?%5Coplus"> is XOR (sum modulo 2) and <img src="https://latex.codecogs.com/png.latex?%5Cland"> is the logical AND. Explicitly, if <img src="https://latex.codecogs.com/png.latex?x%5Cland%20y=1"> both Alice and Bob got <img src="https://latex.codecogs.com/png.latex?x=y=1"> (which happens one quarter of the time) and they win iff they respond <img src="https://latex.codecogs.com/png.latex?a=0,%20b=1"> or <img src="https://latex.codecogs.com/png.latex?a=1,%20b=0"> so that <img src="https://latex.codecogs.com/png.latex?a%5Coplus%20b=1">. For all other inputs from Charlie, i.e.&nbsp;when <img src="https://latex.codecogs.com/png.latex?(x,y)"> is equal to <img src="https://latex.codecogs.com/png.latex?(0,0),%20(1,0)"> or <img src="https://latex.codecogs.com/png.latex?(0,1)"> the logical sum <img src="https://latex.codecogs.com/png.latex?x%5Cland%20y=0"> and Alice and Bob win iff <img src="https://latex.codecogs.com/png.latex?a=0,b=0"> or <img src="https://latex.codecogs.com/png.latex?a=1,%20b=1"> so that <img src="https://latex.codecogs.com/png.latex?a%5Coplus%20b=0">.</p>
<p>Now, although in the same team, Alice and Bob are not allowed to communicate during the game. But they can discuss their strategy in advance. The best that a classical team can do is to win <img src="https://latex.codecogs.com/png.latex?75%5C%25"> of the time. To achieve this winning rate it is sufficient to simply output <img src="https://latex.codecogs.com/png.latex?a=0,%20b=0"> irrespective of Charlie’s bits <img src="https://latex.codecogs.com/png.latex?x,y">. This strategy only loses when <img src="https://latex.codecogs.com/png.latex?x=y=1">, i.e.&nbsp;one quarter of the time.</p>
<p>Now comes the interesting part. If Alice and Bob each have a spin, and these spins are entangled as in state <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bbell%7D">, they can achieve the winning probability <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0AP_%7Bwin%7D=%20%5Cfrac12+%5Cfrac1%7B2%5Csqrt%7B2%7D%7D%5Capprox%200.85!%20%5Clabel%7Bpwin%7D%0A%5Cend%7Balign%7D"> So, what should they do?</p>
<p>Define four axes <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n_1,n_2,n_3,n_4"> in the <img src="https://latex.codecogs.com/png.latex?%5Cbf%20xz"> plane (of course this is just one of the possibilities). Take <img src="https://latex.codecogs.com/png.latex?%7B%5Cbf%20n_1%7D=%20(1,0)">, then <img src="https://latex.codecogs.com/png.latex?%7B%5Cbf%20n_2%7D=(%5Cfrac1%7B%5Csqrt%7B2%7D%7D,%5Cfrac1%7B%5Csqrt%7B2%7D%7D)"> is counter-clockwise rotated by <img src="https://latex.codecogs.com/png.latex?%5Cpi/4"> wrt to <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n_1">; <img src="https://latex.codecogs.com/png.latex?%7B%5Cbf%20n_3%7D=(0,1)"> is rotated by <img src="https://latex.codecogs.com/png.latex?%5Cpi/2">; and finally <img src="https://latex.codecogs.com/png.latex?%7B%5Cbf%20n_4%7D=(-%5Cfrac1%7B%5Csqrt%7B2%7D%7D,%5Cfrac1%7B%5Csqrt%7B2%7D%7D)"> is rotated by <img src="https://latex.codecogs.com/png.latex?3%5Cpi/4">.</p>
<center>
<img src="https://idnm.github.io/blog/posts/entanglement/axes.svg" alt="Drawing" style="width: 200px;">
</center>
<p>Now here is the strategy that Alice and Bob follow <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Aa(x)=%5Ccases%7BP_%7B%5Cbf%20n_3%7D,%20%5Cqquad%20x=0%20%5C%5CP_%7B%5Cbf%20n_1%7D,%20%5Cqquad%20x=1%7D%5Cqquad%5Cqquad%20b(y)=%5Ccases%7BP_%7B%5Cbf%20n_2%7D,%20%5Cqquad%20y=0%20%5C%5CP_%7B%5Cbf%20n_4%7D,%20%5Cqquad%20y=1%7D%20%5Clabel%7Babcases%7D%0A%5Cend%7Balign%7D"></p>
<p>Where <img src="https://latex.codecogs.com/png.latex?P_%7B%5Cbf%20n%7D=+1"> if Alice’s (or Bob’s) spin gave projection <img src="https://latex.codecogs.com/png.latex?+%5Cfrac12"> when measured along <img src="https://latex.codecogs.com/png.latex?%5Cbf%20n"> and <img src="https://latex.codecogs.com/png.latex?P_%7B%5Cbf%20n%7D=0"> if the projection was <img src="https://latex.codecogs.com/png.latex?-%5Cfrac12">. An example: if Alice recieves <img src="https://latex.codecogs.com/png.latex?x=0"> and Bob <img src="https://latex.codecogs.com/png.latex?y=1"> Alice measures her spin along <img src="https://latex.codecogs.com/png.latex?n_3=%5Cbf%20z"> axis and sends back the result, while Bob measures his spin along <img src="https://latex.codecogs.com/png.latex?%5Cbf%7Bn_4%7D"> (which is <img src="https://latex.codecogs.com/png.latex?3%5Cpi/4"> rotated <img src="https://latex.codecogs.com/png.latex?%5Cbf%20x"> axis) and sends his result.</p>
<p>Now, shall we check that this strategy indeed achieves the advertised winning probability <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bpwin%7D">? Sure, I also thought so!</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define rotation axes by their angles.</span></span>
<span id="cb4-4">theta1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-5">theta2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-6">theta3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-7">theta4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.pi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> charlie():</span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Charlies job is to generate two random bits.</span></span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> alice(x):</span>
<span id="cb4-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alice decides on the measurement axis according to her strategy.</span></span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta3</span>
<span id="cb4-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb4-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta1</span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bob(x):</span>
<span id="cb4-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bob does his part of the protocol.</span></span>
<span id="cb4-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta2</span>
<span id="cb4-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb4-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta4</span>
<span id="cb4-26">    </span>
<span id="cb4-27"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> one_round():</span>
<span id="cb4-28">    </span>
<span id="cb4-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First we prepare an entangled state.</span></span>
<span id="cb4-30">    qc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QuantumCircuit(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-31">    qc.h(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb4-32">    qc.cx(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-33">    </span>
<span id="cb4-34">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now Charlie generates his bits.</span></span>
<span id="cb4-35">    x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> charlie()</span>
<span id="cb4-36">    </span>
<span id="cb4-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A&amp;B team makes their move.</span></span>
<span id="cb4-38">    a_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alice(x)</span>
<span id="cb4-39">    b_angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bob(y)</span>
<span id="cb4-40">    </span>
<span id="cb4-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Again, we can not measure directly along the desired axes, </span></span>
<span id="cb4-42">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but must rotate the qubits instead. Rotation in the xz plane is made by `ry` gate.</span></span>
<span id="cb4-43">    qc.ry(a_angle, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Alice rotates her qubit.</span></span>
<span id="cb4-44">    qc.ry(b_angle, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bob his.</span></span>
<span id="cb4-45">    </span>
<span id="cb4-46">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now we add measurments and actually run the circuit.</span></span>
<span id="cb4-47">    qc.measure([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb4-48">    backend <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BasicAer.get_backend(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'qasm_simulator'</span>)</span>
<span id="cb4-49">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> execute(qc, backend, shots<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).result()</span>
<span id="cb4-50">    counts  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> result.get_counts(qc)</span>
<span id="cb4-51">    </span>
<span id="cb4-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output of counts is a dict like `{'01': 1}`. This extracts the measurment results:</span></span>
<span id="cb4-53">    a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(c) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(counts.keys())[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]</span>
<span id="cb4-54">    </span>
<span id="cb4-55">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And now we check, team A&amp;B gogogo!</span></span>
<span id="cb4-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y</span></code></pre></div>
</div>
<p>Alright, now let us collect the statistics:</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">num_rounds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2000</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">wins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_rounds):</span>
<span id="cb5-5">    wins <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> one_round()</span>
<span id="cb5-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span> (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Win probability:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(wins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>num_rounds))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Win probability:0.847</code></pre>
</div>
</div>
<p>So that’s pretty close to the theoretical value <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Bpwin%7D">. Note that for each round of the game a new entangled pair is needed.</p>
<p>Now that we have seen that the strategy <em>works</em> let us briefly discuss <em>why</em>. I will only give a sketch and refer for details to Preskill’s lectures <a href="http://theory.caltech.edu/~preskill/ph229/notes/chap4_01.pdf">chap 4.3</a>.</p>
<p>One thing Alice and Bob could do is to always measure along the same axes. Then, their results would be perfectly correlated (i.e.&nbsp;they always output <img src="https://latex.codecogs.com/png.latex?a=b=0"> or <img src="https://latex.codecogs.com/png.latex?a=b=1">) which gives 0.75 winning probability, the same as the best deterministic strategy. Now, in one quarter of cases (when <img src="https://latex.codecogs.com/png.latex?x=y=1">) they are better off outputting anticorrelated results. If we revisit the figure above equation <img src="https://latex.codecogs.com/png.latex?%5Ceqref%7Babcases%7D"> we see that the angle between <img src="https://latex.codecogs.com/png.latex?a(1)"> and <img src="https://latex.codecogs.com/png.latex?b(1)"> is <img src="https://latex.codecogs.com/png.latex?3%5Cpi/4"> which indeed gives a negative correlation in this case <img src="https://latex.codecogs.com/png.latex?%5CBig(%5Ccos%20%5Cfrac%7B3%5Cpi%7D%7B4%7D=-%5Cfrac%7B1%7D%7B%5Csqrt%7B2%7D%7D%5CBig)">. The price to pay is that angles between <img src="https://latex.codecogs.com/png.latex?%5CBig(a(0),b(0)%5CBig)">, <img src="https://latex.codecogs.com/png.latex?%5CBig(a(0),b(1)%5CBig)"> and <img src="https://latex.codecogs.com/png.latex?%5CBig(a(1),b(0)%5CBig)"> are now non-zero (and hence correlations are less than 1) which makes this strategy lose in some cases when the deterministic strategy wins. However, as we have seen experimentally the trade-off is still in our favor. It is also possible to prove that our choice of axes gives the maximum possible win probability. This is ultimately bound by Tsirelson’s bound, see below.</p>
<p>Now you might ask – what if there exists a clever randomized classical strategy which would perform better than deterministic 0.75 using a similar trick? Turns out this is not possible. The proof is based on the following inequality <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5CBig%7C%5Clangle%20a_0%20b_0%5Crangle+%5Clangle%20a_0%20b_1%5Crangle+%5Clangle%20a_1%20b_0%5Crangle-%5Clangle%20a_1%20b_1%5Crangle%5CBig%7C%5Cleq%202%0A%5Cend%7Balign%7D"> which holds for any random variables <img src="https://latex.codecogs.com/png.latex?a_0,%20a_1,%20b_0,%20b_1"> taking values <img src="https://latex.codecogs.com/png.latex?%5Cpm1"> and described by a joint probability distribution. This is known as <a href="https://en.wikipedia.org/wiki/CHSH_inequality">CHSH inequality</a> and a technical proof is trivial. Why quantum correlations do not have to obey the bound? Well, the reason is somewhat deep and quantum and ultimately related to Bohr’s <a href="https://en.wikipedia.org/wiki/Complementarity_(physics)">complementarity</a> – non-commuting observables can not be simultaneously assigned values. That this statement has quantitative consequences is illustrated by Bell’s theorem or our game.</p>
<p>Tehcnically quantum correlations obey the <a href="https://en.wikipedia.org/wiki/Tsirelson%27s_bound">Tsirelson’s bound</a> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%5CBig%7C%5Clangle%20a_0%20b_0%5Crangle+%5Clangle%20a_0%20b_1%5Crangle+%5Clangle%20a_1%20b_0%5Crangle-%5Clangle%20a_1%20b_1%5Crangle%5CBig%7C%5Cleq%202%5Csqrt%7B2%7D%0A%5Cend%7Balign%7D"> which, as you see, is weaker by a factor <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B2%7D">, so the correlations themselves can be stronger, although still bounded.</p>
</section>
<section id="final-remarks" class="level1">
<h1>Final remarks</h1>
<p>Quantum entanglement is indeed very unusual and consequential. There are many more wonders that it entails, please consult your favorite lecture notes for a non-exhaustive list. My current favorite are John Preskill’s <a href="http://theory.caltech.edu/~preskill/ph229/">lecture notes</a>. For a non-mathematical although technically very accurate discussion of entanglement see this artice by Frank Wilczek <a href="https://www.quantamagazine.org/entanglement-made-simple-20160428/">entanglement made simple</a>.</p>
<p>Any questions and suggestions are welcome, as this is my first blog demo.</p>



</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>quantum concepts</category>
  <category>qiskit</category>
  <guid>https://idnm.github.io/blog/posts/entanglement/2021-07-12-entanglement.html</guid>
  <pubDate>Sun, 11 Jul 2021 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/entanglement/entangled_spins.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>How was this blog set up?</title>
  <link>https://idnm.github.io/blog/posts/how_was_this_blog_setup/2021-07-11-how this blog was set up.html</link>
  <description><![CDATA[ 




<section id="why-fastpages" class="level1">
<h1>Why <code>fastpages</code>?</h1>
<section id="update-quatro" class="level2">
<h2 class="anchored" data-anchor-id="update-quatro">UPDATE: quatro</h2>
<p>This blog was setup in 2021 using <code>fastpages</code>. Two years later my site’s layout broke and I couldn’t fix it by reverting to previous commits. Then I went to check if I can update utils running under the hood and discovered that <code>fastpages</code> are <a href="https://github.com/fastai/fastpages">deprecated</a> in favor on another notebook-based publishing tool <code>quarto</code>. After a deep sigh, I decided to migrate the blog to <code>quatro</code> instead of trying to fix the <code>fastpages</code> version. The majority of the work is taken care automatically, see this <a href="https://nbdev.fast.ai/tutorials/blogging.html">this migration guide</a>. I’m putting down a list of things that didn’t work immediately, or that I had to spent some time looking for, just in case.</p>
<ol type="1">
<li><p>It’s really hard to type <code>quatro</code> instead of <code>quarto</code> or <code>quadro</code> when you are web searching.</p></li>
<li><p>To have a custom icon on top of your blog’s webpage include the following file in <code>_quarto.yml</code></p>
<pre><code>---
website:
  favicon: /path/to/image.png
---</code></pre></li>
<li><p>If paths to your images do not work, try <code>/path/image.png</code> instead of <code>path/image.png</code> or vice-versa. Or see here ?.</p></li>
<li><p>You can specify the last time the post was modified by including <code>date-modified: 'xxxx-xx-xx'</code> in the metadata.</p></li>
<li><p>Again, I had a problem with numbering and referencing equations. And again, I found a <a href="https://github.com/quarto-dev/quarto-cli/issues/2870#issuecomment-1282979181">github comment</a> that solved the issue. Including</p>
<pre><code>---
format:
  html:
    html-math-method: mathjax
    include-in-header:
      - text: |
          &lt;script&gt;
          window.MathJax = {
            tex: {
              tags: 'ams'
            }
          };
          &lt;/script&gt;
 ---</code></pre>
<p>in the blog’s notebook header solves the issue without any need to modify the standard latex labeling conventions. However, apparently this solution might break in the future.</p></li>
<li><p>To exclude posts from your ‘about’ page put <code>listing: false</code> in the <code>about.qmd</code>.</p></li>
</ol>
<p>Problems not solved.</p>
<ol type="1">
<li><p>I could not figure out how to render preview images for blog posts properly. They typically have wrong size. It’s possible to configure height of preview images in <code>_quarto.yml</code></p>
<pre><code>---
listing:
    image-height: 150px
---</code></pre>
<p>However, this will <em>crop</em>, not <em>resize</em> the image. Heuristically I found that when the images have certain proportion (approximately the a4 paper size wide side down) they render well enough. So I had to went back and resize canvas of all my preview images. Hope there is a good solution that I’ve missed.</p></li>
<li><p><code>fastpages</code> provided a really nice automatic badge for opening the notebook in colab. I think there is no support for this yet in quatro, but you can generate the badge <a href="https://openincolab.com/">yourself</a>.</p></li>
</ol>
<p>I must say that so far I really like the preview tool of <code>quarto</code>. Just call</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">quarto</span> preview</span></code></pre></div>
<p>in the shell and you quickly get a local version of your blog that is instantly updated as you change something in the posts or settings, much better than the preview I had with <code>fastpages</code>. Apparently, you things can get even better than that by using a proper IDE to work with quarto, but here I can offer little advice.</p>
<p>I also recommend checking out <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html#three-reasons-for-starting-a-blog">this guide</a> on how to setup a tweak a <code>quatro</code> blog.</p>
</section>
<section id="fastpages" class="level2">
<h2 class="anchored" data-anchor-id="fastpages">Fastpages</h2>
<p>After deciding to start a scientific blog I was looking for an appropriate technical solution. My main requirements were - Ease of set up. - Ease of writing posts. - Decent support of <img src="https://latex.codecogs.com/png.latex?%5CLaTeX">. - Support of code snippets.</p>
<p>After some search I decided to try out <a href="https://github.com/fastai/fastpages">fastpages</a>. I have a very limited understanding of the stack that <code>fastpages</code> use, so I treat it as a magic box. The magic box was easy for me to install while other bullet points are addressed all at once since <code>fastpages</code> allows to generate a post from a <code>jupyter notebook</code>. Although <code>jupyter notebook</code> is not exactly my favorite <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> editor it still much better than many other options and a good overall compromise. So essentially with <code>fastpages</code> you can write your posts in <code>jupyter notebook</code>, then commit to your <code>github</code> repository and the content will automatically be hosted at your domain on <a href="https://pages.github.com/">github pages</a>.</p>
</section>
</section>
<section id="caveats" class="level1">
<h1>Caveats</h1>
<p>Following <a href="https://github.com/fastai/fastpages#setup-instructions">official installation</a> worked smoothly for me. While customizing the blog further for my purposes there were several things that did not work right of the box of took some time to find out how to change:</p>
<section id="solved" class="level2">
<h2 class="anchored" data-anchor-id="solved">Solved</h2>
<ol type="1">
<li>I wanted to use numbered <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> equations with hyperlinks, which are not easily supported. This <a href="https://forums.fast.ai/t/consider-setting-use-math-to-true-by-default/64276/6">comment</a> solved my problem!</li>
<li>You need to edit <code>_pages/about.md</code> to customize the way your “about” page is displayed.</li>
<li>To customize the front page you need to edit <code>index.html</code>. This is literally written on the front page of your blog, but I have not noticed it for a while.</li>
<li>Initially a lot of troubleshooting is needed to get the appearance of the blog I wanted. Commiting and waiting for the online web page to set up is super-slow. Here is an <a href="https://github.com/fastai/fastpages/blob/master/_fastpages_docs/DEVELOPMENT.md#converting-the-pages-locally">official guide</a> on how to setup a live preview of your blog locally. One minor point that was a problem for me is that the default local server for blog preview https://127.0.0.1:4000 was not correct. After running <code>sudo make server</code> one of the outputs that <code>jekyll</code> produces is <code>Server address:</code> http://0.0.0.0:4000/blog/ which was the correct address for the live preview of my blog.</li>
<li>You need to do some work to make your site appear in google search results. <a href="https://victor2code.github.io/blog/2019/07/04/jekyll-github-pages-appear-on-Google.html">This</a> manual is very helpful, but a bit outdated: some of the things like generating <code>sitemap.xml</code> are now automated and do not require additional work as described in that post.</li>
</ol>
</section>
<section id="not-solved" class="level2">
<h2 class="anchored" data-anchor-id="not-solved">Not solved</h2>
<ol type="1">
<li>On the web page the display equations of <img src="https://latex.codecogs.com/png.latex?%5CLaTeX"> have fluctuations in size which does not look good.</li>
</ol>



</section>
</section>

<div class="quarto-listing quarto-listing-container-default" id="listing-listing">
<div class="list quarto-listing-default">

</div>
<div class="listing-no-matching d-none">
No matching items
</div>
</div> ]]></description>
  <category>fastpages</category>
  <category>quatro</category>
  <guid>https://idnm.github.io/blog/posts/how_was_this_blog_setup/2021-07-11-how this blog was set up.html</guid>
  <pubDate>Sat, 10 Jul 2021 21:00:00 GMT</pubDate>
  <media:content url="https://idnm.github.io/blog/posts/how_was_this_blog_setup/quarto.png" medium="image" type="image/png" height="76" width="144"/>
</item>
</channel>
</rss>
